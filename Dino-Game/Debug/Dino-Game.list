
Dino-Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  080050ec  080050ec  000150ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005304  08005304  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005304  08005304  00015304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800530c  0800530c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800530c  0800530c  0001530c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005310  08005310  00015310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000068  0800537c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  0800537c  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a6a4  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d9d  00000000  00000000  0002a77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  0002c520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000071b  00000000  00000000  0002ce78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017d6b  00000000  00000000  0002d593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb6e  00000000  00000000  000452fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009375d  00000000  00000000  00050e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003060  00000000  00000000  000e45cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000e762c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080050d4 	.word	0x080050d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080050d4 	.word	0x080050d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800058c:	b5b0      	push	{r4, r5, r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
 8000598:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800059a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800059e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80005a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80005a6:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80005a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005aa:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80005ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80005ae:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f80e 	bl	80005e2 <Lcd_init>

	return lcd;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	461d      	mov	r5, r3
 80005ca:	f107 0410 	add.w	r4, r7, #16
 80005ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005d6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80005da:	68f8      	ldr	r0, [r7, #12]
 80005dc:	3728      	adds	r7, #40	; 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bdb0      	pop	{r4, r5, r7, pc}

080005e2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	7d9b      	ldrb	r3, [r3, #22]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d10c      	bne.n	800060c <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80005f2:	2133      	movs	r1, #51	; 0x33
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 f88f 	bl	8000718 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80005fa:	2132      	movs	r1, #50	; 0x32
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f88b 	bl	8000718 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000602:	2128      	movs	r1, #40	; 0x28
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 f887 	bl	8000718 <lcd_write_command>
 800060a:	e003      	b.n	8000614 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 800060c:	2138      	movs	r1, #56	; 0x38
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 f882 	bl	8000718 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000614:	2101      	movs	r1, #1
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 f87e 	bl	8000718 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800061c:	210c      	movs	r1, #12
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f87a 	bl	8000718 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000624:	2106      	movs	r1, #6
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 f876 	bl	8000718 <lcd_write_command>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800063e:	2300      	movs	r3, #0
 8000640:	73fb      	strb	r3, [r7, #15]
 8000642:	e00a      	b.n	800065a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	4413      	add	r3, r2
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 f890 	bl	8000774 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	3301      	adds	r3, #1
 8000658:	73fb      	strb	r3, [r7, #15]
 800065a:	7bfc      	ldrb	r4, [r7, #15]
 800065c:	6838      	ldr	r0, [r7, #0]
 800065e:	f7ff fdbf 	bl	80001e0 <strlen>
 8000662:	4603      	mov	r3, r0
 8000664:	429c      	cmp	r4, r3
 8000666:	d3ed      	bcc.n	8000644 <Lcd_string+0x10>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bd90      	pop	{r4, r7, pc}
	...

08000674 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
 8000680:	4613      	mov	r3, r2
 8000682:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <Lcd_cursor+0x30>)
 8000688:	5cd2      	ldrb	r2, [r2, r3]
 800068a:	78bb      	ldrb	r3, [r7, #2]
 800068c:	4413      	add	r3, r2
 800068e:	b2db      	uxtb	r3, r3
 8000690:	3b80      	subs	r3, #128	; 0x80
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4619      	mov	r1, r3
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f000 f83e 	bl	8000718 <lcd_write_command>
	#endif
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	08005200 	.word	0x08005200

080006a8 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80006b0:	2101      	movs	r1, #1
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f000 f830 	bl	8000718 <lcd_write_command>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <Lcd_define_char>:

void Lcd_define_char(Lcd_HandleTypeDef * lcd, uint8_t code, uint8_t bitmap[]){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	460b      	mov	r3, r1
 80006ca:	607a      	str	r2, [r7, #4]
 80006cc:	72fb      	strb	r3, [r7, #11]
	code &= 0x7; // we only have 8 locations 0-7
 80006ce:	7afb      	ldrb	r3, [r7, #11]
 80006d0:	f003 0307 	and.w	r3, r3, #7
 80006d4:	72fb      	strb	r3, [r7, #11]
	lcd_write_command(lcd, SETCGRAM_ADDR | (code << 3));
 80006d6:	7afb      	ldrb	r3, [r7, #11]
 80006d8:	00db      	lsls	r3, r3, #3
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e0:	b25b      	sxtb	r3, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	4619      	mov	r1, r3
 80006e6:	68f8      	ldr	r0, [r7, #12]
 80006e8:	f000 f816 	bl	8000718 <lcd_write_command>
	for(uint8_t i=0;i<8;++i){
 80006ec:	2300      	movs	r3, #0
 80006ee:	75fb      	strb	r3, [r7, #23]
 80006f0:	e00a      	b.n	8000708 <Lcd_define_char+0x48>
		lcd_write_data(lcd, bitmap[i]);
 80006f2:	7dfb      	ldrb	r3, [r7, #23]
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	4413      	add	r3, r2
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	4619      	mov	r1, r3
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f000 f839 	bl	8000774 <lcd_write_data>
	for(uint8_t i=0;i<8;++i){
 8000702:	7dfb      	ldrb	r3, [r7, #23]
 8000704:	3301      	adds	r3, #1
 8000706:	75fb      	strb	r3, [r7, #23]
 8000708:	7dfb      	ldrb	r3, [r7, #23]
 800070a:	2b07      	cmp	r3, #7
 800070c:	d9f1      	bls.n	80006f2 <Lcd_define_char+0x32>
	}

}
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6898      	ldr	r0, [r3, #8]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	899b      	ldrh	r3, [r3, #12]
 800072c:	2200      	movs	r2, #0
 800072e:	4619      	mov	r1, r3
 8000730:	f002 fa3c 	bl	8002bac <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	7d9b      	ldrb	r3, [r3, #22]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d111      	bne.n	8000760 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	091b      	lsrs	r3, r3, #4
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2204      	movs	r2, #4
 8000744:	4619      	mov	r1, r3
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f000 f870 	bl	800082c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	f003 030f 	and.w	r3, r3, #15
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2204      	movs	r2, #4
 8000756:	4619      	mov	r1, r3
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 f867 	bl	800082c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800075e:	e005      	b.n	800076c <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	2208      	movs	r2, #8
 8000764:	4619      	mov	r1, r3
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f000 f860 	bl	800082c <lcd_write>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6898      	ldr	r0, [r3, #8]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	899b      	ldrh	r3, [r3, #12]
 8000788:	2201      	movs	r2, #1
 800078a:	4619      	mov	r1, r3
 800078c:	f002 fa0e 	bl	8002bac <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7d9b      	ldrb	r3, [r3, #22]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d111      	bne.n	80007bc <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000798:	78fb      	ldrb	r3, [r7, #3]
 800079a:	091b      	lsrs	r3, r3, #4
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2204      	movs	r2, #4
 80007a0:	4619      	mov	r1, r3
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f842 	bl	800082c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	f003 030f 	and.w	r3, r3, #15
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2204      	movs	r2, #4
 80007b2:	4619      	mov	r1, r3
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f839 	bl	800082c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80007ba:	e005      	b.n	80007c8 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	2208      	movs	r2, #8
 80007c0:	4619      	mov	r1, r3
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 f832 	bl	800082c <lcd_write>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <Lcd_write_data>:


void Lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6898      	ldr	r0, [r3, #8]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	899b      	ldrh	r3, [r3, #12]
 80007e4:	2201      	movs	r2, #1
 80007e6:	4619      	mov	r1, r3
 80007e8:	f002 f9e0 	bl	8002bac <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7d9b      	ldrb	r3, [r3, #22]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d111      	bne.n	8000818 <Lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	091b      	lsrs	r3, r3, #4
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2204      	movs	r2, #4
 80007fc:	4619      	mov	r1, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f814 	bl	800082c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	f003 030f 	and.w	r3, r3, #15
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2204      	movs	r2, #4
 800080e:	4619      	mov	r1, r3
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f000 f80b 	bl	800082c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000816:	e005      	b.n	8000824 <Lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000818:	78fb      	ldrb	r3, [r7, #3]
 800081a:	2208      	movs	r2, #8
 800081c:	4619      	mov	r1, r3
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 f804 	bl	800082c <lcd_write>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	70fb      	strb	r3, [r7, #3]
 8000838:	4613      	mov	r3, r2
 800083a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 800083c:	2300      	movs	r3, #0
 800083e:	73fb      	strb	r3, [r7, #15]
 8000840:	e019      	b.n	8000876 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	6818      	ldr	r0, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	685a      	ldr	r2, [r3, #4]
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	8819      	ldrh	r1, [r3, #0]
 800085a:	78fa      	ldrb	r2, [r7, #3]
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	fa42 f303 	asr.w	r3, r2, r3
 8000862:	b2db      	uxtb	r3, r3
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	461a      	mov	r2, r3
 800086c:	f002 f99e 	bl	8002bac <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	3301      	adds	r3, #1
 8000874:	73fb      	strb	r3, [r7, #15]
 8000876:	7bfa      	ldrb	r2, [r7, #15]
 8000878:	78bb      	ldrb	r3, [r7, #2]
 800087a:	429a      	cmp	r2, r3
 800087c:	d3e1      	bcc.n	8000842 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6918      	ldr	r0, [r3, #16]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	8a9b      	ldrh	r3, [r3, #20]
 8000886:	2201      	movs	r2, #1
 8000888:	4619      	mov	r1, r3
 800088a:	f002 f98f 	bl	8002bac <HAL_GPIO_WritePin>
	DELAY(1);
 800088e:	2001      	movs	r0, #1
 8000890:	f000 ff70 	bl	8001774 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6918      	ldr	r0, [r3, #16]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	8a9b      	ldrh	r3, [r3, #20]
 800089c:	2200      	movs	r2, #0
 800089e:	4619      	mov	r1, r3
 80008a0:	f002 f984 	bl	8002bac <HAL_GPIO_WritePin>
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <main>:


int score = 0;


int main(void) {
 80008ac:	b5b0      	push	{r4, r5, r7, lr}
 80008ae:	b0aa      	sub	sp, #168	; 0xa8
 80008b0:	af04      	add	r7, sp, #16
    // HAL configuration
    HAL_Init();
 80008b2:	f000 feed 	bl	8001690 <HAL_Init>

    // System Clock Configuration
    SystemClock_Config();
 80008b6:	f000 fb27 	bl	8000f08 <SystemClock_Config>

    // GPIO configuration
    MX_GPIO_Init();
 80008ba:	f000 fc2f 	bl	800111c <MX_GPIO_Init>

    // Init DMA - Configuration
    MX_DMA_Init();
 80008be:	f000 fc0d 	bl	80010dc <MX_DMA_Init>

    // Init ADC ( Analog - to - Digital Conversion )
    MX_ADC1_Init();
 80008c2:	f000 fb81 	bl	8000fc8 <MX_ADC1_Init>

    // Setup USART Configuration
    MX_USART2_UART_Init();
 80008c6:	f000 fbdf 	bl	8001088 <MX_USART2_UART_Init>

    // Configurazione delle porte e dei pin del display LCD
    Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 80008ca:	4b45      	ldr	r3, [pc, #276]	; (80009e0 <main+0x134>)
 80008cc:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80008d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Lcd_PinType pins[] = { GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_6 };
 80008d6:	4a43      	ldr	r2, [pc, #268]	; (80009e4 <main+0x138>)
 80008d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008e0:	e883 0003 	stmia.w	r3, {r0, r1}
    lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 80008e4:	4c40      	ldr	r4, [pc, #256]	; (80009e8 <main+0x13c>)
 80008e6:	4638      	mov	r0, r7
 80008e8:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80008ec:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80008f0:	2300      	movs	r3, #0
 80008f2:	9303      	str	r3, [sp, #12]
 80008f4:	2310      	movs	r3, #16
 80008f6:	9302      	str	r3, [sp, #8]
 80008f8:	4b3c      	ldr	r3, [pc, #240]	; (80009ec <main+0x140>)
 80008fa:	9301      	str	r3, [sp, #4]
 80008fc:	2320      	movs	r3, #32
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	4b3a      	ldr	r3, [pc, #232]	; (80009ec <main+0x140>)
 8000902:	f7ff fe43 	bl	800058c <Lcd_create>
 8000906:	4625      	mov	r5, r4
 8000908:	463c      	mov	r4, r7
 800090a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800090c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800090e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000912:	e885 0003 	stmia.w	r5, {r0, r1}

    // Inizializzazione del display LCD
    Lcd_init(&lcd);
 8000916:	4834      	ldr	r0, [pc, #208]	; (80009e8 <main+0x13c>)
 8000918:	f7ff fe63 	bl	80005e2 <Lcd_init>

    // Inizializzazione ADC con DMA
    HAL_ADC_Start_DMA(&hadc1, VR, 2);
 800091c:	2202      	movs	r2, #2
 800091e:	4934      	ldr	r1, [pc, #208]	; (80009f0 <main+0x144>)
 8000920:	4834      	ldr	r0, [pc, #208]	; (80009f4 <main+0x148>)
 8000922:	f000 ff8f 	bl	8001844 <HAL_ADC_Start_DMA>

    // Mostra il messaggio di benvenuto
    Lcd_clear(&lcd);
 8000926:	4830      	ldr	r0, [pc, #192]	; (80009e8 <main+0x13c>)
 8000928:	f7ff febe 	bl	80006a8 <Lcd_clear>
    Lcd_cursor(&lcd, 0, 1);
 800092c:	2201      	movs	r2, #1
 800092e:	2100      	movs	r1, #0
 8000930:	482d      	ldr	r0, [pc, #180]	; (80009e8 <main+0x13c>)
 8000932:	f7ff fe9f 	bl	8000674 <Lcd_cursor>
    Lcd_string(&lcd, " Welcome in ");
 8000936:	4930      	ldr	r1, [pc, #192]	; (80009f8 <main+0x14c>)
 8000938:	482b      	ldr	r0, [pc, #172]	; (80009e8 <main+0x13c>)
 800093a:	f7ff fe7b 	bl	8000634 <Lcd_string>
    Lcd_cursor(&lcd, 1, 1);
 800093e:	2201      	movs	r2, #1
 8000940:	2101      	movs	r1, #1
 8000942:	4829      	ldr	r0, [pc, #164]	; (80009e8 <main+0x13c>)
 8000944:	f7ff fe96 	bl	8000674 <Lcd_cursor>
    Lcd_string(&lcd, " Dino-Game ");
 8000948:	492c      	ldr	r1, [pc, #176]	; (80009fc <main+0x150>)
 800094a:	4827      	ldr	r0, [pc, #156]	; (80009e8 <main+0x13c>)
 800094c:	f7ff fe72 	bl	8000634 <Lcd_string>
    HAL_Delay(2000); // Mostra il messaggio di benvenuto per 2 secondi
 8000950:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000954:	f000 ff0e 	bl	8001774 <HAL_Delay>
    Lcd_clear(&lcd);
 8000958:	4823      	ldr	r0, [pc, #140]	; (80009e8 <main+0x13c>)
 800095a:	f7ff fea5 	bl	80006a8 <Lcd_clear>

    // Inizializza il gioco
    Dino dino;
    Obstacles obstacles;
    game_init(&lcd, &dino, &obstacles);
 800095e:	f107 0218 	add.w	r2, r7, #24
 8000962:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000966:	4619      	mov	r1, r3
 8000968:	481f      	ldr	r0, [pc, #124]	; (80009e8 <main+0x13c>)
 800096a:	f000 f84d 	bl	8000a08 <game_init>

    // Ciclo principale del gioco
    while (1) {

    	joystick_init(&hadc1, VR);
 800096e:	4920      	ldr	r1, [pc, #128]	; (80009f0 <main+0x144>)
 8000970:	4820      	ldr	r0, [pc, #128]	; (80009f4 <main+0x148>)
 8000972:	f000 fa73 	bl	8000e5c <joystick_init>

    	int joy_Y = VR[1];
 8000976:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <main+0x144>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    	serial_print("Attuale valore di joy_Y : %d\n",joy_Y);
 800097e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8000982:	481f      	ldr	r0, [pc, #124]	; (8000a00 <main+0x154>)
 8000984:	f000 fa48 	bl	8000e18 <serial_print>
    	// Aggiorna lo stato del gioco
        game_update(&lcd, &dino, &obstacles);
 8000988:	f107 0218 	add.w	r2, r7, #24
 800098c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000990:	4619      	mov	r1, r3
 8000992:	4815      	ldr	r0, [pc, #84]	; (80009e8 <main+0x13c>)
 8000994:	f000 f87c 	bl	8000a90 <game_update>
        game_draw(&lcd, &dino, &obstacles);
 8000998:	f107 0218 	add.w	r2, r7, #24
 800099c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80009a0:	4619      	mov	r1, r3
 80009a2:	4811      	ldr	r0, [pc, #68]	; (80009e8 <main+0x13c>)
 80009a4:	f000 f8f8 	bl	8000b98 <game_draw>
            while (1) {
                HAL_Delay(1000); // Mantiene la schermata di Game Over
            }
        }*/

        score += 1; // Incrementa il punteggio
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <main+0x158>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	3301      	adds	r3, #1
 80009ae:	4a15      	ldr	r2, [pc, #84]	; (8000a04 <main+0x158>)
 80009b0:	6013      	str	r3, [r2, #0]

        // Difficoltà del gioco - diminuzione del ritardo per aumentare la velocità
        int dino_difficulty = 200;
 80009b2:	23c8      	movs	r3, #200	; 0xc8
 80009b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        int max_dino_difficulty = 30;
 80009b8:	231e      	movs	r3, #30
 80009ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

        HAL_Delay(dino_difficulty);
 80009be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fed6 	bl	8001774 <HAL_Delay>
        if (dino_difficulty > max_dino_difficulty) {
 80009c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80009cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009d0:	429a      	cmp	r2, r3
 80009d2:	ddcc      	ble.n	800096e <main+0xc2>
            dino_difficulty -= 2;
 80009d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80009d8:	3b02      	subs	r3, #2
 80009da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    while (1) {
 80009de:	e7c6      	b.n	800096e <main+0xc2>
 80009e0:	08005128 	.word	0x08005128
 80009e4:	08005138 	.word	0x08005138
 80009e8:	20000174 	.word	0x20000174
 80009ec:	40020400 	.word	0x40020400
 80009f0:	2000018c 	.word	0x2000018c
 80009f4:	20000084 	.word	0x20000084
 80009f8:	080050ec 	.word	0x080050ec
 80009fc:	080050fc 	.word	0x080050fc
 8000a00:	08005108 	.word	0x08005108
 8000a04:	20000194 	.word	0x20000194

08000a08 <game_init>:
    }

    return 0;
}

void game_init(Lcd_HandleTypeDef *lcd, Dino *dino, Obstacles *obstacles) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
    Lcd_init(lcd);
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f7ff fde4 	bl	80005e2 <Lcd_init>

    set_dino_char(lcd); // Imposta i caratteri personalizzati
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f000 f974 	bl	8000d08 <set_dino_char>

    dino->position_row = 0;
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
    dino->position_col = 0;
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	605a      	str	r2, [r3, #4]
    dino->jump = false;
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	721a      	strb	r2, [r3, #8]
    dino->down = false;
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	2200      	movs	r2, #0
 8000a36:	725a      	strb	r2, [r3, #9]

    for (int i = 0; i < MAX_OBSTACLES; i++) {
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	e020      	b.n	8000a80 <game_init+0x78>
        obstacles->position_row[i] = rand() % 2; // Genera ostacoli casualmente tra row 0 e row 1
 8000a3e:	f003 f973 	bl	8003d28 <rand>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	bfb8      	it	lt
 8000a4c:	425b      	neglt	r3, r3
 8000a4e:	4619      	mov	r1, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        obstacles->position_col[i] = 16 + (rand() % 32); // Genera ostacoli in posizioni casuali
 8000a58:	f003 f966 	bl	8003d28 <rand>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	425a      	negs	r2, r3
 8000a60:	f003 031f 	and.w	r3, r3, #31
 8000a64:	f002 021f 	and.w	r2, r2, #31
 8000a68:	bf58      	it	pl
 8000a6a:	4253      	negpl	r3, r2
 8000a6c:	f103 0110 	add.w	r1, r3, #16
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	320a      	adds	r2, #10
 8000a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < MAX_OBSTACLES; i++) {
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	2b09      	cmp	r3, #9
 8000a84:	dddb      	ble.n	8000a3e <game_init+0x36>
    }
}
 8000a86:	bf00      	nop
 8000a88:	bf00      	nop
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <game_update>:



void game_update(Lcd_HandleTypeDef *lcd, Dino *dino, Obstacles *obstacles) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
    // Gestisci input dal joystick
    if (joystick_up(VR) == 1) {
 8000a9c:	483a      	ldr	r0, [pc, #232]	; (8000b88 <game_update+0xf8>)
 8000a9e:	f000 f9eb 	bl	8000e78 <joystick_up>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d10c      	bne.n	8000ac2 <game_update+0x32>

    	serial_print("Sono qui! Dopo il Joystick_up\n");
 8000aa8:	4838      	ldr	r0, [pc, #224]	; (8000b8c <game_update+0xfc>)
 8000aaa:	f000 f9b5 	bl	8000e18 <serial_print>
        dino->jump = true;
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	721a      	strb	r2, [r3, #8]
        dino->down = false;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	725a      	strb	r2, [r3, #9]
        dino->position_row = 0;
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e024      	b.n	8000b0c <game_update+0x7c>
    }
    else if (joystick_down(VR) == 1) {
 8000ac2:	4831      	ldr	r0, [pc, #196]	; (8000b88 <game_update+0xf8>)
 8000ac4:	f000 f9f0 	bl	8000ea8 <joystick_down>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d10c      	bne.n	8000ae8 <game_update+0x58>

    	serial_print("Sono qui! Dopo il Joystick_down\n");
 8000ace:	4830      	ldr	r0, [pc, #192]	; (8000b90 <game_update+0x100>)
 8000ad0:	f000 f9a2 	bl	8000e18 <serial_print>
        dino->jump = false;
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	721a      	strb	r2, [r3, #8]
        dino->down = true;
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	2201      	movs	r2, #1
 8000ade:	725a      	strb	r2, [r3, #9]
        dino->position_row = 1;
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	e011      	b.n	8000b0c <game_update+0x7c>

    } else if(joystick_stable(VR) == 1 ){
 8000ae8:	4827      	ldr	r0, [pc, #156]	; (8000b88 <game_update+0xf8>)
 8000aea:	f000 f9f2 	bl	8000ed2 <joystick_stable>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d10b      	bne.n	8000b0c <game_update+0x7c>

    	serial_print("Sono qui! Dopo il Joystick_stable\n");
 8000af4:	4827      	ldr	r0, [pc, #156]	; (8000b94 <game_update+0x104>)
 8000af6:	f000 f98f 	bl	8000e18 <serial_print>
        dino->jump = false;
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	2200      	movs	r2, #0
 8000afe:	721a      	strb	r2, [r3, #8]
        dino->down = false;
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	2200      	movs	r2, #0
 8000b04:	725a      	strb	r2, [r3, #9]
        dino->position_row = 1;
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	601a      	str	r2, [r3, #0]
    }

    // Muovi gli ostacoli
    for (int i = 0; i < MAX_OBSTACLES; i++) {
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e032      	b.n	8000b78 <game_update+0xe8>
        obstacles->position_col[i]--;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	320a      	adds	r2, #10
 8000b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b1c:	1e59      	subs	r1, r3, #1
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	320a      	adds	r2, #10
 8000b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        if (obstacles->position_col[i] < 0) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	320a      	adds	r2, #10
 8000b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	da1d      	bge.n	8000b72 <game_update+0xe2>
            // Riposiziona l'ostacolo
            obstacles->position_row[i] = rand() % 2; // Genera ostacoli casualmente tra row 0 e row 1
 8000b36:	f003 f8f7 	bl	8003d28 <rand>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	bfb8      	it	lt
 8000b44:	425b      	neglt	r3, r3
 8000b46:	4619      	mov	r1, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	697a      	ldr	r2, [r7, #20]
 8000b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            obstacles->position_col[i] = 16 + (rand() % 32);
 8000b50:	f003 f8ea 	bl	8003d28 <rand>
 8000b54:	4603      	mov	r3, r0
 8000b56:	425a      	negs	r2, r3
 8000b58:	f003 031f 	and.w	r3, r3, #31
 8000b5c:	f002 021f 	and.w	r2, r2, #31
 8000b60:	bf58      	it	pl
 8000b62:	4253      	negpl	r3, r2
 8000b64:	f103 0110 	add.w	r1, r3, #16
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	320a      	adds	r2, #10
 8000b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < MAX_OBSTACLES; i++) {
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3301      	adds	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	2b09      	cmp	r3, #9
 8000b7c:	ddc9      	ble.n	8000b12 <game_update+0x82>
        }
    }
}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000018c 	.word	0x2000018c
 8000b8c:	08005140 	.word	0x08005140
 8000b90:	08005160 	.word	0x08005160
 8000b94:	08005184 	.word	0x08005184

08000b98 <game_draw>:




void game_draw(Lcd_HandleTypeDef *lcd, Dino *dino, Obstacles *obstacles) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]

	Lcd_clear(lcd);
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f7ff fd7f 	bl	80006a8 <Lcd_clear>

    // Draw sun
	Lcd_cursor(lcd, 0, 15);
 8000baa:	220f      	movs	r2, #15
 8000bac:	2100      	movs	r1, #0
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f7ff fd60 	bl	8000674 <Lcd_cursor>
	Lcd_write_data(lcd, 0); //sun
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f7ff fe0a 	bl	80007d0 <Lcd_write_data>


    // Draw Dino

    // CASE 1 : Normal Running
    if ( (dino->jump== false) && (dino->down==false) && dino->position_row == 1) {
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	7a1b      	ldrb	r3, [r3, #8]
 8000bc0:	f083 0301 	eor.w	r3, r3, #1
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d019      	beq.n	8000bfe <game_draw+0x66>
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	7a5b      	ldrb	r3, [r3, #9]
 8000bce:	f083 0301 	eor.w	r3, r3, #1
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d012      	beq.n	8000bfe <game_draw+0x66>
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d10e      	bne.n	8000bfe <game_draw+0x66>

        Lcd_cursor(lcd, dino->position_row, dino->position_col);
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	b2d9      	uxtb	r1, r3
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	461a      	mov	r2, r3
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f7ff fd40 	bl	8000674 <Lcd_cursor>
        Lcd_string(lcd, "\x01"); // dino_run1
 8000bf4:	493e      	ldr	r1, [pc, #248]	; (8000cf0 <game_draw+0x158>)
 8000bf6:	68f8      	ldr	r0, [r7, #12]
 8000bf8:	f7ff fd1c 	bl	8000634 <Lcd_string>
 8000bfc:	e02c      	b.n	8000c58 <game_draw+0xc0>
    // CASE 2 : JUMP situation
    }else if( (dino->jump==true) && dino->position_row==0){
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	7a1b      	ldrb	r3, [r3, #8]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d012      	beq.n	8000c2c <game_draw+0x94>
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10e      	bne.n	8000c2c <game_draw+0x94>
    	Lcd_cursor(lcd, dino->position_row, dino->position_col);
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	b2d9      	uxtb	r1, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	f7ff fd29 	bl	8000674 <Lcd_cursor>
		Lcd_string(lcd, "\x02"); // dino_run1
 8000c22:	4934      	ldr	r1, [pc, #208]	; (8000cf4 <game_draw+0x15c>)
 8000c24:	68f8      	ldr	r0, [r7, #12]
 8000c26:	f7ff fd05 	bl	8000634 <Lcd_string>
 8000c2a:	e015      	b.n	8000c58 <game_draw+0xc0>
    // CASE 3: DOWN situation
    }else if( (dino->down == true) && dino->position_row==1){
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	7a5b      	ldrb	r3, [r3, #9]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d011      	beq.n	8000c58 <game_draw+0xc0>
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d10d      	bne.n	8000c58 <game_draw+0xc0>

    	Lcd_cursor(lcd, dino->position_row, dino->position_col);
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	b2d9      	uxtb	r1, r3
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f7ff fd12 	bl	8000674 <Lcd_cursor>
		Lcd_string(lcd, "\x03"); // dino_down1
 8000c50:	4929      	ldr	r1, [pc, #164]	; (8000cf8 <game_draw+0x160>)
 8000c52:	68f8      	ldr	r0, [r7, #12]
 8000c54:	f7ff fcee 	bl	8000634 <Lcd_string>

    }

    // Disegna gli ostacoli
        for (int i = 0; i < MAX_OBSTACLES; i++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	e040      	b.n	8000ce0 <game_draw+0x148>
            if (obstacles->position_col[i] < 16) { // Cambiato a 16 per includere la colonna 15
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	320a      	adds	r2, #10
 8000c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	dc36      	bgt.n	8000cda <game_draw+0x142>
                Lcd_cursor(lcd, obstacles->position_row[i], obstacles->position_col[i]);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c74:	b2d9      	uxtb	r1, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	320a      	adds	r2, #10
 8000c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	461a      	mov	r2, r3
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	f7ff fcf5 	bl	8000674 <Lcd_cursor>

                // Genera ostacoli in base alla row
                if (obstacles->position_row[i] == 1) {
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d104      	bne.n	8000ca0 <game_draw+0x108>
                    // Cactus devono essere nella row 0
                    Lcd_string(lcd, "\x05"); // cactus
 8000c96:	4919      	ldr	r1, [pc, #100]	; (8000cfc <game_draw+0x164>)
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f7ff fccb 	bl	8000634 <Lcd_string>
 8000c9e:	e01c      	b.n	8000cda <game_draw+0x142>
                } else if (obstacles->position_row[i] == 0) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d116      	bne.n	8000cda <game_draw+0x142>
                    // Gli uccelli devono essere nella row 1
                    switch (rand() % 2) {
 8000cac:	f003 f83c 	bl	8003d28 <rand>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	bfb8      	it	lt
 8000cba:	425b      	neglt	r3, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d002      	beq.n	8000cc6 <game_draw+0x12e>
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d005      	beq.n	8000cd0 <game_draw+0x138>
 8000cc4:	e009      	b.n	8000cda <game_draw+0x142>
                        case 0:
                            Lcd_string(lcd, "\x06"); // bird_top
 8000cc6:	490e      	ldr	r1, [pc, #56]	; (8000d00 <game_draw+0x168>)
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f7ff fcb3 	bl	8000634 <Lcd_string>
                            break;
 8000cce:	e004      	b.n	8000cda <game_draw+0x142>
                        case 1:
                            Lcd_string(lcd, "\x07"); // bird_bottom
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <game_draw+0x16c>)
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f7ff fcae 	bl	8000634 <Lcd_string>
                            break;
 8000cd8:	bf00      	nop
        for (int i = 0; i < MAX_OBSTACLES; i++) {
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	2b09      	cmp	r3, #9
 8000ce4:	ddbb      	ble.n	8000c5e <game_draw+0xc6>
                    }
                }
            }
        }
}
 8000ce6:	bf00      	nop
 8000ce8:	bf00      	nop
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	080051a8 	.word	0x080051a8
 8000cf4:	080051ac 	.word	0x080051ac
 8000cf8:	080051b0 	.word	0x080051b0
 8000cfc:	080051b4 	.word	0x080051b4
 8000d00:	080051b8 	.word	0x080051b8
 8000d04:	080051bc 	.word	0x080051bc

08000d08 <set_dino_char>:
    return 0; // Nessuna collisione
}



void set_dino_char(Lcd_HandleTypeDef *lcd) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b092      	sub	sp, #72	; 0x48
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
    uint8_t sun[8] = {
 8000d10:	4a39      	ldr	r2, [pc, #228]	; (8000df8 <set_dino_char+0xf0>)
 8000d12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d1a:	e883 0003 	stmia.w	r3, {r0, r1}
        0x00, 0x00, 0x1C, 0x1F, 0x1F, 0x1F, 0x1C, 0x00
    };
    uint8_t dino_run1[8] = {
 8000d1e:	4a37      	ldr	r2, [pc, #220]	; (8000dfc <set_dino_char+0xf4>)
 8000d20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d28:	e883 0003 	stmia.w	r3, {r0, r1}
        0x07, 0x05, 0x07, 0x04, 0x17, 0x1E, 0x0E, 0x1B
    };
    uint8_t dino_run2[8] = {
 8000d2c:	4a34      	ldr	r2, [pc, #208]	; (8000e00 <set_dino_char+0xf8>)
 8000d2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d36:	e883 0003 	stmia.w	r3, {r0, r1}
        0x07, 0x05, 0x07, 0x04, 0x17, 0x1E, 0x0F, 0x0C
    };
    uint8_t cactus[8] = {
 8000d3a:	4a32      	ldr	r2, [pc, #200]	; (8000e04 <set_dino_char+0xfc>)
 8000d3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d44:	e883 0003 	stmia.w	r3, {r0, r1}
        0x04, 0x04, 0x05, 0x15, 0x17, 0x1C, 0x04, 0x04
    };
    uint8_t dino_duck1[8] = {
 8000d48:	4a2f      	ldr	r2, [pc, #188]	; (8000e08 <set_dino_char+0x100>)
 8000d4a:	f107 0320 	add.w	r3, r7, #32
 8000d4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d52:	e883 0003 	stmia.w	r3, {r0, r1}
        0x00, 0x00, 0x03, 0x05, 0x17, 0x1E, 0x0F, 0x08
    };
    uint8_t dino_duck2[8] = {
 8000d56:	4a2d      	ldr	r2, [pc, #180]	; (8000e0c <set_dino_char+0x104>)
 8000d58:	f107 0318 	add.w	r3, r7, #24
 8000d5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d60:	e883 0003 	stmia.w	r3, {r0, r1}
        0x00, 0x00, 0x03, 0x05, 0x17, 0x1E, 0x0E, 0x12
    };
    uint8_t bird_top[8] = {
 8000d64:	4a2a      	ldr	r2, [pc, #168]	; (8000e10 <set_dino_char+0x108>)
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d6e:	e883 0003 	stmia.w	r3, {r0, r1}
        0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0E, 0x1C
    };
    uint8_t bird_bottom[8] = {
 8000d72:	4a28      	ldr	r2, [pc, #160]	; (8000e14 <set_dino_char+0x10c>)
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d7c:	e883 0003 	stmia.w	r3, {r0, r1}
        0x1C, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    Lcd_define_char(lcd, 0, sun);
 8000d80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d84:	461a      	mov	r2, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff fc99 	bl	80006c0 <Lcd_define_char>
    Lcd_define_char(lcd, 1, dino_run1);
 8000d8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d92:	461a      	mov	r2, r3
 8000d94:	2101      	movs	r1, #1
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff fc92 	bl	80006c0 <Lcd_define_char>
    Lcd_define_char(lcd, 2, dino_run2);
 8000d9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000da0:	461a      	mov	r2, r3
 8000da2:	2102      	movs	r1, #2
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff fc8b 	bl	80006c0 <Lcd_define_char>
    Lcd_define_char(lcd, 3, dino_duck1);
 8000daa:	f107 0320 	add.w	r3, r7, #32
 8000dae:	461a      	mov	r2, r3
 8000db0:	2103      	movs	r1, #3
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff fc84 	bl	80006c0 <Lcd_define_char>
    Lcd_define_char(lcd, 4, dino_duck2);
 8000db8:	f107 0318 	add.w	r3, r7, #24
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	2104      	movs	r1, #4
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff fc7d 	bl	80006c0 <Lcd_define_char>
    Lcd_define_char(lcd, 5, cactus);
 8000dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dca:	461a      	mov	r2, r3
 8000dcc:	2105      	movs	r1, #5
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff fc76 	bl	80006c0 <Lcd_define_char>
    Lcd_define_char(lcd, 6, bird_top);
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2106      	movs	r1, #6
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fc6f 	bl	80006c0 <Lcd_define_char>
    Lcd_define_char(lcd, 7, bird_bottom);
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	461a      	mov	r2, r3
 8000de8:	2107      	movs	r1, #7
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff fc68 	bl	80006c0 <Lcd_define_char>
}
 8000df0:	bf00      	nop
 8000df2:	3748      	adds	r7, #72	; 0x48
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	080051c0 	.word	0x080051c0
 8000dfc:	080051c8 	.word	0x080051c8
 8000e00:	080051d0 	.word	0x080051d0
 8000e04:	080051d8 	.word	0x080051d8
 8000e08:	080051e0 	.word	0x080051e0
 8000e0c:	080051e8 	.word	0x080051e8
 8000e10:	080051f0 	.word	0x080051f0
 8000e14:	080051f8 	.word	0x080051f8

08000e18 <serial_print>:


void serial_print(const char *format, ...) {
 8000e18:	b40f      	push	{r0, r1, r2, r3}
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b09a      	sub	sp, #104	; 0x68
 8000e1e:	af00      	add	r7, sp, #0
    char buffer[100]; // Buffer per la stringa formattata
    va_list args;     // Lista dei parametri variabili

    // Inizializza la lista dei parametri
    va_start(args, format);
 8000e20:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e24:	603b      	str	r3, [r7, #0]
    // Format the string using vsnprintf to safely handle variable arguments
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000e26:	1d38      	adds	r0, r7, #4
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000e2c:	2164      	movs	r1, #100	; 0x64
 8000e2e:	f003 f8e9 	bl	8004004 <vsniprintf>
    va_end(args); // Chiude la lista dei parametri

    // Invia il messaggio tramite UART
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff f9d3 	bl	80001e0 <strlen>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	1d39      	adds	r1, r7, #4
 8000e40:	f04f 33ff 	mov.w	r3, #4294967295
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <serial_print+0x40>)
 8000e46:	f002 fbb3 	bl	80035b0 <HAL_UART_Transmit>
}
 8000e4a:	bf00      	nop
 8000e4c:	3768      	adds	r7, #104	; 0x68
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e54:	b004      	add	sp, #16
 8000e56:	4770      	bx	lr
 8000e58:	2000012c 	.word	0x2000012c

08000e5c <joystick_init>:



void joystick_init(ADC_HandleTypeDef *hadc1, uint32_t *VR) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
    // Inizializza il joystick (se necessario)
    // La configurazione dell'ADC e del DMA dovrebbe essere già fatta nel main.c
    HAL_ADC_Start_DMA(hadc1, VR, 2);
 8000e66:	2202      	movs	r2, #2
 8000e68:	6839      	ldr	r1, [r7, #0]
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 fcea 	bl	8001844 <HAL_ADC_Start_DMA>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <joystick_up>:


int joystick_up(uint32_t *VR) {
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
    // Leggi il valore del joystick dall'asse Y
    int joy_Y = VR[1];
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3304      	adds	r3, #4
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	60fb      	str	r3, [r7, #12]
    //serial_print("Sono qui nel joystick-up() , value : %d\n",joy_Y);

    // Soglia per rilevare il movimento verso l'alto (da calibrare)
    int threshold_up = 500;
 8000e88:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e8c:	60bb      	str	r3, [r7, #8]

    // Ritorna 1 se il joystick è spostato verso l'alto, altrimenti 0
    return (joy_Y < threshold_up) ? 1 : 0;
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	bfb4      	ite	lt
 8000e96:	2301      	movlt	r3, #1
 8000e98:	2300      	movge	r3, #0
 8000e9a:	b2db      	uxtb	r3, r3
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <joystick_down>:


int joystick_down(uint32_t *VR) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
    // Leggi il valore del joystick dall'asse Y
    int joy_Y = VR[1];
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3304      	adds	r3, #4
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	60fb      	str	r3, [r7, #12]
    //serial_print("Sono qui nel joystick-down() , value : %d\n",joy_Y);

    // Soglia per rilevare il movimento verso il basso (da calibrare)
    return (joy_Y > 3200) ? 1 : 0;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8000ebe:	bfcc      	ite	gt
 8000ec0:	2301      	movgt	r3, #1
 8000ec2:	2300      	movle	r3, #0
 8000ec4:	b2db      	uxtb	r3, r3
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <joystick_stable>:

int joystick_stable(uint32_t *VR) {
 8000ed2:	b480      	push	{r7}
 8000ed4:	b085      	sub	sp, #20
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
    // Leggi il valore del joystick dall'asse Y
    int joy_Y = VR[1];
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3304      	adds	r3, #4
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
    //serial_print("Sono qui nel joystick-down() , value : %d\n",joy_Y);

    return (joy_Y>=3000 && joy_Y<=3200) ? 1: 0;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	dd05      	ble.n	8000ef8 <joystick_stable+0x26>
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8000ef2:	dc01      	bgt.n	8000ef8 <joystick_stable+0x26>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <joystick_stable+0x28>
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b094      	sub	sp, #80	; 0x50
 8000f0c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	2230      	movs	r2, #48	; 0x30
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 f882 	bl	8004020 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <SystemClock_Config+0xb8>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	4a22      	ldr	r2, [pc, #136]	; (8000fc0 <SystemClock_Config+0xb8>)
 8000f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3c:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <SystemClock_Config+0xb8>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <SystemClock_Config+0xbc>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f54:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <SystemClock_Config+0xbc>)
 8000f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <SystemClock_Config+0xbc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f70:	2310      	movs	r3, #16
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f78:	f107 0320 	add.w	r3, r7, #32
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 fe2f 	bl	8002be0 <HAL_RCC_OscConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0x84>
	{
		Error_Handler();
 8000f88:	f000 f95e 	bl	8001248 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 f891 	bl	80030d0 <HAL_RCC_ClockConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0xb0>
	{
		Error_Handler();
 8000fb4:	f000 f948 	bl	8001248 <Error_Handler>
	}
}
 8000fb8:	bf00      	nop
 8000fba:	3750      	adds	r7, #80	; 0x50
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40007000 	.word	0x40007000

08000fc8 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000fda:	4b28      	ldr	r3, [pc, #160]	; (800107c <MX_ADC1_Init+0xb4>)
 8000fdc:	4a28      	ldr	r2, [pc, #160]	; (8001080 <MX_ADC1_Init+0xb8>)
 8000fde:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fe0:	4b26      	ldr	r3, [pc, #152]	; (800107c <MX_ADC1_Init+0xb4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <MX_ADC1_Init+0xb4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <MX_ADC1_Init+0xb4>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <MX_ADC1_Init+0xb4>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <MX_ADC1_Init+0xb4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <MX_ADC1_Init+0xb4>)
 8001002:	2200      	movs	r2, #0
 8001004:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <MX_ADC1_Init+0xb4>)
 8001008:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <MX_ADC1_Init+0xbc>)
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800100c:	4b1b      	ldr	r3, [pc, #108]	; (800107c <MX_ADC1_Init+0xb4>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <MX_ADC1_Init+0xb4>)
 8001014:	2202      	movs	r2, #2
 8001016:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_ADC1_Init+0xb4>)
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <MX_ADC1_Init+0xb4>)
 8001022:	2201      	movs	r2, #1
 8001024:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001026:	4815      	ldr	r0, [pc, #84]	; (800107c <MX_ADC1_Init+0xb4>)
 8001028:	f000 fbc8 	bl	80017bc <HAL_ADC_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 8001032:	f000 f909 	bl	8001248 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8001036:	230a      	movs	r3, #10
 8001038:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800103a:	2301      	movs	r3, #1
 800103c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800103e:	2307      	movs	r3, #7
 8001040:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001042:	463b      	mov	r3, r7
 8001044:	4619      	mov	r1, r3
 8001046:	480d      	ldr	r0, [pc, #52]	; (800107c <MX_ADC1_Init+0xb4>)
 8001048:	f000 fd0a 	bl	8001a60 <HAL_ADC_ConfigChannel>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 8001052:	f000 f8f9 	bl	8001248 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8001056:	230b      	movs	r3, #11
 8001058:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 800105a:	2302      	movs	r3, #2
 800105c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	4619      	mov	r1, r3
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <MX_ADC1_Init+0xb4>)
 8001064:	f000 fcfc 	bl	8001a60 <HAL_ADC_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_ADC1_Init+0xaa>
	{
		Error_Handler();
 800106e:	f000 f8eb 	bl	8001248 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000084 	.word	0x20000084
 8001080:	40012000 	.word	0x40012000
 8001084:	0f000001 	.word	0x0f000001

08001088 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <MX_USART2_UART_Init+0x50>)
 8001090:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 8001094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001098:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010c0:	f002 fa26 	bl	8003510 <HAL_UART_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80010ca:	f000 f8bd 	bl	8001248 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2000012c 	.word	0x2000012c
 80010d8:	40004400 	.word	0x40004400

080010dc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_DMA_Init+0x3c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <MX_DMA_Init+0x3c>)
 80010ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_DMA_Init+0x3c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2038      	movs	r0, #56	; 0x38
 8001104:	f001 f827 	bl	8002156 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001108:	2038      	movs	r0, #56	; 0x38
 800110a:	f001 f840 	bl	800218e <HAL_NVIC_EnableIRQ>

}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b40      	ldr	r3, [pc, #256]	; (8001238 <MX_GPIO_Init+0x11c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a3f      	ldr	r2, [pc, #252]	; (8001238 <MX_GPIO_Init+0x11c>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <MX_GPIO_Init+0x11c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b39      	ldr	r3, [pc, #228]	; (8001238 <MX_GPIO_Init+0x11c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a38      	ldr	r2, [pc, #224]	; (8001238 <MX_GPIO_Init+0x11c>)
 8001158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b36      	ldr	r3, [pc, #216]	; (8001238 <MX_GPIO_Init+0x11c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	4b32      	ldr	r3, [pc, #200]	; (8001238 <MX_GPIO_Init+0x11c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a31      	ldr	r2, [pc, #196]	; (8001238 <MX_GPIO_Init+0x11c>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <MX_GPIO_Init+0x11c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <MX_GPIO_Init+0x11c>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a2a      	ldr	r2, [pc, #168]	; (8001238 <MX_GPIO_Init+0x11c>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b28      	ldr	r3, [pc, #160]	; (8001238 <MX_GPIO_Init+0x11c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	21e0      	movs	r1, #224	; 0xe0
 80011a6:	4825      	ldr	r0, [pc, #148]	; (800123c <MX_GPIO_Init+0x120>)
 80011a8:	f001 fd00 	bl	8002bac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2180      	movs	r1, #128	; 0x80
 80011b0:	4823      	ldr	r0, [pc, #140]	; (8001240 <MX_GPIO_Init+0x124>)
 80011b2:	f001 fcfb 	bl	8002bac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2170      	movs	r1, #112	; 0x70
 80011ba:	4822      	ldr	r0, [pc, #136]	; (8001244 <MX_GPIO_Init+0x128>)
 80011bc:	f001 fcf6 	bl	8002bac <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80011c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	481a      	ldr	r0, [pc, #104]	; (8001240 <MX_GPIO_Init+0x124>)
 80011d8:	f001 fb64 	bl	80028a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA6 PA7 */
	GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 80011dc:	23e0      	movs	r3, #224	; 0xe0
 80011de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	4812      	ldr	r0, [pc, #72]	; (800123c <MX_GPIO_Init+0x120>)
 80011f4:	f001 fb56 	bl	80028a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	480c      	ldr	r0, [pc, #48]	; (8001240 <MX_GPIO_Init+0x124>)
 8001210:	f001 fb48 	bl	80028a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB4 PB5 PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001214:	2370      	movs	r3, #112	; 0x70
 8001216:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <MX_GPIO_Init+0x128>)
 800122c:	f001 fb3a 	bl	80028a4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001230:	bf00      	nop
 8001232:	3728      	adds	r7, #40	; 0x28
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000
 8001240:	40020800 	.word	0x40020800
 8001244:	40020400 	.word	0x40020400

08001248 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001250:	e7fe      	b.n	8001250 <Error_Handler+0x8>
	...

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_MspInit+0x4c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <HAL_MspInit+0x4c>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <HAL_MspInit+0x4c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001292:	2007      	movs	r0, #7
 8001294:	f000 ff54 	bl	8002140 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a2f      	ldr	r2, [pc, #188]	; (8001380 <HAL_ADC_MspInit+0xdc>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d157      	bne.n	8001376 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <HAL_ADC_MspInit+0xe0>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a2d      	ldr	r2, [pc, #180]	; (8001384 <HAL_ADC_MspInit+0xe0>)
 80012d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <HAL_ADC_MspInit+0xe0>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b27      	ldr	r3, [pc, #156]	; (8001384 <HAL_ADC_MspInit+0xe0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a26      	ldr	r2, [pc, #152]	; (8001384 <HAL_ADC_MspInit+0xe0>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b24      	ldr	r3, [pc, #144]	; (8001384 <HAL_ADC_MspInit+0xe0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012fe:	2303      	movs	r3, #3
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001302:	2303      	movs	r3, #3
 8001304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	481d      	ldr	r0, [pc, #116]	; (8001388 <HAL_ADC_MspInit+0xe4>)
 8001312:	f001 fac7 	bl	80028a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001318:	4a1d      	ldr	r2, [pc, #116]	; (8001390 <HAL_ADC_MspInit+0xec>)
 800131a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <HAL_ADC_MspInit+0xe8>)
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <HAL_ADC_MspInit+0xe8>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001330:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001334:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001338:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800133c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001340:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001344:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001348:	f44f 7280 	mov.w	r2, #256	; 0x100
 800134c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001354:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800135a:	480c      	ldr	r0, [pc, #48]	; (800138c <HAL_ADC_MspInit+0xe8>)
 800135c:	f000 ff32 	bl	80021c4 <HAL_DMA_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001366:	f7ff ff6f 	bl	8001248 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a07      	ldr	r2, [pc, #28]	; (800138c <HAL_ADC_MspInit+0xe8>)
 800136e:	639a      	str	r2, [r3, #56]	; 0x38
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40012000 	.word	0x40012000
 8001384:	40023800 	.word	0x40023800
 8001388:	40020800 	.word	0x40020800
 800138c:	200000cc 	.word	0x200000cc
 8001390:	40026410 	.word	0x40026410

08001394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a19      	ldr	r2, [pc, #100]	; (8001418 <HAL_UART_MspInit+0x84>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d12b      	bne.n	800140e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <HAL_UART_MspInit+0x88>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a17      	ldr	r2, [pc, #92]	; (800141c <HAL_UART_MspInit+0x88>)
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_UART_MspInit+0x88>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_UART_MspInit+0x88>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a10      	ldr	r2, [pc, #64]	; (800141c <HAL_UART_MspInit+0x88>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_UART_MspInit+0x88>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ee:	230c      	movs	r3, #12
 80013f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013fe:	2307      	movs	r3, #7
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <HAL_UART_MspInit+0x8c>)
 800140a:	f001 fa4b 	bl	80028a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800140e:	bf00      	nop
 8001410:	3728      	adds	r7, #40	; 0x28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40004400 	.word	0x40004400
 800141c:	40023800 	.word	0x40023800
 8001420:	40020000 	.word	0x40020000

08001424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001428:	e7fe      	b.n	8001428 <NMI_Handler+0x4>

0800142a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <MemManage_Handler+0x4>

08001436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler+0x4>

08001442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001470:	f000 f960 	bl	8001734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <DMA2_Stream0_IRQHandler+0x10>)
 800147e:	f000 ffa7 	bl	80023d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200000cc 	.word	0x200000cc

0800148c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return 1;
 8001490:	2301      	movs	r3, #1
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <_kill>:

int _kill(int pid, int sig)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014a6:	f002 fe09 	bl	80040bc <__errno>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2216      	movs	r2, #22
 80014ae:	601a      	str	r2, [r3, #0]
  return -1;
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_exit>:

void _exit (int status)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ffe7 	bl	800149c <_kill>
  while (1) {}    /* Make sure we hang here */
 80014ce:	e7fe      	b.n	80014ce <_exit+0x12>

080014d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e00a      	b.n	80014f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014e2:	f3af 8000 	nop.w
 80014e6:	4601      	mov	r1, r0
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	60ba      	str	r2, [r7, #8]
 80014ee:	b2ca      	uxtb	r2, r1
 80014f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dbf0      	blt.n	80014e2 <_read+0x12>
  }

  return len;
 8001500:	687b      	ldr	r3, [r7, #4]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	e009      	b.n	8001530 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	60ba      	str	r2, [r7, #8]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3301      	adds	r3, #1
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	429a      	cmp	r2, r3
 8001536:	dbf1      	blt.n	800151c <_write+0x12>
  }
  return len;
 8001538:	687b      	ldr	r3, [r7, #4]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <_close>:

int _close(int file)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800156a:	605a      	str	r2, [r3, #4]
  return 0;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <_isatty>:

int _isatty(int file)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b4:	4a14      	ldr	r2, [pc, #80]	; (8001608 <_sbrk+0x5c>)
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <_sbrk+0x60>)
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <_sbrk+0x64>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <_sbrk+0x64>)
 80015ca:	4a12      	ldr	r2, [pc, #72]	; (8001614 <_sbrk+0x68>)
 80015cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d207      	bcs.n	80015ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015dc:	f002 fd6e 	bl	80040bc <__errno>
 80015e0:	4603      	mov	r3, r0
 80015e2:	220c      	movs	r2, #12
 80015e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	e009      	b.n	8001600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f2:	4b07      	ldr	r3, [pc, #28]	; (8001610 <_sbrk+0x64>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <_sbrk+0x64>)
 80015fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fe:	68fb      	ldr	r3, [r7, #12]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20018000 	.word	0x20018000
 800160c:	00000400 	.word	0x00000400
 8001610:	20000198 	.word	0x20000198
 8001614:	200002f0 	.word	0x200002f0

08001618 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <SystemInit+0x20>)
 800161e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <SystemInit+0x20>)
 8001624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
	}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001674 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001640:	f7ff ffea 	bl	8001618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001646:	490d      	ldr	r1, [pc, #52]	; (800167c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800164c:	e002      	b.n	8001654 <LoopCopyDataInit>

0800164e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001652:	3304      	adds	r3, #4

08001654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001658:	d3f9      	bcc.n	800164e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800165c:	4c0a      	ldr	r4, [pc, #40]	; (8001688 <LoopFillZerobss+0x22>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001660:	e001      	b.n	8001666 <LoopFillZerobss>

08001662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001664:	3204      	adds	r2, #4

08001666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001668:	d3fb      	bcc.n	8001662 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800166a:	f002 fd2d 	bl	80040c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166e:	f7ff f91d 	bl	80008ac <main>
  bx  lr    
 8001672:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001674:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001680:	08005314 	.word	0x08005314
  ldr r2, =_sbss
 8001684:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001688:	200002ec 	.word	0x200002ec

0800168c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC_IRQHandler>
	...

08001690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_Init+0x40>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <HAL_Init+0x40>)
 800169a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_Init+0x40>)
 80016a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <HAL_Init+0x40>)
 80016b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f000 fd41 	bl	8002140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016be:	2000      	movs	r0, #0
 80016c0:	f000 f808 	bl	80016d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c4:	f7ff fdc6 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023c00 	.word	0x40023c00

080016d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_InitTick+0x54>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_InitTick+0x58>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fd59 	bl	80021aa <HAL_SYSTICK_Config>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e00e      	b.n	8001720 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b0f      	cmp	r3, #15
 8001706:	d80a      	bhi.n	800171e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001708:	2200      	movs	r2, #0
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f000 fd21 	bl	8002156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001714:	4a06      	ldr	r2, [pc, #24]	; (8001730 <HAL_InitTick+0x5c>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	e000      	b.n	8001720 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000000 	.word	0x20000000
 800172c:	20000008 	.word	0x20000008
 8001730:	20000004 	.word	0x20000004

08001734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x20>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_IncTick+0x24>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <HAL_IncTick+0x24>)
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008
 8001758:	2000019c 	.word	0x2000019c

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	2000019c 	.word	0x2000019c

08001774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff ffee 	bl	800175c <HAL_GetTick>
 8001780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178c:	d005      	beq.n	800179a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_Delay+0x44>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800179a:	bf00      	nop
 800179c:	f7ff ffde 	bl	800175c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d8f7      	bhi.n	800179c <HAL_Delay+0x28>
  {
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000008 	.word	0x20000008

080017bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e033      	b.n	800183a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff fd62 	bl	80012a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d118      	bne.n	800182c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001802:	f023 0302 	bic.w	r3, r3, #2
 8001806:	f043 0202 	orr.w	r2, r3, #2
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 fa48 	bl	8001ca4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f023 0303 	bic.w	r3, r3, #3
 8001822:	f043 0201 	orr.w	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	641a      	str	r2, [r3, #64]	; 0x40
 800182a:	e001      	b.n	8001830 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001838:	7bfb      	ldrb	r3, [r7, #15]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_ADC_Start_DMA+0x1e>
 800185e:	2302      	movs	r3, #2
 8001860:	e0ce      	b.n	8001a00 <HAL_ADC_Start_DMA+0x1bc>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b01      	cmp	r3, #1
 8001876:	d018      	beq.n	80018aa <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0201 	orr.w	r2, r2, #1
 8001886:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001888:	4b5f      	ldr	r3, [pc, #380]	; (8001a08 <HAL_ADC_Start_DMA+0x1c4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a5f      	ldr	r2, [pc, #380]	; (8001a0c <HAL_ADC_Start_DMA+0x1c8>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	0c9a      	lsrs	r2, r3, #18
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800189c:	e002      	b.n	80018a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f9      	bne.n	800189e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018b8:	d107      	bne.n	80018ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018c8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	f040 8086 	bne.w	80019e6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d007      	beq.n	800190c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001904:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001918:	d106      	bne.n	8001928 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	f023 0206 	bic.w	r2, r3, #6
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	645a      	str	r2, [r3, #68]	; 0x44
 8001926:	e002      	b.n	800192e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001936:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <HAL_ADC_Start_DMA+0x1cc>)
 8001938:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193e:	4a35      	ldr	r2, [pc, #212]	; (8001a14 <HAL_ADC_Start_DMA+0x1d0>)
 8001940:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001946:	4a34      	ldr	r2, [pc, #208]	; (8001a18 <HAL_ADC_Start_DMA+0x1d4>)
 8001948:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194e:	4a33      	ldr	r2, [pc, #204]	; (8001a1c <HAL_ADC_Start_DMA+0x1d8>)
 8001950:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800195a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800196a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800197a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	334c      	adds	r3, #76	; 0x4c
 8001986:	4619      	mov	r1, r3
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f000 fcc8 	bl	8002320 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10f      	bne.n	80019bc <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d129      	bne.n	80019fe <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	e020      	b.n	80019fe <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a17      	ldr	r2, [pc, #92]	; (8001a20 <HAL_ADC_Start_DMA+0x1dc>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d11b      	bne.n	80019fe <HAL_ADC_Start_DMA+0x1ba>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d114      	bne.n	80019fe <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	e00b      	b.n	80019fe <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f043 0210 	orr.w	r2, r3, #16
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f043 0201 	orr.w	r2, r3, #1
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	431bde83 	.word	0x431bde83
 8001a10:	40012300 	.word	0x40012300
 8001a14:	08001e9d 	.word	0x08001e9d
 8001a18:	08001f57 	.word	0x08001f57
 8001a1c:	08001f73 	.word	0x08001f73
 8001a20:	40012000 	.word	0x40012000

08001a24 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x1c>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e105      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x228>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b09      	cmp	r3, #9
 8001a8a:	d925      	bls.n	8001ad8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68d9      	ldr	r1, [r3, #12]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3b1e      	subs	r3, #30
 8001aa2:	2207      	movs	r2, #7
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43da      	mvns	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	400a      	ands	r2, r1
 8001ab0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68d9      	ldr	r1, [r3, #12]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4403      	add	r3, r0
 8001aca:	3b1e      	subs	r3, #30
 8001acc:	409a      	lsls	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	e022      	b.n	8001b1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6919      	ldr	r1, [r3, #16]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	2207      	movs	r2, #7
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	400a      	ands	r2, r1
 8001afa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6919      	ldr	r1, [r3, #16]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	4603      	mov	r3, r0
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4403      	add	r3, r0
 8001b14:	409a      	lsls	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d824      	bhi.n	8001b70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	3b05      	subs	r3, #5
 8001b38:	221f      	movs	r2, #31
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	400a      	ands	r2, r1
 8001b46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	4618      	mov	r0, r3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	3b05      	subs	r3, #5
 8001b62:	fa00 f203 	lsl.w	r2, r0, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b6e:	e04c      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b0c      	cmp	r3, #12
 8001b76:	d824      	bhi.n	8001bc2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	3b23      	subs	r3, #35	; 0x23
 8001b8a:	221f      	movs	r2, #31
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43da      	mvns	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	400a      	ands	r2, r1
 8001b98:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3b23      	subs	r3, #35	; 0x23
 8001bb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc0:	e023      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3b41      	subs	r3, #65	; 0x41
 8001bd4:	221f      	movs	r2, #31
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	400a      	ands	r2, r1
 8001be2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3b41      	subs	r3, #65	; 0x41
 8001bfe:	fa00 f203 	lsl.w	r2, r0, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c0a:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <HAL_ADC_ConfigChannel+0x234>)
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <HAL_ADC_ConfigChannel+0x238>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d109      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x1cc>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b12      	cmp	r3, #18
 8001c1e:	d105      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_ADC_ConfigChannel+0x238>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d123      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x21e>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b10      	cmp	r3, #16
 8001c3c:	d003      	beq.n	8001c46 <HAL_ADC_ConfigChannel+0x1e6>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b11      	cmp	r3, #17
 8001c44:	d11b      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b10      	cmp	r3, #16
 8001c58:	d111      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <HAL_ADC_ConfigChannel+0x23c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_ADC_ConfigChannel+0x240>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	0c9a      	lsrs	r2, r3, #18
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c70:	e002      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	3b01      	subs	r3, #1
 8001c76:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f9      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	40012300 	.word	0x40012300
 8001c98:	40012000 	.word	0x40012000
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	431bde83 	.word	0x431bde83

08001ca4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cac:	4b79      	ldr	r3, [pc, #484]	; (8001e94 <ADC_Init+0x1f0>)
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	021a      	lsls	r2, r3, #8
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6859      	ldr	r1, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6899      	ldr	r1, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	4a58      	ldr	r2, [pc, #352]	; (8001e98 <ADC_Init+0x1f4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d022      	beq.n	8001d82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6899      	ldr	r1, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6899      	ldr	r1, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	e00f      	b.n	8001da2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001da0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0202 	bic.w	r2, r2, #2
 8001db0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6899      	ldr	r1, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7e1b      	ldrb	r3, [r3, #24]
 8001dbc:	005a      	lsls	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d01b      	beq.n	8001e08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dde:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6859      	ldr	r1, [r3, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	035a      	lsls	r2, r3, #13
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	e007      	b.n	8001e18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e16:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	051a      	lsls	r2, r3, #20
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6899      	ldr	r1, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e5a:	025a      	lsls	r2, r3, #9
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6899      	ldr	r1, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	029a      	lsls	r2, r3, #10
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	609a      	str	r2, [r3, #8]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	40012300 	.word	0x40012300
 8001e98:	0f000001 	.word	0x0f000001

08001e9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d13c      	bne.n	8001f30 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d12b      	bne.n	8001f28 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d127      	bne.n	8001f28 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d006      	beq.n	8001ef4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d119      	bne.n	8001f28 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0220 	bic.w	r2, r2, #32
 8001f02:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d105      	bne.n	8001f28 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f7ff fd7b 	bl	8001a24 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f2e:	e00e      	b.n	8001f4e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f7ff fd85 	bl	8001a4c <HAL_ADC_ErrorCallback>
}
 8001f42:	e004      	b.n	8001f4e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	4798      	blx	r3
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f62:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7ff fd67 	bl	8001a38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2240      	movs	r2, #64	; 0x40
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f043 0204 	orr.w	r2, r3, #4
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7ff fd5a 	bl	8001a4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <__NVIC_GetPriorityGrouping+0x18>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0307 	and.w	r3, r3, #7
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	db0b      	blt.n	800202e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4907      	ldr	r1, [pc, #28]	; (800203c <__NVIC_EnableIRQ+0x38>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2001      	movs	r0, #1
 8002026:	fa00 f202 	lsl.w	r2, r0, r2
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000e100 	.word	0xe000e100

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db0a      	blt.n	800206a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	490c      	ldr	r1, [pc, #48]	; (800208c <__NVIC_SetPriority+0x4c>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	440b      	add	r3, r1
 8002064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002068:	e00a      	b.n	8002080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4908      	ldr	r1, [pc, #32]	; (8002090 <__NVIC_SetPriority+0x50>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	3b04      	subs	r3, #4
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	440b      	add	r3, r1
 800207e:	761a      	strb	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f1c3 0307 	rsb	r3, r3, #7
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	bf28      	it	cs
 80020b2:	2304      	movcs	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d902      	bls.n	80020c4 <NVIC_EncodePriority+0x30>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3b03      	subs	r3, #3
 80020c2:	e000      	b.n	80020c6 <NVIC_EncodePriority+0x32>
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	401a      	ands	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	4313      	orrs	r3, r2
         );
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800210c:	d301      	bcc.n	8002112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210e:	2301      	movs	r3, #1
 8002110:	e00f      	b.n	8002132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <SysTick_Config+0x40>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211a:	210f      	movs	r1, #15
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	f7ff ff8e 	bl	8002040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <SysTick_Config+0x40>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212a:	4b04      	ldr	r3, [pc, #16]	; (800213c <SysTick_Config+0x40>)
 800212c:	2207      	movs	r2, #7
 800212e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	e000e010 	.word	0xe000e010

08002140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ff29 	bl	8001fa0 <__NVIC_SetPriorityGrouping>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002168:	f7ff ff3e 	bl	8001fe8 <__NVIC_GetPriorityGrouping>
 800216c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	6978      	ldr	r0, [r7, #20]
 8002174:	f7ff ff8e 	bl	8002094 <NVIC_EncodePriority>
 8002178:	4602      	mov	r2, r0
 800217a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff5d 	bl	8002040 <__NVIC_SetPriority>
}
 8002186:	bf00      	nop
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff31 	bl	8002004 <__NVIC_EnableIRQ>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ffa2 	bl	80020fc <SysTick_Config>
 80021b8:	4603      	mov	r3, r0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021d0:	f7ff fac4 	bl	800175c <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e099      	b.n	8002314 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002200:	e00f      	b.n	8002222 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002202:	f7ff faab 	bl	800175c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b05      	cmp	r3, #5
 800220e:	d908      	bls.n	8002222 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2220      	movs	r2, #32
 8002214:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2203      	movs	r2, #3
 800221a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e078      	b.n	8002314 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1e8      	bne.n	8002202 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4b38      	ldr	r3, [pc, #224]	; (800231c <HAL_DMA_Init+0x158>)
 800223c:	4013      	ands	r3, r2
 800223e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800224e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800225a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002266:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4313      	orrs	r3, r2
 8002272:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	2b04      	cmp	r3, #4
 800227a:	d107      	bne.n	800228c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	4313      	orrs	r3, r2
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f023 0307 	bic.w	r3, r3, #7
 80022a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d117      	bne.n	80022e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4313      	orrs	r3, r2
 80022be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00e      	beq.n	80022e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fa6f 	bl	80027ac <DMA_CheckFifoParam>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2240      	movs	r2, #64	; 0x40
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022e2:	2301      	movs	r3, #1
 80022e4:	e016      	b.n	8002314 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 fa26 	bl	8002740 <DMA_CalcBaseAndBitshift>
 80022f4:	4603      	mov	r3, r0
 80022f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	223f      	movs	r2, #63	; 0x3f
 80022fe:	409a      	lsls	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	f010803f 	.word	0xf010803f

08002320 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_DMA_Start_IT+0x26>
 8002342:	2302      	movs	r3, #2
 8002344:	e040      	b.n	80023c8 <HAL_DMA_Start_IT+0xa8>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d12f      	bne.n	80023ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2202      	movs	r2, #2
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f9b8 	bl	80026e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002378:	223f      	movs	r2, #63	; 0x3f
 800237a:	409a      	lsls	r2, r3
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0216 	orr.w	r2, r2, #22
 800238e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0208 	orr.w	r2, r2, #8
 80023a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e005      	b.n	80023c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023c2:	2302      	movs	r3, #2
 80023c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023dc:	4b8e      	ldr	r3, [pc, #568]	; (8002618 <HAL_DMA_IRQHandler+0x248>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a8e      	ldr	r2, [pc, #568]	; (800261c <HAL_DMA_IRQHandler+0x24c>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	0a9b      	lsrs	r3, r3, #10
 80023e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	2208      	movs	r2, #8
 80023fc:	409a      	lsls	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d01a      	beq.n	800243c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0204 	bic.w	r2, r2, #4
 8002422:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	2208      	movs	r2, #8
 800242a:	409a      	lsls	r2, r3
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	2201      	movs	r2, #1
 8002442:	409a      	lsls	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d012      	beq.n	8002472 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245e:	2201      	movs	r2, #1
 8002460:	409a      	lsls	r2, r3
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	f043 0202 	orr.w	r2, r3, #2
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002476:	2204      	movs	r2, #4
 8002478:	409a      	lsls	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d012      	beq.n	80024a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00b      	beq.n	80024a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002494:	2204      	movs	r2, #4
 8002496:	409a      	lsls	r2, r3
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a0:	f043 0204 	orr.w	r2, r3, #4
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ac:	2210      	movs	r2, #16
 80024ae:	409a      	lsls	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d043      	beq.n	8002540 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d03c      	beq.n	8002540 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ca:	2210      	movs	r2, #16
 80024cc:	409a      	lsls	r2, r3
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d018      	beq.n	8002512 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d108      	bne.n	8002500 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d024      	beq.n	8002540 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	4798      	blx	r3
 80024fe:	e01f      	b.n	8002540 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01b      	beq.n	8002540 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	4798      	blx	r3
 8002510:	e016      	b.n	8002540 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d107      	bne.n	8002530 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0208 	bic.w	r2, r2, #8
 800252e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002544:	2220      	movs	r2, #32
 8002546:	409a      	lsls	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 808f 	beq.w	8002670 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 8087 	beq.w	8002670 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002566:	2220      	movs	r2, #32
 8002568:	409a      	lsls	r2, r3
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b05      	cmp	r3, #5
 8002578:	d136      	bne.n	80025e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0216 	bic.w	r2, r2, #22
 8002588:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695a      	ldr	r2, [r3, #20]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002598:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d103      	bne.n	80025aa <HAL_DMA_IRQHandler+0x1da>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d007      	beq.n	80025ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0208 	bic.w	r2, r2, #8
 80025b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025be:	223f      	movs	r2, #63	; 0x3f
 80025c0:	409a      	lsls	r2, r3
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d07e      	beq.n	80026dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	4798      	blx	r3
        }
        return;
 80025e6:	e079      	b.n	80026dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d01d      	beq.n	8002632 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10d      	bne.n	8002620 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002608:	2b00      	cmp	r3, #0
 800260a:	d031      	beq.n	8002670 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
 8002614:	e02c      	b.n	8002670 <HAL_DMA_IRQHandler+0x2a0>
 8002616:	bf00      	nop
 8002618:	20000000 	.word	0x20000000
 800261c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002624:	2b00      	cmp	r3, #0
 8002626:	d023      	beq.n	8002670 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	4798      	blx	r3
 8002630:	e01e      	b.n	8002670 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10f      	bne.n	8002660 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0210 	bic.w	r2, r2, #16
 800264e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002674:	2b00      	cmp	r3, #0
 8002676:	d032      	beq.n	80026de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d022      	beq.n	80026ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2205      	movs	r2, #5
 8002688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0201 	bic.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	3301      	adds	r3, #1
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d307      	bcc.n	80026b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f2      	bne.n	800269c <HAL_DMA_IRQHandler+0x2cc>
 80026b6:	e000      	b.n	80026ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	4798      	blx	r3
 80026da:	e000      	b.n	80026de <HAL_DMA_IRQHandler+0x30e>
        return;
 80026dc:	bf00      	nop
    }
  }
}
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002700:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d108      	bne.n	8002724 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002722:	e007      	b.n	8002734 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	60da      	str	r2, [r3, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	3b10      	subs	r3, #16
 8002750:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <DMA_CalcBaseAndBitshift+0x64>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800275a:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <DMA_CalcBaseAndBitshift+0x68>)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4413      	add	r3, r2
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b03      	cmp	r3, #3
 800276c:	d909      	bls.n	8002782 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002776:	f023 0303 	bic.w	r3, r3, #3
 800277a:	1d1a      	adds	r2, r3, #4
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	659a      	str	r2, [r3, #88]	; 0x58
 8002780:	e007      	b.n	8002792 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800278a:	f023 0303 	bic.w	r3, r3, #3
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002796:	4618      	mov	r0, r3
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	aaaaaaab 	.word	0xaaaaaaab
 80027a8:	0800521c 	.word	0x0800521c

080027ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d11f      	bne.n	8002806 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d856      	bhi.n	800287a <DMA_CheckFifoParam+0xce>
 80027cc:	a201      	add	r2, pc, #4	; (adr r2, 80027d4 <DMA_CheckFifoParam+0x28>)
 80027ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d2:	bf00      	nop
 80027d4:	080027e5 	.word	0x080027e5
 80027d8:	080027f7 	.word	0x080027f7
 80027dc:	080027e5 	.word	0x080027e5
 80027e0:	0800287b 	.word	0x0800287b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d046      	beq.n	800287e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f4:	e043      	b.n	800287e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027fe:	d140      	bne.n	8002882 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002804:	e03d      	b.n	8002882 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800280e:	d121      	bne.n	8002854 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d837      	bhi.n	8002886 <DMA_CheckFifoParam+0xda>
 8002816:	a201      	add	r2, pc, #4	; (adr r2, 800281c <DMA_CheckFifoParam+0x70>)
 8002818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281c:	0800282d 	.word	0x0800282d
 8002820:	08002833 	.word	0x08002833
 8002824:	0800282d 	.word	0x0800282d
 8002828:	08002845 	.word	0x08002845
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
      break;
 8002830:	e030      	b.n	8002894 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d025      	beq.n	800288a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002842:	e022      	b.n	800288a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800284c:	d11f      	bne.n	800288e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002852:	e01c      	b.n	800288e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d903      	bls.n	8002862 <DMA_CheckFifoParam+0xb6>
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b03      	cmp	r3, #3
 800285e:	d003      	beq.n	8002868 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002860:	e018      	b.n	8002894 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
      break;
 8002866:	e015      	b.n	8002894 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00e      	beq.n	8002892 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
      break;
 8002878:	e00b      	b.n	8002892 <DMA_CheckFifoParam+0xe6>
      break;
 800287a:	bf00      	nop
 800287c:	e00a      	b.n	8002894 <DMA_CheckFifoParam+0xe8>
      break;
 800287e:	bf00      	nop
 8002880:	e008      	b.n	8002894 <DMA_CheckFifoParam+0xe8>
      break;
 8002882:	bf00      	nop
 8002884:	e006      	b.n	8002894 <DMA_CheckFifoParam+0xe8>
      break;
 8002886:	bf00      	nop
 8002888:	e004      	b.n	8002894 <DMA_CheckFifoParam+0xe8>
      break;
 800288a:	bf00      	nop
 800288c:	e002      	b.n	8002894 <DMA_CheckFifoParam+0xe8>
      break;   
 800288e:	bf00      	nop
 8002890:	e000      	b.n	8002894 <DMA_CheckFifoParam+0xe8>
      break;
 8002892:	bf00      	nop
    }
  } 
  
  return status; 
 8002894:	7bfb      	ldrb	r3, [r7, #15]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop

080028a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b089      	sub	sp, #36	; 0x24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	e159      	b.n	8002b74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028c0:	2201      	movs	r2, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	429a      	cmp	r2, r3
 80028da:	f040 8148 	bne.w	8002b6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d005      	beq.n	80028f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d130      	bne.n	8002958 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	2203      	movs	r2, #3
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800292c:	2201      	movs	r2, #1
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	091b      	lsrs	r3, r3, #4
 8002942:	f003 0201 	and.w	r2, r3, #1
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	2b03      	cmp	r3, #3
 8002962:	d017      	beq.n	8002994 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2203      	movs	r2, #3
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d123      	bne.n	80029e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	08da      	lsrs	r2, r3, #3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3208      	adds	r2, #8
 80029a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	220f      	movs	r2, #15
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	08da      	lsrs	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3208      	adds	r2, #8
 80029e2:	69b9      	ldr	r1, [r7, #24]
 80029e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	2203      	movs	r2, #3
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0203 	and.w	r2, r3, #3
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80a2 	beq.w	8002b6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	4b57      	ldr	r3, [pc, #348]	; (8002b8c <HAL_GPIO_Init+0x2e8>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	4a56      	ldr	r2, [pc, #344]	; (8002b8c <HAL_GPIO_Init+0x2e8>)
 8002a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a38:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3a:	4b54      	ldr	r3, [pc, #336]	; (8002b8c <HAL_GPIO_Init+0x2e8>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a46:	4a52      	ldr	r2, [pc, #328]	; (8002b90 <HAL_GPIO_Init+0x2ec>)
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	089b      	lsrs	r3, r3, #2
 8002a4c:	3302      	adds	r3, #2
 8002a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	220f      	movs	r2, #15
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a49      	ldr	r2, [pc, #292]	; (8002b94 <HAL_GPIO_Init+0x2f0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d019      	beq.n	8002aa6 <HAL_GPIO_Init+0x202>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a48      	ldr	r2, [pc, #288]	; (8002b98 <HAL_GPIO_Init+0x2f4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d013      	beq.n	8002aa2 <HAL_GPIO_Init+0x1fe>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a47      	ldr	r2, [pc, #284]	; (8002b9c <HAL_GPIO_Init+0x2f8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00d      	beq.n	8002a9e <HAL_GPIO_Init+0x1fa>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a46      	ldr	r2, [pc, #280]	; (8002ba0 <HAL_GPIO_Init+0x2fc>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d007      	beq.n	8002a9a <HAL_GPIO_Init+0x1f6>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a45      	ldr	r2, [pc, #276]	; (8002ba4 <HAL_GPIO_Init+0x300>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d101      	bne.n	8002a96 <HAL_GPIO_Init+0x1f2>
 8002a92:	2304      	movs	r3, #4
 8002a94:	e008      	b.n	8002aa8 <HAL_GPIO_Init+0x204>
 8002a96:	2307      	movs	r3, #7
 8002a98:	e006      	b.n	8002aa8 <HAL_GPIO_Init+0x204>
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e004      	b.n	8002aa8 <HAL_GPIO_Init+0x204>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e002      	b.n	8002aa8 <HAL_GPIO_Init+0x204>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_GPIO_Init+0x204>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	f002 0203 	and.w	r2, r2, #3
 8002aae:	0092      	lsls	r2, r2, #2
 8002ab0:	4093      	lsls	r3, r2
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab8:	4935      	ldr	r1, [pc, #212]	; (8002b90 <HAL_GPIO_Init+0x2ec>)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	089b      	lsrs	r3, r3, #2
 8002abe:	3302      	adds	r3, #2
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ac6:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <HAL_GPIO_Init+0x304>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aea:	4a2f      	ldr	r2, [pc, #188]	; (8002ba8 <HAL_GPIO_Init+0x304>)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af0:	4b2d      	ldr	r3, [pc, #180]	; (8002ba8 <HAL_GPIO_Init+0x304>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b14:	4a24      	ldr	r2, [pc, #144]	; (8002ba8 <HAL_GPIO_Init+0x304>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b1a:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <HAL_GPIO_Init+0x304>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ba8 <HAL_GPIO_Init+0x304>)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b44:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <HAL_GPIO_Init+0x304>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b68:	4a0f      	ldr	r2, [pc, #60]	; (8002ba8 <HAL_GPIO_Init+0x304>)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3301      	adds	r3, #1
 8002b72:	61fb      	str	r3, [r7, #28]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	2b0f      	cmp	r3, #15
 8002b78:	f67f aea2 	bls.w	80028c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	3724      	adds	r7, #36	; 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40013800 	.word	0x40013800
 8002b94:	40020000 	.word	0x40020000
 8002b98:	40020400 	.word	0x40020400
 8002b9c:	40020800 	.word	0x40020800
 8002ba0:	40020c00 	.word	0x40020c00
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40013c00 	.word	0x40013c00

08002bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	807b      	strh	r3, [r7, #2]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bbc:	787b      	ldrb	r3, [r7, #1]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bc2:	887a      	ldrh	r2, [r7, #2]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bc8:	e003      	b.n	8002bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bca:	887b      	ldrh	r3, [r7, #2]
 8002bcc:	041a      	lsls	r2, r3, #16
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	619a      	str	r2, [r3, #24]
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e267      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d075      	beq.n	8002cea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bfe:	4b88      	ldr	r3, [pc, #544]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d00c      	beq.n	8002c24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0a:	4b85      	ldr	r3, [pc, #532]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d112      	bne.n	8002c3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c16:	4b82      	ldr	r3, [pc, #520]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c22:	d10b      	bne.n	8002c3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	4b7e      	ldr	r3, [pc, #504]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d05b      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x108>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d157      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e242      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c44:	d106      	bne.n	8002c54 <HAL_RCC_OscConfig+0x74>
 8002c46:	4b76      	ldr	r3, [pc, #472]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a75      	ldr	r2, [pc, #468]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e01d      	b.n	8002c90 <HAL_RCC_OscConfig+0xb0>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x98>
 8002c5e:	4b70      	ldr	r3, [pc, #448]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a6f      	ldr	r2, [pc, #444]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b6d      	ldr	r3, [pc, #436]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6c      	ldr	r2, [pc, #432]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0xb0>
 8002c78:	4b69      	ldr	r3, [pc, #420]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a68      	ldr	r2, [pc, #416]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b66      	ldr	r3, [pc, #408]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a65      	ldr	r2, [pc, #404]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fe fd60 	bl	800175c <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7fe fd5c 	bl	800175c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	; 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e207      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	4b5b      	ldr	r3, [pc, #364]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0xc0>
 8002cbe:	e014      	b.n	8002cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fd4c 	bl	800175c <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fe fd48 	bl	800175c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e1f3      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	4b51      	ldr	r3, [pc, #324]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0xe8>
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d063      	beq.n	8002dbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cf6:	4b4a      	ldr	r3, [pc, #296]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d02:	4b47      	ldr	r3, [pc, #284]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d11c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0e:	4b44      	ldr	r3, [pc, #272]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d116      	bne.n	8002d48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	4b41      	ldr	r3, [pc, #260]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_RCC_OscConfig+0x152>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e1c7      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	4b3b      	ldr	r3, [pc, #236]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4937      	ldr	r1, [pc, #220]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	e03a      	b.n	8002dbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d020      	beq.n	8002d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d50:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7fe fd01 	bl	800175c <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5e:	f7fe fcfd 	bl	800175c <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e1a8      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d70:	4b2b      	ldr	r3, [pc, #172]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7c:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4925      	ldr	r1, [pc, #148]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]
 8002d90:	e015      	b.n	8002dbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe fce0 	bl	800175c <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da0:	f7fe fcdc 	bl	800175c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e187      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db2:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d036      	beq.n	8002e38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d016      	beq.n	8002e00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <HAL_RCC_OscConfig+0x248>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd8:	f7fe fcc0 	bl	800175c <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de0:	f7fe fcbc 	bl	800175c <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e167      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x200>
 8002dfe:	e01b      	b.n	8002e38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_RCC_OscConfig+0x248>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e06:	f7fe fca9 	bl	800175c <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0c:	e00e      	b.n	8002e2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0e:	f7fe fca5 	bl	800175c <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d907      	bls.n	8002e2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e150      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
 8002e20:	40023800 	.word	0x40023800
 8002e24:	42470000 	.word	0x42470000
 8002e28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2c:	4b88      	ldr	r3, [pc, #544]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ea      	bne.n	8002e0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 8097 	beq.w	8002f74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4a:	4b81      	ldr	r3, [pc, #516]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10f      	bne.n	8002e76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	4b7d      	ldr	r3, [pc, #500]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	4a7c      	ldr	r2, [pc, #496]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e64:	6413      	str	r3, [r2, #64]	; 0x40
 8002e66:	4b7a      	ldr	r3, [pc, #488]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e72:	2301      	movs	r3, #1
 8002e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e76:	4b77      	ldr	r3, [pc, #476]	; (8003054 <HAL_RCC_OscConfig+0x474>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d118      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e82:	4b74      	ldr	r3, [pc, #464]	; (8003054 <HAL_RCC_OscConfig+0x474>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a73      	ldr	r2, [pc, #460]	; (8003054 <HAL_RCC_OscConfig+0x474>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8e:	f7fe fc65 	bl	800175c <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e96:	f7fe fc61 	bl	800175c <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e10c      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea8:	4b6a      	ldr	r3, [pc, #424]	; (8003054 <HAL_RCC_OscConfig+0x474>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x2ea>
 8002ebc:	4b64      	ldr	r3, [pc, #400]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	4a63      	ldr	r2, [pc, #396]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec8:	e01c      	b.n	8002f04 <HAL_RCC_OscConfig+0x324>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x30c>
 8002ed2:	4b5f      	ldr	r3, [pc, #380]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a5e      	ldr	r2, [pc, #376]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ede:	4b5c      	ldr	r3, [pc, #368]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	4a5b      	ldr	r2, [pc, #364]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eea:	e00b      	b.n	8002f04 <HAL_RCC_OscConfig+0x324>
 8002eec:	4b58      	ldr	r3, [pc, #352]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a57      	ldr	r2, [pc, #348]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef8:	4b55      	ldr	r3, [pc, #340]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	4a54      	ldr	r2, [pc, #336]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002efe:	f023 0304 	bic.w	r3, r3, #4
 8002f02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d015      	beq.n	8002f38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fe fc26 	bl	800175c <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fe fc22 	bl	800175c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e0cb      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2a:	4b49      	ldr	r3, [pc, #292]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0ee      	beq.n	8002f14 <HAL_RCC_OscConfig+0x334>
 8002f36:	e014      	b.n	8002f62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f38:	f7fe fc10 	bl	800175c <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f40:	f7fe fc0c 	bl	800175c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e0b5      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f56:	4b3e      	ldr	r3, [pc, #248]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1ee      	bne.n	8002f40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d105      	bne.n	8002f74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f68:	4b39      	ldr	r3, [pc, #228]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	4a38      	ldr	r2, [pc, #224]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a1 	beq.w	80030c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f7e:	4b34      	ldr	r3, [pc, #208]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d05c      	beq.n	8003044 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d141      	bne.n	8003016 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	4b31      	ldr	r3, [pc, #196]	; (8003058 <HAL_RCC_OscConfig+0x478>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fe fbe0 	bl	800175c <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe fbdc 	bl	800175c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e087      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	4b27      	ldr	r3, [pc, #156]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	019b      	lsls	r3, r3, #6
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	041b      	lsls	r3, r3, #16
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	491b      	ldr	r1, [pc, #108]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <HAL_RCC_OscConfig+0x478>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7fe fbb5 	bl	800175c <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7fe fbb1 	bl	800175c <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e05c      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x416>
 8003014:	e054      	b.n	80030c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <HAL_RCC_OscConfig+0x478>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fe fb9e 	bl	800175c <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe fb9a 	bl	800175c <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e045      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x444>
 8003042:	e03d      	b.n	80030c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d107      	bne.n	800305c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e038      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
 8003050:	40023800 	.word	0x40023800
 8003054:	40007000 	.word	0x40007000
 8003058:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800305c:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <HAL_RCC_OscConfig+0x4ec>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d028      	beq.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d121      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d11a      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800308c:	4013      	ands	r3, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003092:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003094:	4293      	cmp	r3, r2
 8003096:	d111      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	085b      	lsrs	r3, r3, #1
 80030a4:	3b01      	subs	r3, #1
 80030a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800

080030d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0cc      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e4:	4b68      	ldr	r3, [pc, #416]	; (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d90c      	bls.n	800310c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b65      	ldr	r3, [pc, #404]	; (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b63      	ldr	r3, [pc, #396]	; (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0b8      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d020      	beq.n	800315a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003124:	4b59      	ldr	r3, [pc, #356]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a58      	ldr	r2, [pc, #352]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800312e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800313c:	4b53      	ldr	r3, [pc, #332]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4a52      	ldr	r2, [pc, #328]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003148:	4b50      	ldr	r3, [pc, #320]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	494d      	ldr	r1, [pc, #308]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d044      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b47      	ldr	r3, [pc, #284]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d119      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e07f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d003      	beq.n	800318e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800318a:	2b03      	cmp	r3, #3
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318e:	4b3f      	ldr	r3, [pc, #252]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e06f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319e:	4b3b      	ldr	r3, [pc, #236]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e067      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ae:	4b37      	ldr	r3, [pc, #220]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f023 0203 	bic.w	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4934      	ldr	r1, [pc, #208]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c0:	f7fe facc 	bl	800175c <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	e00a      	b.n	80031de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c8:	f7fe fac8 	bl	800175c <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e04f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	4b2b      	ldr	r3, [pc, #172]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 020c 	and.w	r2, r3, #12
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d1eb      	bne.n	80031c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f0:	4b25      	ldr	r3, [pc, #148]	; (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d20c      	bcs.n	8003218 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b22      	ldr	r3, [pc, #136]	; (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b20      	ldr	r3, [pc, #128]	; (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e032      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003224:	4b19      	ldr	r3, [pc, #100]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4916      	ldr	r1, [pc, #88]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003242:	4b12      	ldr	r3, [pc, #72]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	490e      	ldr	r1, [pc, #56]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003256:	f000 f821 	bl	800329c <HAL_RCC_GetSysClockFreq>
 800325a:	4602      	mov	r2, r0
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	490a      	ldr	r1, [pc, #40]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003268:	5ccb      	ldrb	r3, [r1, r3]
 800326a:	fa22 f303 	lsr.w	r3, r2, r3
 800326e:	4a09      	ldr	r2, [pc, #36]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003272:	4b09      	ldr	r3, [pc, #36]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe fa2c 	bl	80016d4 <HAL_InitTick>

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40023c00 	.word	0x40023c00
 800328c:	40023800 	.word	0x40023800
 8003290:	08005204 	.word	0x08005204
 8003294:	20000000 	.word	0x20000000
 8003298:	20000004 	.word	0x20000004

0800329c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800329c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a0:	b094      	sub	sp, #80	; 0x50
 80032a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b4:	4b79      	ldr	r3, [pc, #484]	; (800349c <HAL_RCC_GetSysClockFreq+0x200>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d00d      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x40>
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	f200 80e1 	bhi.w	8003488 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0x34>
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d003      	beq.n	80032d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ce:	e0db      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032d0:	4b73      	ldr	r3, [pc, #460]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80032d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032d4:	e0db      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032d6:	4b73      	ldr	r3, [pc, #460]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80032d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032da:	e0d8      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032dc:	4b6f      	ldr	r3, [pc, #444]	; (800349c <HAL_RCC_GetSysClockFreq+0x200>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032e6:	4b6d      	ldr	r3, [pc, #436]	; (800349c <HAL_RCC_GetSysClockFreq+0x200>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d063      	beq.n	80033ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f2:	4b6a      	ldr	r3, [pc, #424]	; (800349c <HAL_RCC_GetSysClockFreq+0x200>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	099b      	lsrs	r3, r3, #6
 80032f8:	2200      	movs	r2, #0
 80032fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80032fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003304:	633b      	str	r3, [r7, #48]	; 0x30
 8003306:	2300      	movs	r3, #0
 8003308:	637b      	str	r3, [r7, #52]	; 0x34
 800330a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800330e:	4622      	mov	r2, r4
 8003310:	462b      	mov	r3, r5
 8003312:	f04f 0000 	mov.w	r0, #0
 8003316:	f04f 0100 	mov.w	r1, #0
 800331a:	0159      	lsls	r1, r3, #5
 800331c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003320:	0150      	lsls	r0, r2, #5
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4621      	mov	r1, r4
 8003328:	1a51      	subs	r1, r2, r1
 800332a:	6139      	str	r1, [r7, #16]
 800332c:	4629      	mov	r1, r5
 800332e:	eb63 0301 	sbc.w	r3, r3, r1
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003340:	4659      	mov	r1, fp
 8003342:	018b      	lsls	r3, r1, #6
 8003344:	4651      	mov	r1, sl
 8003346:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800334a:	4651      	mov	r1, sl
 800334c:	018a      	lsls	r2, r1, #6
 800334e:	4651      	mov	r1, sl
 8003350:	ebb2 0801 	subs.w	r8, r2, r1
 8003354:	4659      	mov	r1, fp
 8003356:	eb63 0901 	sbc.w	r9, r3, r1
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800336a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800336e:	4690      	mov	r8, r2
 8003370:	4699      	mov	r9, r3
 8003372:	4623      	mov	r3, r4
 8003374:	eb18 0303 	adds.w	r3, r8, r3
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	462b      	mov	r3, r5
 800337c:	eb49 0303 	adc.w	r3, r9, r3
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800338e:	4629      	mov	r1, r5
 8003390:	024b      	lsls	r3, r1, #9
 8003392:	4621      	mov	r1, r4
 8003394:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003398:	4621      	mov	r1, r4
 800339a:	024a      	lsls	r2, r1, #9
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a2:	2200      	movs	r2, #0
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033ac:	f7fc ff70 	bl	8000290 <__aeabi_uldivmod>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4613      	mov	r3, r2
 80033b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033b8:	e058      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ba:	4b38      	ldr	r3, [pc, #224]	; (800349c <HAL_RCC_GetSysClockFreq+0x200>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	099b      	lsrs	r3, r3, #6
 80033c0:	2200      	movs	r2, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	4611      	mov	r1, r2
 80033c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033ca:	623b      	str	r3, [r7, #32]
 80033cc:	2300      	movs	r3, #0
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
 80033d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033d4:	4642      	mov	r2, r8
 80033d6:	464b      	mov	r3, r9
 80033d8:	f04f 0000 	mov.w	r0, #0
 80033dc:	f04f 0100 	mov.w	r1, #0
 80033e0:	0159      	lsls	r1, r3, #5
 80033e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e6:	0150      	lsls	r0, r2, #5
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4641      	mov	r1, r8
 80033ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80033f2:	4649      	mov	r1, r9
 80033f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003404:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003408:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800340c:	ebb2 040a 	subs.w	r4, r2, sl
 8003410:	eb63 050b 	sbc.w	r5, r3, fp
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	00eb      	lsls	r3, r5, #3
 800341e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003422:	00e2      	lsls	r2, r4, #3
 8003424:	4614      	mov	r4, r2
 8003426:	461d      	mov	r5, r3
 8003428:	4643      	mov	r3, r8
 800342a:	18e3      	adds	r3, r4, r3
 800342c:	603b      	str	r3, [r7, #0]
 800342e:	464b      	mov	r3, r9
 8003430:	eb45 0303 	adc.w	r3, r5, r3
 8003434:	607b      	str	r3, [r7, #4]
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003442:	4629      	mov	r1, r5
 8003444:	028b      	lsls	r3, r1, #10
 8003446:	4621      	mov	r1, r4
 8003448:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800344c:	4621      	mov	r1, r4
 800344e:	028a      	lsls	r2, r1, #10
 8003450:	4610      	mov	r0, r2
 8003452:	4619      	mov	r1, r3
 8003454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003456:	2200      	movs	r2, #0
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	61fa      	str	r2, [r7, #28]
 800345c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003460:	f7fc ff16 	bl	8000290 <__aeabi_uldivmod>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4613      	mov	r3, r2
 800346a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_GetSysClockFreq+0x200>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	0c1b      	lsrs	r3, r3, #16
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	3301      	adds	r3, #1
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800347c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800347e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003480:	fbb2 f3f3 	udiv	r3, r2, r3
 8003484:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003486:	e002      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800348a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800348c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800348e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003490:	4618      	mov	r0, r3
 8003492:	3750      	adds	r7, #80	; 0x50
 8003494:	46bd      	mov	sp, r7
 8003496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800349a:	bf00      	nop
 800349c:	40023800 	.word	0x40023800
 80034a0:	00f42400 	.word	0x00f42400
 80034a4:	007a1200 	.word	0x007a1200

080034a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <HAL_RCC_GetHCLKFreq+0x14>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	20000000 	.word	0x20000000

080034c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034c4:	f7ff fff0 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 80034c8:	4602      	mov	r2, r0
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	0a9b      	lsrs	r3, r3, #10
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	4903      	ldr	r1, [pc, #12]	; (80034e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034d6:	5ccb      	ldrb	r3, [r1, r3]
 80034d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034dc:	4618      	mov	r0, r3
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40023800 	.word	0x40023800
 80034e4:	08005214 	.word	0x08005214

080034e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034ec:	f7ff ffdc 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 80034f0:	4602      	mov	r2, r0
 80034f2:	4b05      	ldr	r3, [pc, #20]	; (8003508 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	0b5b      	lsrs	r3, r3, #13
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	4903      	ldr	r1, [pc, #12]	; (800350c <HAL_RCC_GetPCLK2Freq+0x24>)
 80034fe:	5ccb      	ldrb	r3, [r1, r3]
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003504:	4618      	mov	r0, r3
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40023800 	.word	0x40023800
 800350c:	08005214 	.word	0x08005214

08003510 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e042      	b.n	80035a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fd ff2c 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2224      	movs	r2, #36	; 0x24
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003552:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f973 	bl	8003840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003578:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003588:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	; 0x28
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	4613      	mov	r3, r2
 80035be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d175      	bne.n	80036bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_UART_Transmit+0x2c>
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e06e      	b.n	80036be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2221      	movs	r2, #33	; 0x21
 80035ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ee:	f7fe f8b5 	bl	800175c <HAL_GetTick>
 80035f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	88fa      	ldrh	r2, [r7, #6]
 80035f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	88fa      	ldrh	r2, [r7, #6]
 80035fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003608:	d108      	bne.n	800361c <HAL_UART_Transmit+0x6c>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d104      	bne.n	800361c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	61bb      	str	r3, [r7, #24]
 800361a:	e003      	b.n	8003624 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003620:	2300      	movs	r3, #0
 8003622:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003624:	e02e      	b.n	8003684 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2200      	movs	r2, #0
 800362e:	2180      	movs	r1, #128	; 0x80
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f848 	bl	80036c6 <UART_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e03a      	b.n	80036be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10b      	bne.n	8003666 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800365c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	3302      	adds	r3, #2
 8003662:	61bb      	str	r3, [r7, #24]
 8003664:	e007      	b.n	8003676 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	781a      	ldrb	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	3301      	adds	r3, #1
 8003674:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1cb      	bne.n	8003626 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2200      	movs	r2, #0
 8003696:	2140      	movs	r1, #64	; 0x40
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f814 	bl	80036c6 <UART_WaitOnFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e006      	b.n	80036be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	e000      	b.n	80036be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80036bc:	2302      	movs	r3, #2
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	4613      	mov	r3, r2
 80036d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d6:	e03b      	b.n	8003750 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036de:	d037      	beq.n	8003750 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e0:	f7fe f83c 	bl	800175c <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	6a3a      	ldr	r2, [r7, #32]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d302      	bcc.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e03a      	b.n	8003770 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d023      	beq.n	8003750 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b80      	cmp	r3, #128	; 0x80
 800370c:	d020      	beq.n	8003750 <UART_WaitOnFlagUntilTimeout+0x8a>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b40      	cmp	r3, #64	; 0x40
 8003712:	d01d      	beq.n	8003750 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b08      	cmp	r3, #8
 8003720:	d116      	bne.n	8003750 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f81d 	bl	8003778 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2208      	movs	r2, #8
 8003742:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e00f      	b.n	8003770 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4013      	ands	r3, r2
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	429a      	cmp	r2, r3
 800375e:	bf0c      	ite	eq
 8003760:	2301      	moveq	r3, #1
 8003762:	2300      	movne	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	429a      	cmp	r2, r3
 800376c:	d0b4      	beq.n	80036d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003778:	b480      	push	{r7}
 800377a:	b095      	sub	sp, #84	; 0x54
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	330c      	adds	r3, #12
 8003786:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378a:	e853 3f00 	ldrex	r3, [r3]
 800378e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	330c      	adds	r3, #12
 800379e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037a0:	643a      	str	r2, [r7, #64]	; 0x40
 80037a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037a8:	e841 2300 	strex	r3, r2, [r1]
 80037ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e5      	bne.n	8003780 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3314      	adds	r3, #20
 80037ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	e853 3f00 	ldrex	r3, [r3]
 80037c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3314      	adds	r3, #20
 80037d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037dc:	e841 2300 	strex	r3, r2, [r1]
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e5      	bne.n	80037b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d119      	bne.n	8003824 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	330c      	adds	r3, #12
 80037f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	e853 3f00 	ldrex	r3, [r3]
 80037fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f023 0310 	bic.w	r3, r3, #16
 8003806:	647b      	str	r3, [r7, #68]	; 0x44
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	330c      	adds	r3, #12
 800380e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003810:	61ba      	str	r2, [r7, #24]
 8003812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003814:	6979      	ldr	r1, [r7, #20]
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	e841 2300 	strex	r3, r2, [r1]
 800381c:	613b      	str	r3, [r7, #16]
   return(result);
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e5      	bne.n	80037f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003832:	bf00      	nop
 8003834:	3754      	adds	r7, #84	; 0x54
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003844:	b0c0      	sub	sp, #256	; 0x100
 8003846:	af00      	add	r7, sp, #0
 8003848:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385c:	68d9      	ldr	r1, [r3, #12]
 800385e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	ea40 0301 	orr.w	r3, r0, r1
 8003868:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800386a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	431a      	orrs	r2, r3
 8003878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	431a      	orrs	r2, r3
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003898:	f021 010c 	bic.w	r1, r1, #12
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038a6:	430b      	orrs	r3, r1
 80038a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ba:	6999      	ldr	r1, [r3, #24]
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	ea40 0301 	orr.w	r3, r0, r1
 80038c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4b8f      	ldr	r3, [pc, #572]	; (8003b0c <UART_SetConfig+0x2cc>)
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d005      	beq.n	80038e0 <UART_SetConfig+0xa0>
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	4b8d      	ldr	r3, [pc, #564]	; (8003b10 <UART_SetConfig+0x2d0>)
 80038dc:	429a      	cmp	r2, r3
 80038de:	d104      	bne.n	80038ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038e0:	f7ff fe02 	bl	80034e8 <HAL_RCC_GetPCLK2Freq>
 80038e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038e8:	e003      	b.n	80038f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038ea:	f7ff fde9 	bl	80034c0 <HAL_RCC_GetPCLK1Freq>
 80038ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038fc:	f040 810c 	bne.w	8003b18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003904:	2200      	movs	r2, #0
 8003906:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800390a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800390e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003912:	4622      	mov	r2, r4
 8003914:	462b      	mov	r3, r5
 8003916:	1891      	adds	r1, r2, r2
 8003918:	65b9      	str	r1, [r7, #88]	; 0x58
 800391a:	415b      	adcs	r3, r3
 800391c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800391e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003922:	4621      	mov	r1, r4
 8003924:	eb12 0801 	adds.w	r8, r2, r1
 8003928:	4629      	mov	r1, r5
 800392a:	eb43 0901 	adc.w	r9, r3, r1
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800393a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800393e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003942:	4690      	mov	r8, r2
 8003944:	4699      	mov	r9, r3
 8003946:	4623      	mov	r3, r4
 8003948:	eb18 0303 	adds.w	r3, r8, r3
 800394c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003950:	462b      	mov	r3, r5
 8003952:	eb49 0303 	adc.w	r3, r9, r3
 8003956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003966:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800396a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800396e:	460b      	mov	r3, r1
 8003970:	18db      	adds	r3, r3, r3
 8003972:	653b      	str	r3, [r7, #80]	; 0x50
 8003974:	4613      	mov	r3, r2
 8003976:	eb42 0303 	adc.w	r3, r2, r3
 800397a:	657b      	str	r3, [r7, #84]	; 0x54
 800397c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003980:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003984:	f7fc fc84 	bl	8000290 <__aeabi_uldivmod>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4b61      	ldr	r3, [pc, #388]	; (8003b14 <UART_SetConfig+0x2d4>)
 800398e:	fba3 2302 	umull	r2, r3, r3, r2
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	011c      	lsls	r4, r3, #4
 8003996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800399a:	2200      	movs	r2, #0
 800399c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039a8:	4642      	mov	r2, r8
 80039aa:	464b      	mov	r3, r9
 80039ac:	1891      	adds	r1, r2, r2
 80039ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80039b0:	415b      	adcs	r3, r3
 80039b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039b8:	4641      	mov	r1, r8
 80039ba:	eb12 0a01 	adds.w	sl, r2, r1
 80039be:	4649      	mov	r1, r9
 80039c0:	eb43 0b01 	adc.w	fp, r3, r1
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039d8:	4692      	mov	sl, r2
 80039da:	469b      	mov	fp, r3
 80039dc:	4643      	mov	r3, r8
 80039de:	eb1a 0303 	adds.w	r3, sl, r3
 80039e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039e6:	464b      	mov	r3, r9
 80039e8:	eb4b 0303 	adc.w	r3, fp, r3
 80039ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a04:	460b      	mov	r3, r1
 8003a06:	18db      	adds	r3, r3, r3
 8003a08:	643b      	str	r3, [r7, #64]	; 0x40
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	eb42 0303 	adc.w	r3, r2, r3
 8003a10:	647b      	str	r3, [r7, #68]	; 0x44
 8003a12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a1a:	f7fc fc39 	bl	8000290 <__aeabi_uldivmod>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4611      	mov	r1, r2
 8003a24:	4b3b      	ldr	r3, [pc, #236]	; (8003b14 <UART_SetConfig+0x2d4>)
 8003a26:	fba3 2301 	umull	r2, r3, r3, r1
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	2264      	movs	r2, #100	; 0x64
 8003a2e:	fb02 f303 	mul.w	r3, r2, r3
 8003a32:	1acb      	subs	r3, r1, r3
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a3a:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <UART_SetConfig+0x2d4>)
 8003a3c:	fba3 2302 	umull	r2, r3, r3, r2
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a48:	441c      	add	r4, r3
 8003a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a5c:	4642      	mov	r2, r8
 8003a5e:	464b      	mov	r3, r9
 8003a60:	1891      	adds	r1, r2, r2
 8003a62:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a64:	415b      	adcs	r3, r3
 8003a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a6c:	4641      	mov	r1, r8
 8003a6e:	1851      	adds	r1, r2, r1
 8003a70:	6339      	str	r1, [r7, #48]	; 0x30
 8003a72:	4649      	mov	r1, r9
 8003a74:	414b      	adcs	r3, r1
 8003a76:	637b      	str	r3, [r7, #52]	; 0x34
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a84:	4659      	mov	r1, fp
 8003a86:	00cb      	lsls	r3, r1, #3
 8003a88:	4651      	mov	r1, sl
 8003a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a8e:	4651      	mov	r1, sl
 8003a90:	00ca      	lsls	r2, r1, #3
 8003a92:	4610      	mov	r0, r2
 8003a94:	4619      	mov	r1, r3
 8003a96:	4603      	mov	r3, r0
 8003a98:	4642      	mov	r2, r8
 8003a9a:	189b      	adds	r3, r3, r2
 8003a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003aa0:	464b      	mov	r3, r9
 8003aa2:	460a      	mov	r2, r1
 8003aa4:	eb42 0303 	adc.w	r3, r2, r3
 8003aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ab8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003abc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	18db      	adds	r3, r3, r3
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	eb42 0303 	adc.w	r3, r2, r3
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ace:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ad2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ad6:	f7fc fbdb 	bl	8000290 <__aeabi_uldivmod>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <UART_SetConfig+0x2d4>)
 8003ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	2164      	movs	r1, #100	; 0x64
 8003ae8:	fb01 f303 	mul.w	r3, r1, r3
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	3332      	adds	r3, #50	; 0x32
 8003af2:	4a08      	ldr	r2, [pc, #32]	; (8003b14 <UART_SetConfig+0x2d4>)
 8003af4:	fba2 2303 	umull	r2, r3, r2, r3
 8003af8:	095b      	lsrs	r3, r3, #5
 8003afa:	f003 0207 	and.w	r2, r3, #7
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4422      	add	r2, r4
 8003b06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b08:	e106      	b.n	8003d18 <UART_SetConfig+0x4d8>
 8003b0a:	bf00      	nop
 8003b0c:	40011000 	.word	0x40011000
 8003b10:	40011400 	.word	0x40011400
 8003b14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b2a:	4642      	mov	r2, r8
 8003b2c:	464b      	mov	r3, r9
 8003b2e:	1891      	adds	r1, r2, r2
 8003b30:	6239      	str	r1, [r7, #32]
 8003b32:	415b      	adcs	r3, r3
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
 8003b36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b3a:	4641      	mov	r1, r8
 8003b3c:	1854      	adds	r4, r2, r1
 8003b3e:	4649      	mov	r1, r9
 8003b40:	eb43 0501 	adc.w	r5, r3, r1
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	00eb      	lsls	r3, r5, #3
 8003b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b52:	00e2      	lsls	r2, r4, #3
 8003b54:	4614      	mov	r4, r2
 8003b56:	461d      	mov	r5, r3
 8003b58:	4643      	mov	r3, r8
 8003b5a:	18e3      	adds	r3, r4, r3
 8003b5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b60:	464b      	mov	r3, r9
 8003b62:	eb45 0303 	adc.w	r3, r5, r3
 8003b66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b86:	4629      	mov	r1, r5
 8003b88:	008b      	lsls	r3, r1, #2
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b90:	4621      	mov	r1, r4
 8003b92:	008a      	lsls	r2, r1, #2
 8003b94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b98:	f7fc fb7a 	bl	8000290 <__aeabi_uldivmod>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4b60      	ldr	r3, [pc, #384]	; (8003d24 <UART_SetConfig+0x4e4>)
 8003ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	011c      	lsls	r4, r3, #4
 8003baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003bbc:	4642      	mov	r2, r8
 8003bbe:	464b      	mov	r3, r9
 8003bc0:	1891      	adds	r1, r2, r2
 8003bc2:	61b9      	str	r1, [r7, #24]
 8003bc4:	415b      	adcs	r3, r3
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bcc:	4641      	mov	r1, r8
 8003bce:	1851      	adds	r1, r2, r1
 8003bd0:	6139      	str	r1, [r7, #16]
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	414b      	adcs	r3, r1
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003be4:	4659      	mov	r1, fp
 8003be6:	00cb      	lsls	r3, r1, #3
 8003be8:	4651      	mov	r1, sl
 8003bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bee:	4651      	mov	r1, sl
 8003bf0:	00ca      	lsls	r2, r1, #3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	4642      	mov	r2, r8
 8003bfa:	189b      	adds	r3, r3, r2
 8003bfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c00:	464b      	mov	r3, r9
 8003c02:	460a      	mov	r2, r1
 8003c04:	eb42 0303 	adc.w	r3, r2, r3
 8003c08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c24:	4649      	mov	r1, r9
 8003c26:	008b      	lsls	r3, r1, #2
 8003c28:	4641      	mov	r1, r8
 8003c2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c2e:	4641      	mov	r1, r8
 8003c30:	008a      	lsls	r2, r1, #2
 8003c32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c36:	f7fc fb2b 	bl	8000290 <__aeabi_uldivmod>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4b38      	ldr	r3, [pc, #224]	; (8003d24 <UART_SetConfig+0x4e4>)
 8003c42:	fba3 2301 	umull	r2, r3, r3, r1
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	2264      	movs	r2, #100	; 0x64
 8003c4a:	fb02 f303 	mul.w	r3, r2, r3
 8003c4e:	1acb      	subs	r3, r1, r3
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	3332      	adds	r3, #50	; 0x32
 8003c54:	4a33      	ldr	r2, [pc, #204]	; (8003d24 <UART_SetConfig+0x4e4>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c60:	441c      	add	r4, r3
 8003c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c66:	2200      	movs	r2, #0
 8003c68:	673b      	str	r3, [r7, #112]	; 0x70
 8003c6a:	677a      	str	r2, [r7, #116]	; 0x74
 8003c6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c70:	4642      	mov	r2, r8
 8003c72:	464b      	mov	r3, r9
 8003c74:	1891      	adds	r1, r2, r2
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	415b      	adcs	r3, r3
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c80:	4641      	mov	r1, r8
 8003c82:	1851      	adds	r1, r2, r1
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	4649      	mov	r1, r9
 8003c88:	414b      	adcs	r3, r1
 8003c8a:	607b      	str	r3, [r7, #4]
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c98:	4659      	mov	r1, fp
 8003c9a:	00cb      	lsls	r3, r1, #3
 8003c9c:	4651      	mov	r1, sl
 8003c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ca2:	4651      	mov	r1, sl
 8003ca4:	00ca      	lsls	r2, r1, #3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4603      	mov	r3, r0
 8003cac:	4642      	mov	r2, r8
 8003cae:	189b      	adds	r3, r3, r2
 8003cb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	460a      	mov	r2, r1
 8003cb6:	eb42 0303 	adc.w	r3, r2, r3
 8003cba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	663b      	str	r3, [r7, #96]	; 0x60
 8003cc6:	667a      	str	r2, [r7, #100]	; 0x64
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cd4:	4649      	mov	r1, r9
 8003cd6:	008b      	lsls	r3, r1, #2
 8003cd8:	4641      	mov	r1, r8
 8003cda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cde:	4641      	mov	r1, r8
 8003ce0:	008a      	lsls	r2, r1, #2
 8003ce2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ce6:	f7fc fad3 	bl	8000290 <__aeabi_uldivmod>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <UART_SetConfig+0x4e4>)
 8003cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf4:	095b      	lsrs	r3, r3, #5
 8003cf6:	2164      	movs	r1, #100	; 0x64
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	3332      	adds	r3, #50	; 0x32
 8003d02:	4a08      	ldr	r2, [pc, #32]	; (8003d24 <UART_SetConfig+0x4e4>)
 8003d04:	fba2 2303 	umull	r2, r3, r2, r3
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	f003 020f 	and.w	r2, r3, #15
 8003d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4422      	add	r2, r4
 8003d16:	609a      	str	r2, [r3, #8]
}
 8003d18:	bf00      	nop
 8003d1a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d24:	51eb851f 	.word	0x51eb851f

08003d28 <rand>:
 8003d28:	4b16      	ldr	r3, [pc, #88]	; (8003d84 <rand+0x5c>)
 8003d2a:	b510      	push	{r4, lr}
 8003d2c:	681c      	ldr	r4, [r3, #0]
 8003d2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d30:	b9b3      	cbnz	r3, 8003d60 <rand+0x38>
 8003d32:	2018      	movs	r0, #24
 8003d34:	f000 fa5a 	bl	80041ec <malloc>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	6320      	str	r0, [r4, #48]	; 0x30
 8003d3c:	b920      	cbnz	r0, 8003d48 <rand+0x20>
 8003d3e:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <rand+0x60>)
 8003d40:	4812      	ldr	r0, [pc, #72]	; (8003d8c <rand+0x64>)
 8003d42:	2152      	movs	r1, #82	; 0x52
 8003d44:	f000 f9e8 	bl	8004118 <__assert_func>
 8003d48:	4911      	ldr	r1, [pc, #68]	; (8003d90 <rand+0x68>)
 8003d4a:	4b12      	ldr	r3, [pc, #72]	; (8003d94 <rand+0x6c>)
 8003d4c:	e9c0 1300 	strd	r1, r3, [r0]
 8003d50:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <rand+0x70>)
 8003d52:	6083      	str	r3, [r0, #8]
 8003d54:	230b      	movs	r3, #11
 8003d56:	8183      	strh	r3, [r0, #12]
 8003d58:	2100      	movs	r1, #0
 8003d5a:	2001      	movs	r0, #1
 8003d5c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003d60:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003d62:	480e      	ldr	r0, [pc, #56]	; (8003d9c <rand+0x74>)
 8003d64:	690b      	ldr	r3, [r1, #16]
 8003d66:	694c      	ldr	r4, [r1, #20]
 8003d68:	4a0d      	ldr	r2, [pc, #52]	; (8003da0 <rand+0x78>)
 8003d6a:	4358      	muls	r0, r3
 8003d6c:	fb02 0004 	mla	r0, r2, r4, r0
 8003d70:	fba3 3202 	umull	r3, r2, r3, r2
 8003d74:	3301      	adds	r3, #1
 8003d76:	eb40 0002 	adc.w	r0, r0, r2
 8003d7a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003d7e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003d82:	bd10      	pop	{r4, pc}
 8003d84:	20000064 	.word	0x20000064
 8003d88:	08005224 	.word	0x08005224
 8003d8c:	0800523b 	.word	0x0800523b
 8003d90:	abcd330e 	.word	0xabcd330e
 8003d94:	e66d1234 	.word	0xe66d1234
 8003d98:	0005deec 	.word	0x0005deec
 8003d9c:	5851f42d 	.word	0x5851f42d
 8003da0:	4c957f2d 	.word	0x4c957f2d

08003da4 <std>:
 8003da4:	2300      	movs	r3, #0
 8003da6:	b510      	push	{r4, lr}
 8003da8:	4604      	mov	r4, r0
 8003daa:	e9c0 3300 	strd	r3, r3, [r0]
 8003dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003db2:	6083      	str	r3, [r0, #8]
 8003db4:	8181      	strh	r1, [r0, #12]
 8003db6:	6643      	str	r3, [r0, #100]	; 0x64
 8003db8:	81c2      	strh	r2, [r0, #14]
 8003dba:	6183      	str	r3, [r0, #24]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	2208      	movs	r2, #8
 8003dc0:	305c      	adds	r0, #92	; 0x5c
 8003dc2:	f000 f92d 	bl	8004020 <memset>
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <std+0x58>)
 8003dc8:	6263      	str	r3, [r4, #36]	; 0x24
 8003dca:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <std+0x5c>)
 8003dcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dce:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <std+0x60>)
 8003dd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dd2:	4b0d      	ldr	r3, [pc, #52]	; (8003e08 <std+0x64>)
 8003dd4:	6323      	str	r3, [r4, #48]	; 0x30
 8003dd6:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <std+0x68>)
 8003dd8:	6224      	str	r4, [r4, #32]
 8003dda:	429c      	cmp	r4, r3
 8003ddc:	d006      	beq.n	8003dec <std+0x48>
 8003dde:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003de2:	4294      	cmp	r4, r2
 8003de4:	d002      	beq.n	8003dec <std+0x48>
 8003de6:	33d0      	adds	r3, #208	; 0xd0
 8003de8:	429c      	cmp	r4, r3
 8003dea:	d105      	bne.n	8003df8 <std+0x54>
 8003dec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003df4:	f000 b98c 	b.w	8004110 <__retarget_lock_init_recursive>
 8003df8:	bd10      	pop	{r4, pc}
 8003dfa:	bf00      	nop
 8003dfc:	08003f29 	.word	0x08003f29
 8003e00:	08003f4b 	.word	0x08003f4b
 8003e04:	08003f83 	.word	0x08003f83
 8003e08:	08003fa7 	.word	0x08003fa7
 8003e0c:	200001a0 	.word	0x200001a0

08003e10 <stdio_exit_handler>:
 8003e10:	4a02      	ldr	r2, [pc, #8]	; (8003e1c <stdio_exit_handler+0xc>)
 8003e12:	4903      	ldr	r1, [pc, #12]	; (8003e20 <stdio_exit_handler+0x10>)
 8003e14:	4803      	ldr	r0, [pc, #12]	; (8003e24 <stdio_exit_handler+0x14>)
 8003e16:	f000 b869 	b.w	8003eec <_fwalk_sglue>
 8003e1a:	bf00      	nop
 8003e1c:	2000000c 	.word	0x2000000c
 8003e20:	08004a31 	.word	0x08004a31
 8003e24:	20000018 	.word	0x20000018

08003e28 <cleanup_stdio>:
 8003e28:	6841      	ldr	r1, [r0, #4]
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <cleanup_stdio+0x34>)
 8003e2c:	4299      	cmp	r1, r3
 8003e2e:	b510      	push	{r4, lr}
 8003e30:	4604      	mov	r4, r0
 8003e32:	d001      	beq.n	8003e38 <cleanup_stdio+0x10>
 8003e34:	f000 fdfc 	bl	8004a30 <_fflush_r>
 8003e38:	68a1      	ldr	r1, [r4, #8]
 8003e3a:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <cleanup_stdio+0x38>)
 8003e3c:	4299      	cmp	r1, r3
 8003e3e:	d002      	beq.n	8003e46 <cleanup_stdio+0x1e>
 8003e40:	4620      	mov	r0, r4
 8003e42:	f000 fdf5 	bl	8004a30 <_fflush_r>
 8003e46:	68e1      	ldr	r1, [r4, #12]
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <cleanup_stdio+0x3c>)
 8003e4a:	4299      	cmp	r1, r3
 8003e4c:	d004      	beq.n	8003e58 <cleanup_stdio+0x30>
 8003e4e:	4620      	mov	r0, r4
 8003e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e54:	f000 bdec 	b.w	8004a30 <_fflush_r>
 8003e58:	bd10      	pop	{r4, pc}
 8003e5a:	bf00      	nop
 8003e5c:	200001a0 	.word	0x200001a0
 8003e60:	20000208 	.word	0x20000208
 8003e64:	20000270 	.word	0x20000270

08003e68 <global_stdio_init.part.0>:
 8003e68:	b510      	push	{r4, lr}
 8003e6a:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <global_stdio_init.part.0+0x30>)
 8003e6c:	4c0b      	ldr	r4, [pc, #44]	; (8003e9c <global_stdio_init.part.0+0x34>)
 8003e6e:	4a0c      	ldr	r2, [pc, #48]	; (8003ea0 <global_stdio_init.part.0+0x38>)
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	4620      	mov	r0, r4
 8003e74:	2200      	movs	r2, #0
 8003e76:	2104      	movs	r1, #4
 8003e78:	f7ff ff94 	bl	8003da4 <std>
 8003e7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003e80:	2201      	movs	r2, #1
 8003e82:	2109      	movs	r1, #9
 8003e84:	f7ff ff8e 	bl	8003da4 <std>
 8003e88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e92:	2112      	movs	r1, #18
 8003e94:	f7ff bf86 	b.w	8003da4 <std>
 8003e98:	200002d8 	.word	0x200002d8
 8003e9c:	200001a0 	.word	0x200001a0
 8003ea0:	08003e11 	.word	0x08003e11

08003ea4 <__sfp_lock_acquire>:
 8003ea4:	4801      	ldr	r0, [pc, #4]	; (8003eac <__sfp_lock_acquire+0x8>)
 8003ea6:	f000 b934 	b.w	8004112 <__retarget_lock_acquire_recursive>
 8003eaa:	bf00      	nop
 8003eac:	200002e1 	.word	0x200002e1

08003eb0 <__sfp_lock_release>:
 8003eb0:	4801      	ldr	r0, [pc, #4]	; (8003eb8 <__sfp_lock_release+0x8>)
 8003eb2:	f000 b92f 	b.w	8004114 <__retarget_lock_release_recursive>
 8003eb6:	bf00      	nop
 8003eb8:	200002e1 	.word	0x200002e1

08003ebc <__sinit>:
 8003ebc:	b510      	push	{r4, lr}
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	f7ff fff0 	bl	8003ea4 <__sfp_lock_acquire>
 8003ec4:	6a23      	ldr	r3, [r4, #32]
 8003ec6:	b11b      	cbz	r3, 8003ed0 <__sinit+0x14>
 8003ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ecc:	f7ff bff0 	b.w	8003eb0 <__sfp_lock_release>
 8003ed0:	4b04      	ldr	r3, [pc, #16]	; (8003ee4 <__sinit+0x28>)
 8003ed2:	6223      	str	r3, [r4, #32]
 8003ed4:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <__sinit+0x2c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1f5      	bne.n	8003ec8 <__sinit+0xc>
 8003edc:	f7ff ffc4 	bl	8003e68 <global_stdio_init.part.0>
 8003ee0:	e7f2      	b.n	8003ec8 <__sinit+0xc>
 8003ee2:	bf00      	nop
 8003ee4:	08003e29 	.word	0x08003e29
 8003ee8:	200002d8 	.word	0x200002d8

08003eec <_fwalk_sglue>:
 8003eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ef0:	4607      	mov	r7, r0
 8003ef2:	4688      	mov	r8, r1
 8003ef4:	4614      	mov	r4, r2
 8003ef6:	2600      	movs	r6, #0
 8003ef8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003efc:	f1b9 0901 	subs.w	r9, r9, #1
 8003f00:	d505      	bpl.n	8003f0e <_fwalk_sglue+0x22>
 8003f02:	6824      	ldr	r4, [r4, #0]
 8003f04:	2c00      	cmp	r4, #0
 8003f06:	d1f7      	bne.n	8003ef8 <_fwalk_sglue+0xc>
 8003f08:	4630      	mov	r0, r6
 8003f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f0e:	89ab      	ldrh	r3, [r5, #12]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d907      	bls.n	8003f24 <_fwalk_sglue+0x38>
 8003f14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	d003      	beq.n	8003f24 <_fwalk_sglue+0x38>
 8003f1c:	4629      	mov	r1, r5
 8003f1e:	4638      	mov	r0, r7
 8003f20:	47c0      	blx	r8
 8003f22:	4306      	orrs	r6, r0
 8003f24:	3568      	adds	r5, #104	; 0x68
 8003f26:	e7e9      	b.n	8003efc <_fwalk_sglue+0x10>

08003f28 <__sread>:
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f30:	f000 f8a0 	bl	8004074 <_read_r>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	bfab      	itete	ge
 8003f38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f3a:	89a3      	ldrhlt	r3, [r4, #12]
 8003f3c:	181b      	addge	r3, r3, r0
 8003f3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f42:	bfac      	ite	ge
 8003f44:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f46:	81a3      	strhlt	r3, [r4, #12]
 8003f48:	bd10      	pop	{r4, pc}

08003f4a <__swrite>:
 8003f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f4e:	461f      	mov	r7, r3
 8003f50:	898b      	ldrh	r3, [r1, #12]
 8003f52:	05db      	lsls	r3, r3, #23
 8003f54:	4605      	mov	r5, r0
 8003f56:	460c      	mov	r4, r1
 8003f58:	4616      	mov	r6, r2
 8003f5a:	d505      	bpl.n	8003f68 <__swrite+0x1e>
 8003f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f60:	2302      	movs	r3, #2
 8003f62:	2200      	movs	r2, #0
 8003f64:	f000 f874 	bl	8004050 <_lseek_r>
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f72:	81a3      	strh	r3, [r4, #12]
 8003f74:	4632      	mov	r2, r6
 8003f76:	463b      	mov	r3, r7
 8003f78:	4628      	mov	r0, r5
 8003f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f7e:	f000 b88b 	b.w	8004098 <_write_r>

08003f82 <__sseek>:
 8003f82:	b510      	push	{r4, lr}
 8003f84:	460c      	mov	r4, r1
 8003f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f8a:	f000 f861 	bl	8004050 <_lseek_r>
 8003f8e:	1c43      	adds	r3, r0, #1
 8003f90:	89a3      	ldrh	r3, [r4, #12]
 8003f92:	bf15      	itete	ne
 8003f94:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f9e:	81a3      	strheq	r3, [r4, #12]
 8003fa0:	bf18      	it	ne
 8003fa2:	81a3      	strhne	r3, [r4, #12]
 8003fa4:	bd10      	pop	{r4, pc}

08003fa6 <__sclose>:
 8003fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003faa:	f000 b841 	b.w	8004030 <_close_r>

08003fae <_vsniprintf_r>:
 8003fae:	b530      	push	{r4, r5, lr}
 8003fb0:	4614      	mov	r4, r2
 8003fb2:	2c00      	cmp	r4, #0
 8003fb4:	b09b      	sub	sp, #108	; 0x6c
 8003fb6:	4605      	mov	r5, r0
 8003fb8:	461a      	mov	r2, r3
 8003fba:	da05      	bge.n	8003fc8 <_vsniprintf_r+0x1a>
 8003fbc:	238b      	movs	r3, #139	; 0x8b
 8003fbe:	6003      	str	r3, [r0, #0]
 8003fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc4:	b01b      	add	sp, #108	; 0x6c
 8003fc6:	bd30      	pop	{r4, r5, pc}
 8003fc8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003fcc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003fd0:	bf14      	ite	ne
 8003fd2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003fd6:	4623      	moveq	r3, r4
 8003fd8:	9302      	str	r3, [sp, #8]
 8003fda:	9305      	str	r3, [sp, #20]
 8003fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fe0:	9100      	str	r1, [sp, #0]
 8003fe2:	9104      	str	r1, [sp, #16]
 8003fe4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003fe8:	4669      	mov	r1, sp
 8003fea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003fec:	f000 fa0c 	bl	8004408 <_svfiprintf_r>
 8003ff0:	1c43      	adds	r3, r0, #1
 8003ff2:	bfbc      	itt	lt
 8003ff4:	238b      	movlt	r3, #139	; 0x8b
 8003ff6:	602b      	strlt	r3, [r5, #0]
 8003ff8:	2c00      	cmp	r4, #0
 8003ffa:	d0e3      	beq.n	8003fc4 <_vsniprintf_r+0x16>
 8003ffc:	9b00      	ldr	r3, [sp, #0]
 8003ffe:	2200      	movs	r2, #0
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	e7df      	b.n	8003fc4 <_vsniprintf_r+0x16>

08004004 <vsniprintf>:
 8004004:	b507      	push	{r0, r1, r2, lr}
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	460a      	mov	r2, r1
 800400c:	4601      	mov	r1, r0
 800400e:	4803      	ldr	r0, [pc, #12]	; (800401c <vsniprintf+0x18>)
 8004010:	6800      	ldr	r0, [r0, #0]
 8004012:	f7ff ffcc 	bl	8003fae <_vsniprintf_r>
 8004016:	b003      	add	sp, #12
 8004018:	f85d fb04 	ldr.w	pc, [sp], #4
 800401c:	20000064 	.word	0x20000064

08004020 <memset>:
 8004020:	4402      	add	r2, r0
 8004022:	4603      	mov	r3, r0
 8004024:	4293      	cmp	r3, r2
 8004026:	d100      	bne.n	800402a <memset+0xa>
 8004028:	4770      	bx	lr
 800402a:	f803 1b01 	strb.w	r1, [r3], #1
 800402e:	e7f9      	b.n	8004024 <memset+0x4>

08004030 <_close_r>:
 8004030:	b538      	push	{r3, r4, r5, lr}
 8004032:	4d06      	ldr	r5, [pc, #24]	; (800404c <_close_r+0x1c>)
 8004034:	2300      	movs	r3, #0
 8004036:	4604      	mov	r4, r0
 8004038:	4608      	mov	r0, r1
 800403a:	602b      	str	r3, [r5, #0]
 800403c:	f7fd fa81 	bl	8001542 <_close>
 8004040:	1c43      	adds	r3, r0, #1
 8004042:	d102      	bne.n	800404a <_close_r+0x1a>
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	b103      	cbz	r3, 800404a <_close_r+0x1a>
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	bd38      	pop	{r3, r4, r5, pc}
 800404c:	200002dc 	.word	0x200002dc

08004050 <_lseek_r>:
 8004050:	b538      	push	{r3, r4, r5, lr}
 8004052:	4d07      	ldr	r5, [pc, #28]	; (8004070 <_lseek_r+0x20>)
 8004054:	4604      	mov	r4, r0
 8004056:	4608      	mov	r0, r1
 8004058:	4611      	mov	r1, r2
 800405a:	2200      	movs	r2, #0
 800405c:	602a      	str	r2, [r5, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	f7fd fa96 	bl	8001590 <_lseek>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d102      	bne.n	800406e <_lseek_r+0x1e>
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	b103      	cbz	r3, 800406e <_lseek_r+0x1e>
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	bd38      	pop	{r3, r4, r5, pc}
 8004070:	200002dc 	.word	0x200002dc

08004074 <_read_r>:
 8004074:	b538      	push	{r3, r4, r5, lr}
 8004076:	4d07      	ldr	r5, [pc, #28]	; (8004094 <_read_r+0x20>)
 8004078:	4604      	mov	r4, r0
 800407a:	4608      	mov	r0, r1
 800407c:	4611      	mov	r1, r2
 800407e:	2200      	movs	r2, #0
 8004080:	602a      	str	r2, [r5, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	f7fd fa24 	bl	80014d0 <_read>
 8004088:	1c43      	adds	r3, r0, #1
 800408a:	d102      	bne.n	8004092 <_read_r+0x1e>
 800408c:	682b      	ldr	r3, [r5, #0]
 800408e:	b103      	cbz	r3, 8004092 <_read_r+0x1e>
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	bd38      	pop	{r3, r4, r5, pc}
 8004094:	200002dc 	.word	0x200002dc

08004098 <_write_r>:
 8004098:	b538      	push	{r3, r4, r5, lr}
 800409a:	4d07      	ldr	r5, [pc, #28]	; (80040b8 <_write_r+0x20>)
 800409c:	4604      	mov	r4, r0
 800409e:	4608      	mov	r0, r1
 80040a0:	4611      	mov	r1, r2
 80040a2:	2200      	movs	r2, #0
 80040a4:	602a      	str	r2, [r5, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	f7fd fa2f 	bl	800150a <_write>
 80040ac:	1c43      	adds	r3, r0, #1
 80040ae:	d102      	bne.n	80040b6 <_write_r+0x1e>
 80040b0:	682b      	ldr	r3, [r5, #0]
 80040b2:	b103      	cbz	r3, 80040b6 <_write_r+0x1e>
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	bd38      	pop	{r3, r4, r5, pc}
 80040b8:	200002dc 	.word	0x200002dc

080040bc <__errno>:
 80040bc:	4b01      	ldr	r3, [pc, #4]	; (80040c4 <__errno+0x8>)
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	20000064 	.word	0x20000064

080040c8 <__libc_init_array>:
 80040c8:	b570      	push	{r4, r5, r6, lr}
 80040ca:	4d0d      	ldr	r5, [pc, #52]	; (8004100 <__libc_init_array+0x38>)
 80040cc:	4c0d      	ldr	r4, [pc, #52]	; (8004104 <__libc_init_array+0x3c>)
 80040ce:	1b64      	subs	r4, r4, r5
 80040d0:	10a4      	asrs	r4, r4, #2
 80040d2:	2600      	movs	r6, #0
 80040d4:	42a6      	cmp	r6, r4
 80040d6:	d109      	bne.n	80040ec <__libc_init_array+0x24>
 80040d8:	4d0b      	ldr	r5, [pc, #44]	; (8004108 <__libc_init_array+0x40>)
 80040da:	4c0c      	ldr	r4, [pc, #48]	; (800410c <__libc_init_array+0x44>)
 80040dc:	f000 fffa 	bl	80050d4 <_init>
 80040e0:	1b64      	subs	r4, r4, r5
 80040e2:	10a4      	asrs	r4, r4, #2
 80040e4:	2600      	movs	r6, #0
 80040e6:	42a6      	cmp	r6, r4
 80040e8:	d105      	bne.n	80040f6 <__libc_init_array+0x2e>
 80040ea:	bd70      	pop	{r4, r5, r6, pc}
 80040ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f0:	4798      	blx	r3
 80040f2:	3601      	adds	r6, #1
 80040f4:	e7ee      	b.n	80040d4 <__libc_init_array+0xc>
 80040f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040fa:	4798      	blx	r3
 80040fc:	3601      	adds	r6, #1
 80040fe:	e7f2      	b.n	80040e6 <__libc_init_array+0x1e>
 8004100:	0800530c 	.word	0x0800530c
 8004104:	0800530c 	.word	0x0800530c
 8004108:	0800530c 	.word	0x0800530c
 800410c:	08005310 	.word	0x08005310

08004110 <__retarget_lock_init_recursive>:
 8004110:	4770      	bx	lr

08004112 <__retarget_lock_acquire_recursive>:
 8004112:	4770      	bx	lr

08004114 <__retarget_lock_release_recursive>:
 8004114:	4770      	bx	lr
	...

08004118 <__assert_func>:
 8004118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800411a:	4614      	mov	r4, r2
 800411c:	461a      	mov	r2, r3
 800411e:	4b09      	ldr	r3, [pc, #36]	; (8004144 <__assert_func+0x2c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4605      	mov	r5, r0
 8004124:	68d8      	ldr	r0, [r3, #12]
 8004126:	b14c      	cbz	r4, 800413c <__assert_func+0x24>
 8004128:	4b07      	ldr	r3, [pc, #28]	; (8004148 <__assert_func+0x30>)
 800412a:	9100      	str	r1, [sp, #0]
 800412c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004130:	4906      	ldr	r1, [pc, #24]	; (800414c <__assert_func+0x34>)
 8004132:	462b      	mov	r3, r5
 8004134:	f000 fca4 	bl	8004a80 <fiprintf>
 8004138:	f000 fcec 	bl	8004b14 <abort>
 800413c:	4b04      	ldr	r3, [pc, #16]	; (8004150 <__assert_func+0x38>)
 800413e:	461c      	mov	r4, r3
 8004140:	e7f3      	b.n	800412a <__assert_func+0x12>
 8004142:	bf00      	nop
 8004144:	20000064 	.word	0x20000064
 8004148:	08005293 	.word	0x08005293
 800414c:	080052a0 	.word	0x080052a0
 8004150:	080052ce 	.word	0x080052ce

08004154 <_free_r>:
 8004154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004156:	2900      	cmp	r1, #0
 8004158:	d044      	beq.n	80041e4 <_free_r+0x90>
 800415a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800415e:	9001      	str	r0, [sp, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	f1a1 0404 	sub.w	r4, r1, #4
 8004166:	bfb8      	it	lt
 8004168:	18e4      	addlt	r4, r4, r3
 800416a:	f000 f8e7 	bl	800433c <__malloc_lock>
 800416e:	4a1e      	ldr	r2, [pc, #120]	; (80041e8 <_free_r+0x94>)
 8004170:	9801      	ldr	r0, [sp, #4]
 8004172:	6813      	ldr	r3, [r2, #0]
 8004174:	b933      	cbnz	r3, 8004184 <_free_r+0x30>
 8004176:	6063      	str	r3, [r4, #4]
 8004178:	6014      	str	r4, [r2, #0]
 800417a:	b003      	add	sp, #12
 800417c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004180:	f000 b8e2 	b.w	8004348 <__malloc_unlock>
 8004184:	42a3      	cmp	r3, r4
 8004186:	d908      	bls.n	800419a <_free_r+0x46>
 8004188:	6825      	ldr	r5, [r4, #0]
 800418a:	1961      	adds	r1, r4, r5
 800418c:	428b      	cmp	r3, r1
 800418e:	bf01      	itttt	eq
 8004190:	6819      	ldreq	r1, [r3, #0]
 8004192:	685b      	ldreq	r3, [r3, #4]
 8004194:	1949      	addeq	r1, r1, r5
 8004196:	6021      	streq	r1, [r4, #0]
 8004198:	e7ed      	b.n	8004176 <_free_r+0x22>
 800419a:	461a      	mov	r2, r3
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	b10b      	cbz	r3, 80041a4 <_free_r+0x50>
 80041a0:	42a3      	cmp	r3, r4
 80041a2:	d9fa      	bls.n	800419a <_free_r+0x46>
 80041a4:	6811      	ldr	r1, [r2, #0]
 80041a6:	1855      	adds	r5, r2, r1
 80041a8:	42a5      	cmp	r5, r4
 80041aa:	d10b      	bne.n	80041c4 <_free_r+0x70>
 80041ac:	6824      	ldr	r4, [r4, #0]
 80041ae:	4421      	add	r1, r4
 80041b0:	1854      	adds	r4, r2, r1
 80041b2:	42a3      	cmp	r3, r4
 80041b4:	6011      	str	r1, [r2, #0]
 80041b6:	d1e0      	bne.n	800417a <_free_r+0x26>
 80041b8:	681c      	ldr	r4, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	6053      	str	r3, [r2, #4]
 80041be:	440c      	add	r4, r1
 80041c0:	6014      	str	r4, [r2, #0]
 80041c2:	e7da      	b.n	800417a <_free_r+0x26>
 80041c4:	d902      	bls.n	80041cc <_free_r+0x78>
 80041c6:	230c      	movs	r3, #12
 80041c8:	6003      	str	r3, [r0, #0]
 80041ca:	e7d6      	b.n	800417a <_free_r+0x26>
 80041cc:	6825      	ldr	r5, [r4, #0]
 80041ce:	1961      	adds	r1, r4, r5
 80041d0:	428b      	cmp	r3, r1
 80041d2:	bf04      	itt	eq
 80041d4:	6819      	ldreq	r1, [r3, #0]
 80041d6:	685b      	ldreq	r3, [r3, #4]
 80041d8:	6063      	str	r3, [r4, #4]
 80041da:	bf04      	itt	eq
 80041dc:	1949      	addeq	r1, r1, r5
 80041de:	6021      	streq	r1, [r4, #0]
 80041e0:	6054      	str	r4, [r2, #4]
 80041e2:	e7ca      	b.n	800417a <_free_r+0x26>
 80041e4:	b003      	add	sp, #12
 80041e6:	bd30      	pop	{r4, r5, pc}
 80041e8:	200002e4 	.word	0x200002e4

080041ec <malloc>:
 80041ec:	4b02      	ldr	r3, [pc, #8]	; (80041f8 <malloc+0xc>)
 80041ee:	4601      	mov	r1, r0
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	f000 b823 	b.w	800423c <_malloc_r>
 80041f6:	bf00      	nop
 80041f8:	20000064 	.word	0x20000064

080041fc <sbrk_aligned>:
 80041fc:	b570      	push	{r4, r5, r6, lr}
 80041fe:	4e0e      	ldr	r6, [pc, #56]	; (8004238 <sbrk_aligned+0x3c>)
 8004200:	460c      	mov	r4, r1
 8004202:	6831      	ldr	r1, [r6, #0]
 8004204:	4605      	mov	r5, r0
 8004206:	b911      	cbnz	r1, 800420e <sbrk_aligned+0x12>
 8004208:	f000 fc66 	bl	8004ad8 <_sbrk_r>
 800420c:	6030      	str	r0, [r6, #0]
 800420e:	4621      	mov	r1, r4
 8004210:	4628      	mov	r0, r5
 8004212:	f000 fc61 	bl	8004ad8 <_sbrk_r>
 8004216:	1c43      	adds	r3, r0, #1
 8004218:	d00a      	beq.n	8004230 <sbrk_aligned+0x34>
 800421a:	1cc4      	adds	r4, r0, #3
 800421c:	f024 0403 	bic.w	r4, r4, #3
 8004220:	42a0      	cmp	r0, r4
 8004222:	d007      	beq.n	8004234 <sbrk_aligned+0x38>
 8004224:	1a21      	subs	r1, r4, r0
 8004226:	4628      	mov	r0, r5
 8004228:	f000 fc56 	bl	8004ad8 <_sbrk_r>
 800422c:	3001      	adds	r0, #1
 800422e:	d101      	bne.n	8004234 <sbrk_aligned+0x38>
 8004230:	f04f 34ff 	mov.w	r4, #4294967295
 8004234:	4620      	mov	r0, r4
 8004236:	bd70      	pop	{r4, r5, r6, pc}
 8004238:	200002e8 	.word	0x200002e8

0800423c <_malloc_r>:
 800423c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004240:	1ccd      	adds	r5, r1, #3
 8004242:	f025 0503 	bic.w	r5, r5, #3
 8004246:	3508      	adds	r5, #8
 8004248:	2d0c      	cmp	r5, #12
 800424a:	bf38      	it	cc
 800424c:	250c      	movcc	r5, #12
 800424e:	2d00      	cmp	r5, #0
 8004250:	4607      	mov	r7, r0
 8004252:	db01      	blt.n	8004258 <_malloc_r+0x1c>
 8004254:	42a9      	cmp	r1, r5
 8004256:	d905      	bls.n	8004264 <_malloc_r+0x28>
 8004258:	230c      	movs	r3, #12
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	2600      	movs	r6, #0
 800425e:	4630      	mov	r0, r6
 8004260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004264:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004338 <_malloc_r+0xfc>
 8004268:	f000 f868 	bl	800433c <__malloc_lock>
 800426c:	f8d8 3000 	ldr.w	r3, [r8]
 8004270:	461c      	mov	r4, r3
 8004272:	bb5c      	cbnz	r4, 80042cc <_malloc_r+0x90>
 8004274:	4629      	mov	r1, r5
 8004276:	4638      	mov	r0, r7
 8004278:	f7ff ffc0 	bl	80041fc <sbrk_aligned>
 800427c:	1c43      	adds	r3, r0, #1
 800427e:	4604      	mov	r4, r0
 8004280:	d155      	bne.n	800432e <_malloc_r+0xf2>
 8004282:	f8d8 4000 	ldr.w	r4, [r8]
 8004286:	4626      	mov	r6, r4
 8004288:	2e00      	cmp	r6, #0
 800428a:	d145      	bne.n	8004318 <_malloc_r+0xdc>
 800428c:	2c00      	cmp	r4, #0
 800428e:	d048      	beq.n	8004322 <_malloc_r+0xe6>
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	4631      	mov	r1, r6
 8004294:	4638      	mov	r0, r7
 8004296:	eb04 0903 	add.w	r9, r4, r3
 800429a:	f000 fc1d 	bl	8004ad8 <_sbrk_r>
 800429e:	4581      	cmp	r9, r0
 80042a0:	d13f      	bne.n	8004322 <_malloc_r+0xe6>
 80042a2:	6821      	ldr	r1, [r4, #0]
 80042a4:	1a6d      	subs	r5, r5, r1
 80042a6:	4629      	mov	r1, r5
 80042a8:	4638      	mov	r0, r7
 80042aa:	f7ff ffa7 	bl	80041fc <sbrk_aligned>
 80042ae:	3001      	adds	r0, #1
 80042b0:	d037      	beq.n	8004322 <_malloc_r+0xe6>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	442b      	add	r3, r5
 80042b6:	6023      	str	r3, [r4, #0]
 80042b8:	f8d8 3000 	ldr.w	r3, [r8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d038      	beq.n	8004332 <_malloc_r+0xf6>
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	42a2      	cmp	r2, r4
 80042c4:	d12b      	bne.n	800431e <_malloc_r+0xe2>
 80042c6:	2200      	movs	r2, #0
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	e00f      	b.n	80042ec <_malloc_r+0xb0>
 80042cc:	6822      	ldr	r2, [r4, #0]
 80042ce:	1b52      	subs	r2, r2, r5
 80042d0:	d41f      	bmi.n	8004312 <_malloc_r+0xd6>
 80042d2:	2a0b      	cmp	r2, #11
 80042d4:	d917      	bls.n	8004306 <_malloc_r+0xca>
 80042d6:	1961      	adds	r1, r4, r5
 80042d8:	42a3      	cmp	r3, r4
 80042da:	6025      	str	r5, [r4, #0]
 80042dc:	bf18      	it	ne
 80042de:	6059      	strne	r1, [r3, #4]
 80042e0:	6863      	ldr	r3, [r4, #4]
 80042e2:	bf08      	it	eq
 80042e4:	f8c8 1000 	streq.w	r1, [r8]
 80042e8:	5162      	str	r2, [r4, r5]
 80042ea:	604b      	str	r3, [r1, #4]
 80042ec:	4638      	mov	r0, r7
 80042ee:	f104 060b 	add.w	r6, r4, #11
 80042f2:	f000 f829 	bl	8004348 <__malloc_unlock>
 80042f6:	f026 0607 	bic.w	r6, r6, #7
 80042fa:	1d23      	adds	r3, r4, #4
 80042fc:	1af2      	subs	r2, r6, r3
 80042fe:	d0ae      	beq.n	800425e <_malloc_r+0x22>
 8004300:	1b9b      	subs	r3, r3, r6
 8004302:	50a3      	str	r3, [r4, r2]
 8004304:	e7ab      	b.n	800425e <_malloc_r+0x22>
 8004306:	42a3      	cmp	r3, r4
 8004308:	6862      	ldr	r2, [r4, #4]
 800430a:	d1dd      	bne.n	80042c8 <_malloc_r+0x8c>
 800430c:	f8c8 2000 	str.w	r2, [r8]
 8004310:	e7ec      	b.n	80042ec <_malloc_r+0xb0>
 8004312:	4623      	mov	r3, r4
 8004314:	6864      	ldr	r4, [r4, #4]
 8004316:	e7ac      	b.n	8004272 <_malloc_r+0x36>
 8004318:	4634      	mov	r4, r6
 800431a:	6876      	ldr	r6, [r6, #4]
 800431c:	e7b4      	b.n	8004288 <_malloc_r+0x4c>
 800431e:	4613      	mov	r3, r2
 8004320:	e7cc      	b.n	80042bc <_malloc_r+0x80>
 8004322:	230c      	movs	r3, #12
 8004324:	603b      	str	r3, [r7, #0]
 8004326:	4638      	mov	r0, r7
 8004328:	f000 f80e 	bl	8004348 <__malloc_unlock>
 800432c:	e797      	b.n	800425e <_malloc_r+0x22>
 800432e:	6025      	str	r5, [r4, #0]
 8004330:	e7dc      	b.n	80042ec <_malloc_r+0xb0>
 8004332:	605b      	str	r3, [r3, #4]
 8004334:	deff      	udf	#255	; 0xff
 8004336:	bf00      	nop
 8004338:	200002e4 	.word	0x200002e4

0800433c <__malloc_lock>:
 800433c:	4801      	ldr	r0, [pc, #4]	; (8004344 <__malloc_lock+0x8>)
 800433e:	f7ff bee8 	b.w	8004112 <__retarget_lock_acquire_recursive>
 8004342:	bf00      	nop
 8004344:	200002e0 	.word	0x200002e0

08004348 <__malloc_unlock>:
 8004348:	4801      	ldr	r0, [pc, #4]	; (8004350 <__malloc_unlock+0x8>)
 800434a:	f7ff bee3 	b.w	8004114 <__retarget_lock_release_recursive>
 800434e:	bf00      	nop
 8004350:	200002e0 	.word	0x200002e0

08004354 <__ssputs_r>:
 8004354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004358:	688e      	ldr	r6, [r1, #8]
 800435a:	461f      	mov	r7, r3
 800435c:	42be      	cmp	r6, r7
 800435e:	680b      	ldr	r3, [r1, #0]
 8004360:	4682      	mov	sl, r0
 8004362:	460c      	mov	r4, r1
 8004364:	4690      	mov	r8, r2
 8004366:	d82c      	bhi.n	80043c2 <__ssputs_r+0x6e>
 8004368:	898a      	ldrh	r2, [r1, #12]
 800436a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800436e:	d026      	beq.n	80043be <__ssputs_r+0x6a>
 8004370:	6965      	ldr	r5, [r4, #20]
 8004372:	6909      	ldr	r1, [r1, #16]
 8004374:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004378:	eba3 0901 	sub.w	r9, r3, r1
 800437c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004380:	1c7b      	adds	r3, r7, #1
 8004382:	444b      	add	r3, r9
 8004384:	106d      	asrs	r5, r5, #1
 8004386:	429d      	cmp	r5, r3
 8004388:	bf38      	it	cc
 800438a:	461d      	movcc	r5, r3
 800438c:	0553      	lsls	r3, r2, #21
 800438e:	d527      	bpl.n	80043e0 <__ssputs_r+0x8c>
 8004390:	4629      	mov	r1, r5
 8004392:	f7ff ff53 	bl	800423c <_malloc_r>
 8004396:	4606      	mov	r6, r0
 8004398:	b360      	cbz	r0, 80043f4 <__ssputs_r+0xa0>
 800439a:	6921      	ldr	r1, [r4, #16]
 800439c:	464a      	mov	r2, r9
 800439e:	f000 fbab 	bl	8004af8 <memcpy>
 80043a2:	89a3      	ldrh	r3, [r4, #12]
 80043a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ac:	81a3      	strh	r3, [r4, #12]
 80043ae:	6126      	str	r6, [r4, #16]
 80043b0:	6165      	str	r5, [r4, #20]
 80043b2:	444e      	add	r6, r9
 80043b4:	eba5 0509 	sub.w	r5, r5, r9
 80043b8:	6026      	str	r6, [r4, #0]
 80043ba:	60a5      	str	r5, [r4, #8]
 80043bc:	463e      	mov	r6, r7
 80043be:	42be      	cmp	r6, r7
 80043c0:	d900      	bls.n	80043c4 <__ssputs_r+0x70>
 80043c2:	463e      	mov	r6, r7
 80043c4:	6820      	ldr	r0, [r4, #0]
 80043c6:	4632      	mov	r2, r6
 80043c8:	4641      	mov	r1, r8
 80043ca:	f000 fb6b 	bl	8004aa4 <memmove>
 80043ce:	68a3      	ldr	r3, [r4, #8]
 80043d0:	1b9b      	subs	r3, r3, r6
 80043d2:	60a3      	str	r3, [r4, #8]
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	4433      	add	r3, r6
 80043d8:	6023      	str	r3, [r4, #0]
 80043da:	2000      	movs	r0, #0
 80043dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e0:	462a      	mov	r2, r5
 80043e2:	f000 fb9e 	bl	8004b22 <_realloc_r>
 80043e6:	4606      	mov	r6, r0
 80043e8:	2800      	cmp	r0, #0
 80043ea:	d1e0      	bne.n	80043ae <__ssputs_r+0x5a>
 80043ec:	6921      	ldr	r1, [r4, #16]
 80043ee:	4650      	mov	r0, sl
 80043f0:	f7ff feb0 	bl	8004154 <_free_r>
 80043f4:	230c      	movs	r3, #12
 80043f6:	f8ca 3000 	str.w	r3, [sl]
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004400:	81a3      	strh	r3, [r4, #12]
 8004402:	f04f 30ff 	mov.w	r0, #4294967295
 8004406:	e7e9      	b.n	80043dc <__ssputs_r+0x88>

08004408 <_svfiprintf_r>:
 8004408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800440c:	4698      	mov	r8, r3
 800440e:	898b      	ldrh	r3, [r1, #12]
 8004410:	061b      	lsls	r3, r3, #24
 8004412:	b09d      	sub	sp, #116	; 0x74
 8004414:	4607      	mov	r7, r0
 8004416:	460d      	mov	r5, r1
 8004418:	4614      	mov	r4, r2
 800441a:	d50e      	bpl.n	800443a <_svfiprintf_r+0x32>
 800441c:	690b      	ldr	r3, [r1, #16]
 800441e:	b963      	cbnz	r3, 800443a <_svfiprintf_r+0x32>
 8004420:	2140      	movs	r1, #64	; 0x40
 8004422:	f7ff ff0b 	bl	800423c <_malloc_r>
 8004426:	6028      	str	r0, [r5, #0]
 8004428:	6128      	str	r0, [r5, #16]
 800442a:	b920      	cbnz	r0, 8004436 <_svfiprintf_r+0x2e>
 800442c:	230c      	movs	r3, #12
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	f04f 30ff 	mov.w	r0, #4294967295
 8004434:	e0d0      	b.n	80045d8 <_svfiprintf_r+0x1d0>
 8004436:	2340      	movs	r3, #64	; 0x40
 8004438:	616b      	str	r3, [r5, #20]
 800443a:	2300      	movs	r3, #0
 800443c:	9309      	str	r3, [sp, #36]	; 0x24
 800443e:	2320      	movs	r3, #32
 8004440:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004444:	f8cd 800c 	str.w	r8, [sp, #12]
 8004448:	2330      	movs	r3, #48	; 0x30
 800444a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80045f0 <_svfiprintf_r+0x1e8>
 800444e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004452:	f04f 0901 	mov.w	r9, #1
 8004456:	4623      	mov	r3, r4
 8004458:	469a      	mov	sl, r3
 800445a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800445e:	b10a      	cbz	r2, 8004464 <_svfiprintf_r+0x5c>
 8004460:	2a25      	cmp	r2, #37	; 0x25
 8004462:	d1f9      	bne.n	8004458 <_svfiprintf_r+0x50>
 8004464:	ebba 0b04 	subs.w	fp, sl, r4
 8004468:	d00b      	beq.n	8004482 <_svfiprintf_r+0x7a>
 800446a:	465b      	mov	r3, fp
 800446c:	4622      	mov	r2, r4
 800446e:	4629      	mov	r1, r5
 8004470:	4638      	mov	r0, r7
 8004472:	f7ff ff6f 	bl	8004354 <__ssputs_r>
 8004476:	3001      	adds	r0, #1
 8004478:	f000 80a9 	beq.w	80045ce <_svfiprintf_r+0x1c6>
 800447c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800447e:	445a      	add	r2, fp
 8004480:	9209      	str	r2, [sp, #36]	; 0x24
 8004482:	f89a 3000 	ldrb.w	r3, [sl]
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 80a1 	beq.w	80045ce <_svfiprintf_r+0x1c6>
 800448c:	2300      	movs	r3, #0
 800448e:	f04f 32ff 	mov.w	r2, #4294967295
 8004492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004496:	f10a 0a01 	add.w	sl, sl, #1
 800449a:	9304      	str	r3, [sp, #16]
 800449c:	9307      	str	r3, [sp, #28]
 800449e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044a2:	931a      	str	r3, [sp, #104]	; 0x68
 80044a4:	4654      	mov	r4, sl
 80044a6:	2205      	movs	r2, #5
 80044a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ac:	4850      	ldr	r0, [pc, #320]	; (80045f0 <_svfiprintf_r+0x1e8>)
 80044ae:	f7fb fe9f 	bl	80001f0 <memchr>
 80044b2:	9a04      	ldr	r2, [sp, #16]
 80044b4:	b9d8      	cbnz	r0, 80044ee <_svfiprintf_r+0xe6>
 80044b6:	06d0      	lsls	r0, r2, #27
 80044b8:	bf44      	itt	mi
 80044ba:	2320      	movmi	r3, #32
 80044bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044c0:	0711      	lsls	r1, r2, #28
 80044c2:	bf44      	itt	mi
 80044c4:	232b      	movmi	r3, #43	; 0x2b
 80044c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044ca:	f89a 3000 	ldrb.w	r3, [sl]
 80044ce:	2b2a      	cmp	r3, #42	; 0x2a
 80044d0:	d015      	beq.n	80044fe <_svfiprintf_r+0xf6>
 80044d2:	9a07      	ldr	r2, [sp, #28]
 80044d4:	4654      	mov	r4, sl
 80044d6:	2000      	movs	r0, #0
 80044d8:	f04f 0c0a 	mov.w	ip, #10
 80044dc:	4621      	mov	r1, r4
 80044de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044e2:	3b30      	subs	r3, #48	; 0x30
 80044e4:	2b09      	cmp	r3, #9
 80044e6:	d94d      	bls.n	8004584 <_svfiprintf_r+0x17c>
 80044e8:	b1b0      	cbz	r0, 8004518 <_svfiprintf_r+0x110>
 80044ea:	9207      	str	r2, [sp, #28]
 80044ec:	e014      	b.n	8004518 <_svfiprintf_r+0x110>
 80044ee:	eba0 0308 	sub.w	r3, r0, r8
 80044f2:	fa09 f303 	lsl.w	r3, r9, r3
 80044f6:	4313      	orrs	r3, r2
 80044f8:	9304      	str	r3, [sp, #16]
 80044fa:	46a2      	mov	sl, r4
 80044fc:	e7d2      	b.n	80044a4 <_svfiprintf_r+0x9c>
 80044fe:	9b03      	ldr	r3, [sp, #12]
 8004500:	1d19      	adds	r1, r3, #4
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	9103      	str	r1, [sp, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	bfbb      	ittet	lt
 800450a:	425b      	neglt	r3, r3
 800450c:	f042 0202 	orrlt.w	r2, r2, #2
 8004510:	9307      	strge	r3, [sp, #28]
 8004512:	9307      	strlt	r3, [sp, #28]
 8004514:	bfb8      	it	lt
 8004516:	9204      	strlt	r2, [sp, #16]
 8004518:	7823      	ldrb	r3, [r4, #0]
 800451a:	2b2e      	cmp	r3, #46	; 0x2e
 800451c:	d10c      	bne.n	8004538 <_svfiprintf_r+0x130>
 800451e:	7863      	ldrb	r3, [r4, #1]
 8004520:	2b2a      	cmp	r3, #42	; 0x2a
 8004522:	d134      	bne.n	800458e <_svfiprintf_r+0x186>
 8004524:	9b03      	ldr	r3, [sp, #12]
 8004526:	1d1a      	adds	r2, r3, #4
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	9203      	str	r2, [sp, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	bfb8      	it	lt
 8004530:	f04f 33ff 	movlt.w	r3, #4294967295
 8004534:	3402      	adds	r4, #2
 8004536:	9305      	str	r3, [sp, #20]
 8004538:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004600 <_svfiprintf_r+0x1f8>
 800453c:	7821      	ldrb	r1, [r4, #0]
 800453e:	2203      	movs	r2, #3
 8004540:	4650      	mov	r0, sl
 8004542:	f7fb fe55 	bl	80001f0 <memchr>
 8004546:	b138      	cbz	r0, 8004558 <_svfiprintf_r+0x150>
 8004548:	9b04      	ldr	r3, [sp, #16]
 800454a:	eba0 000a 	sub.w	r0, r0, sl
 800454e:	2240      	movs	r2, #64	; 0x40
 8004550:	4082      	lsls	r2, r0
 8004552:	4313      	orrs	r3, r2
 8004554:	3401      	adds	r4, #1
 8004556:	9304      	str	r3, [sp, #16]
 8004558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800455c:	4825      	ldr	r0, [pc, #148]	; (80045f4 <_svfiprintf_r+0x1ec>)
 800455e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004562:	2206      	movs	r2, #6
 8004564:	f7fb fe44 	bl	80001f0 <memchr>
 8004568:	2800      	cmp	r0, #0
 800456a:	d038      	beq.n	80045de <_svfiprintf_r+0x1d6>
 800456c:	4b22      	ldr	r3, [pc, #136]	; (80045f8 <_svfiprintf_r+0x1f0>)
 800456e:	bb1b      	cbnz	r3, 80045b8 <_svfiprintf_r+0x1b0>
 8004570:	9b03      	ldr	r3, [sp, #12]
 8004572:	3307      	adds	r3, #7
 8004574:	f023 0307 	bic.w	r3, r3, #7
 8004578:	3308      	adds	r3, #8
 800457a:	9303      	str	r3, [sp, #12]
 800457c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800457e:	4433      	add	r3, r6
 8004580:	9309      	str	r3, [sp, #36]	; 0x24
 8004582:	e768      	b.n	8004456 <_svfiprintf_r+0x4e>
 8004584:	fb0c 3202 	mla	r2, ip, r2, r3
 8004588:	460c      	mov	r4, r1
 800458a:	2001      	movs	r0, #1
 800458c:	e7a6      	b.n	80044dc <_svfiprintf_r+0xd4>
 800458e:	2300      	movs	r3, #0
 8004590:	3401      	adds	r4, #1
 8004592:	9305      	str	r3, [sp, #20]
 8004594:	4619      	mov	r1, r3
 8004596:	f04f 0c0a 	mov.w	ip, #10
 800459a:	4620      	mov	r0, r4
 800459c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045a0:	3a30      	subs	r2, #48	; 0x30
 80045a2:	2a09      	cmp	r2, #9
 80045a4:	d903      	bls.n	80045ae <_svfiprintf_r+0x1a6>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0c6      	beq.n	8004538 <_svfiprintf_r+0x130>
 80045aa:	9105      	str	r1, [sp, #20]
 80045ac:	e7c4      	b.n	8004538 <_svfiprintf_r+0x130>
 80045ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80045b2:	4604      	mov	r4, r0
 80045b4:	2301      	movs	r3, #1
 80045b6:	e7f0      	b.n	800459a <_svfiprintf_r+0x192>
 80045b8:	ab03      	add	r3, sp, #12
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	462a      	mov	r2, r5
 80045be:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <_svfiprintf_r+0x1f4>)
 80045c0:	a904      	add	r1, sp, #16
 80045c2:	4638      	mov	r0, r7
 80045c4:	f3af 8000 	nop.w
 80045c8:	1c42      	adds	r2, r0, #1
 80045ca:	4606      	mov	r6, r0
 80045cc:	d1d6      	bne.n	800457c <_svfiprintf_r+0x174>
 80045ce:	89ab      	ldrh	r3, [r5, #12]
 80045d0:	065b      	lsls	r3, r3, #25
 80045d2:	f53f af2d 	bmi.w	8004430 <_svfiprintf_r+0x28>
 80045d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045d8:	b01d      	add	sp, #116	; 0x74
 80045da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045de:	ab03      	add	r3, sp, #12
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	462a      	mov	r2, r5
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <_svfiprintf_r+0x1f4>)
 80045e6:	a904      	add	r1, sp, #16
 80045e8:	4638      	mov	r0, r7
 80045ea:	f000 f879 	bl	80046e0 <_printf_i>
 80045ee:	e7eb      	b.n	80045c8 <_svfiprintf_r+0x1c0>
 80045f0:	080052cf 	.word	0x080052cf
 80045f4:	080052d9 	.word	0x080052d9
 80045f8:	00000000 	.word	0x00000000
 80045fc:	08004355 	.word	0x08004355
 8004600:	080052d5 	.word	0x080052d5

08004604 <_printf_common>:
 8004604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004608:	4616      	mov	r6, r2
 800460a:	4699      	mov	r9, r3
 800460c:	688a      	ldr	r2, [r1, #8]
 800460e:	690b      	ldr	r3, [r1, #16]
 8004610:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004614:	4293      	cmp	r3, r2
 8004616:	bfb8      	it	lt
 8004618:	4613      	movlt	r3, r2
 800461a:	6033      	str	r3, [r6, #0]
 800461c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004620:	4607      	mov	r7, r0
 8004622:	460c      	mov	r4, r1
 8004624:	b10a      	cbz	r2, 800462a <_printf_common+0x26>
 8004626:	3301      	adds	r3, #1
 8004628:	6033      	str	r3, [r6, #0]
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	0699      	lsls	r1, r3, #26
 800462e:	bf42      	ittt	mi
 8004630:	6833      	ldrmi	r3, [r6, #0]
 8004632:	3302      	addmi	r3, #2
 8004634:	6033      	strmi	r3, [r6, #0]
 8004636:	6825      	ldr	r5, [r4, #0]
 8004638:	f015 0506 	ands.w	r5, r5, #6
 800463c:	d106      	bne.n	800464c <_printf_common+0x48>
 800463e:	f104 0a19 	add.w	sl, r4, #25
 8004642:	68e3      	ldr	r3, [r4, #12]
 8004644:	6832      	ldr	r2, [r6, #0]
 8004646:	1a9b      	subs	r3, r3, r2
 8004648:	42ab      	cmp	r3, r5
 800464a:	dc26      	bgt.n	800469a <_printf_common+0x96>
 800464c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004650:	1e13      	subs	r3, r2, #0
 8004652:	6822      	ldr	r2, [r4, #0]
 8004654:	bf18      	it	ne
 8004656:	2301      	movne	r3, #1
 8004658:	0692      	lsls	r2, r2, #26
 800465a:	d42b      	bmi.n	80046b4 <_printf_common+0xb0>
 800465c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004660:	4649      	mov	r1, r9
 8004662:	4638      	mov	r0, r7
 8004664:	47c0      	blx	r8
 8004666:	3001      	adds	r0, #1
 8004668:	d01e      	beq.n	80046a8 <_printf_common+0xa4>
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	6922      	ldr	r2, [r4, #16]
 800466e:	f003 0306 	and.w	r3, r3, #6
 8004672:	2b04      	cmp	r3, #4
 8004674:	bf02      	ittt	eq
 8004676:	68e5      	ldreq	r5, [r4, #12]
 8004678:	6833      	ldreq	r3, [r6, #0]
 800467a:	1aed      	subeq	r5, r5, r3
 800467c:	68a3      	ldr	r3, [r4, #8]
 800467e:	bf0c      	ite	eq
 8004680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004684:	2500      	movne	r5, #0
 8004686:	4293      	cmp	r3, r2
 8004688:	bfc4      	itt	gt
 800468a:	1a9b      	subgt	r3, r3, r2
 800468c:	18ed      	addgt	r5, r5, r3
 800468e:	2600      	movs	r6, #0
 8004690:	341a      	adds	r4, #26
 8004692:	42b5      	cmp	r5, r6
 8004694:	d11a      	bne.n	80046cc <_printf_common+0xc8>
 8004696:	2000      	movs	r0, #0
 8004698:	e008      	b.n	80046ac <_printf_common+0xa8>
 800469a:	2301      	movs	r3, #1
 800469c:	4652      	mov	r2, sl
 800469e:	4649      	mov	r1, r9
 80046a0:	4638      	mov	r0, r7
 80046a2:	47c0      	blx	r8
 80046a4:	3001      	adds	r0, #1
 80046a6:	d103      	bne.n	80046b0 <_printf_common+0xac>
 80046a8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b0:	3501      	adds	r5, #1
 80046b2:	e7c6      	b.n	8004642 <_printf_common+0x3e>
 80046b4:	18e1      	adds	r1, r4, r3
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	2030      	movs	r0, #48	; 0x30
 80046ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046be:	4422      	add	r2, r4
 80046c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046c8:	3302      	adds	r3, #2
 80046ca:	e7c7      	b.n	800465c <_printf_common+0x58>
 80046cc:	2301      	movs	r3, #1
 80046ce:	4622      	mov	r2, r4
 80046d0:	4649      	mov	r1, r9
 80046d2:	4638      	mov	r0, r7
 80046d4:	47c0      	blx	r8
 80046d6:	3001      	adds	r0, #1
 80046d8:	d0e6      	beq.n	80046a8 <_printf_common+0xa4>
 80046da:	3601      	adds	r6, #1
 80046dc:	e7d9      	b.n	8004692 <_printf_common+0x8e>
	...

080046e0 <_printf_i>:
 80046e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046e4:	7e0f      	ldrb	r7, [r1, #24]
 80046e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046e8:	2f78      	cmp	r7, #120	; 0x78
 80046ea:	4691      	mov	r9, r2
 80046ec:	4680      	mov	r8, r0
 80046ee:	460c      	mov	r4, r1
 80046f0:	469a      	mov	sl, r3
 80046f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046f6:	d807      	bhi.n	8004708 <_printf_i+0x28>
 80046f8:	2f62      	cmp	r7, #98	; 0x62
 80046fa:	d80a      	bhi.n	8004712 <_printf_i+0x32>
 80046fc:	2f00      	cmp	r7, #0
 80046fe:	f000 80d4 	beq.w	80048aa <_printf_i+0x1ca>
 8004702:	2f58      	cmp	r7, #88	; 0x58
 8004704:	f000 80c0 	beq.w	8004888 <_printf_i+0x1a8>
 8004708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800470c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004710:	e03a      	b.n	8004788 <_printf_i+0xa8>
 8004712:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004716:	2b15      	cmp	r3, #21
 8004718:	d8f6      	bhi.n	8004708 <_printf_i+0x28>
 800471a:	a101      	add	r1, pc, #4	; (adr r1, 8004720 <_printf_i+0x40>)
 800471c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004720:	08004779 	.word	0x08004779
 8004724:	0800478d 	.word	0x0800478d
 8004728:	08004709 	.word	0x08004709
 800472c:	08004709 	.word	0x08004709
 8004730:	08004709 	.word	0x08004709
 8004734:	08004709 	.word	0x08004709
 8004738:	0800478d 	.word	0x0800478d
 800473c:	08004709 	.word	0x08004709
 8004740:	08004709 	.word	0x08004709
 8004744:	08004709 	.word	0x08004709
 8004748:	08004709 	.word	0x08004709
 800474c:	08004891 	.word	0x08004891
 8004750:	080047b9 	.word	0x080047b9
 8004754:	0800484b 	.word	0x0800484b
 8004758:	08004709 	.word	0x08004709
 800475c:	08004709 	.word	0x08004709
 8004760:	080048b3 	.word	0x080048b3
 8004764:	08004709 	.word	0x08004709
 8004768:	080047b9 	.word	0x080047b9
 800476c:	08004709 	.word	0x08004709
 8004770:	08004709 	.word	0x08004709
 8004774:	08004853 	.word	0x08004853
 8004778:	682b      	ldr	r3, [r5, #0]
 800477a:	1d1a      	adds	r2, r3, #4
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	602a      	str	r2, [r5, #0]
 8004780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004788:	2301      	movs	r3, #1
 800478a:	e09f      	b.n	80048cc <_printf_i+0x1ec>
 800478c:	6820      	ldr	r0, [r4, #0]
 800478e:	682b      	ldr	r3, [r5, #0]
 8004790:	0607      	lsls	r7, r0, #24
 8004792:	f103 0104 	add.w	r1, r3, #4
 8004796:	6029      	str	r1, [r5, #0]
 8004798:	d501      	bpl.n	800479e <_printf_i+0xbe>
 800479a:	681e      	ldr	r6, [r3, #0]
 800479c:	e003      	b.n	80047a6 <_printf_i+0xc6>
 800479e:	0646      	lsls	r6, r0, #25
 80047a0:	d5fb      	bpl.n	800479a <_printf_i+0xba>
 80047a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80047a6:	2e00      	cmp	r6, #0
 80047a8:	da03      	bge.n	80047b2 <_printf_i+0xd2>
 80047aa:	232d      	movs	r3, #45	; 0x2d
 80047ac:	4276      	negs	r6, r6
 80047ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047b2:	485a      	ldr	r0, [pc, #360]	; (800491c <_printf_i+0x23c>)
 80047b4:	230a      	movs	r3, #10
 80047b6:	e012      	b.n	80047de <_printf_i+0xfe>
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	6820      	ldr	r0, [r4, #0]
 80047bc:	1d19      	adds	r1, r3, #4
 80047be:	6029      	str	r1, [r5, #0]
 80047c0:	0605      	lsls	r5, r0, #24
 80047c2:	d501      	bpl.n	80047c8 <_printf_i+0xe8>
 80047c4:	681e      	ldr	r6, [r3, #0]
 80047c6:	e002      	b.n	80047ce <_printf_i+0xee>
 80047c8:	0641      	lsls	r1, r0, #25
 80047ca:	d5fb      	bpl.n	80047c4 <_printf_i+0xe4>
 80047cc:	881e      	ldrh	r6, [r3, #0]
 80047ce:	4853      	ldr	r0, [pc, #332]	; (800491c <_printf_i+0x23c>)
 80047d0:	2f6f      	cmp	r7, #111	; 0x6f
 80047d2:	bf0c      	ite	eq
 80047d4:	2308      	moveq	r3, #8
 80047d6:	230a      	movne	r3, #10
 80047d8:	2100      	movs	r1, #0
 80047da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047de:	6865      	ldr	r5, [r4, #4]
 80047e0:	60a5      	str	r5, [r4, #8]
 80047e2:	2d00      	cmp	r5, #0
 80047e4:	bfa2      	ittt	ge
 80047e6:	6821      	ldrge	r1, [r4, #0]
 80047e8:	f021 0104 	bicge.w	r1, r1, #4
 80047ec:	6021      	strge	r1, [r4, #0]
 80047ee:	b90e      	cbnz	r6, 80047f4 <_printf_i+0x114>
 80047f0:	2d00      	cmp	r5, #0
 80047f2:	d04b      	beq.n	800488c <_printf_i+0x1ac>
 80047f4:	4615      	mov	r5, r2
 80047f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80047fa:	fb03 6711 	mls	r7, r3, r1, r6
 80047fe:	5dc7      	ldrb	r7, [r0, r7]
 8004800:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004804:	4637      	mov	r7, r6
 8004806:	42bb      	cmp	r3, r7
 8004808:	460e      	mov	r6, r1
 800480a:	d9f4      	bls.n	80047f6 <_printf_i+0x116>
 800480c:	2b08      	cmp	r3, #8
 800480e:	d10b      	bne.n	8004828 <_printf_i+0x148>
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	07de      	lsls	r6, r3, #31
 8004814:	d508      	bpl.n	8004828 <_printf_i+0x148>
 8004816:	6923      	ldr	r3, [r4, #16]
 8004818:	6861      	ldr	r1, [r4, #4]
 800481a:	4299      	cmp	r1, r3
 800481c:	bfde      	ittt	le
 800481e:	2330      	movle	r3, #48	; 0x30
 8004820:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004824:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004828:	1b52      	subs	r2, r2, r5
 800482a:	6122      	str	r2, [r4, #16]
 800482c:	f8cd a000 	str.w	sl, [sp]
 8004830:	464b      	mov	r3, r9
 8004832:	aa03      	add	r2, sp, #12
 8004834:	4621      	mov	r1, r4
 8004836:	4640      	mov	r0, r8
 8004838:	f7ff fee4 	bl	8004604 <_printf_common>
 800483c:	3001      	adds	r0, #1
 800483e:	d14a      	bne.n	80048d6 <_printf_i+0x1f6>
 8004840:	f04f 30ff 	mov.w	r0, #4294967295
 8004844:	b004      	add	sp, #16
 8004846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	f043 0320 	orr.w	r3, r3, #32
 8004850:	6023      	str	r3, [r4, #0]
 8004852:	4833      	ldr	r0, [pc, #204]	; (8004920 <_printf_i+0x240>)
 8004854:	2778      	movs	r7, #120	; 0x78
 8004856:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	6829      	ldr	r1, [r5, #0]
 800485e:	061f      	lsls	r7, r3, #24
 8004860:	f851 6b04 	ldr.w	r6, [r1], #4
 8004864:	d402      	bmi.n	800486c <_printf_i+0x18c>
 8004866:	065f      	lsls	r7, r3, #25
 8004868:	bf48      	it	mi
 800486a:	b2b6      	uxthmi	r6, r6
 800486c:	07df      	lsls	r7, r3, #31
 800486e:	bf48      	it	mi
 8004870:	f043 0320 	orrmi.w	r3, r3, #32
 8004874:	6029      	str	r1, [r5, #0]
 8004876:	bf48      	it	mi
 8004878:	6023      	strmi	r3, [r4, #0]
 800487a:	b91e      	cbnz	r6, 8004884 <_printf_i+0x1a4>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	f023 0320 	bic.w	r3, r3, #32
 8004882:	6023      	str	r3, [r4, #0]
 8004884:	2310      	movs	r3, #16
 8004886:	e7a7      	b.n	80047d8 <_printf_i+0xf8>
 8004888:	4824      	ldr	r0, [pc, #144]	; (800491c <_printf_i+0x23c>)
 800488a:	e7e4      	b.n	8004856 <_printf_i+0x176>
 800488c:	4615      	mov	r5, r2
 800488e:	e7bd      	b.n	800480c <_printf_i+0x12c>
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	6826      	ldr	r6, [r4, #0]
 8004894:	6961      	ldr	r1, [r4, #20]
 8004896:	1d18      	adds	r0, r3, #4
 8004898:	6028      	str	r0, [r5, #0]
 800489a:	0635      	lsls	r5, r6, #24
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	d501      	bpl.n	80048a4 <_printf_i+0x1c4>
 80048a0:	6019      	str	r1, [r3, #0]
 80048a2:	e002      	b.n	80048aa <_printf_i+0x1ca>
 80048a4:	0670      	lsls	r0, r6, #25
 80048a6:	d5fb      	bpl.n	80048a0 <_printf_i+0x1c0>
 80048a8:	8019      	strh	r1, [r3, #0]
 80048aa:	2300      	movs	r3, #0
 80048ac:	6123      	str	r3, [r4, #16]
 80048ae:	4615      	mov	r5, r2
 80048b0:	e7bc      	b.n	800482c <_printf_i+0x14c>
 80048b2:	682b      	ldr	r3, [r5, #0]
 80048b4:	1d1a      	adds	r2, r3, #4
 80048b6:	602a      	str	r2, [r5, #0]
 80048b8:	681d      	ldr	r5, [r3, #0]
 80048ba:	6862      	ldr	r2, [r4, #4]
 80048bc:	2100      	movs	r1, #0
 80048be:	4628      	mov	r0, r5
 80048c0:	f7fb fc96 	bl	80001f0 <memchr>
 80048c4:	b108      	cbz	r0, 80048ca <_printf_i+0x1ea>
 80048c6:	1b40      	subs	r0, r0, r5
 80048c8:	6060      	str	r0, [r4, #4]
 80048ca:	6863      	ldr	r3, [r4, #4]
 80048cc:	6123      	str	r3, [r4, #16]
 80048ce:	2300      	movs	r3, #0
 80048d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048d4:	e7aa      	b.n	800482c <_printf_i+0x14c>
 80048d6:	6923      	ldr	r3, [r4, #16]
 80048d8:	462a      	mov	r2, r5
 80048da:	4649      	mov	r1, r9
 80048dc:	4640      	mov	r0, r8
 80048de:	47d0      	blx	sl
 80048e0:	3001      	adds	r0, #1
 80048e2:	d0ad      	beq.n	8004840 <_printf_i+0x160>
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	079b      	lsls	r3, r3, #30
 80048e8:	d413      	bmi.n	8004912 <_printf_i+0x232>
 80048ea:	68e0      	ldr	r0, [r4, #12]
 80048ec:	9b03      	ldr	r3, [sp, #12]
 80048ee:	4298      	cmp	r0, r3
 80048f0:	bfb8      	it	lt
 80048f2:	4618      	movlt	r0, r3
 80048f4:	e7a6      	b.n	8004844 <_printf_i+0x164>
 80048f6:	2301      	movs	r3, #1
 80048f8:	4632      	mov	r2, r6
 80048fa:	4649      	mov	r1, r9
 80048fc:	4640      	mov	r0, r8
 80048fe:	47d0      	blx	sl
 8004900:	3001      	adds	r0, #1
 8004902:	d09d      	beq.n	8004840 <_printf_i+0x160>
 8004904:	3501      	adds	r5, #1
 8004906:	68e3      	ldr	r3, [r4, #12]
 8004908:	9903      	ldr	r1, [sp, #12]
 800490a:	1a5b      	subs	r3, r3, r1
 800490c:	42ab      	cmp	r3, r5
 800490e:	dcf2      	bgt.n	80048f6 <_printf_i+0x216>
 8004910:	e7eb      	b.n	80048ea <_printf_i+0x20a>
 8004912:	2500      	movs	r5, #0
 8004914:	f104 0619 	add.w	r6, r4, #25
 8004918:	e7f5      	b.n	8004906 <_printf_i+0x226>
 800491a:	bf00      	nop
 800491c:	080052e0 	.word	0x080052e0
 8004920:	080052f1 	.word	0x080052f1

08004924 <__sflush_r>:
 8004924:	898a      	ldrh	r2, [r1, #12]
 8004926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800492a:	4605      	mov	r5, r0
 800492c:	0710      	lsls	r0, r2, #28
 800492e:	460c      	mov	r4, r1
 8004930:	d458      	bmi.n	80049e4 <__sflush_r+0xc0>
 8004932:	684b      	ldr	r3, [r1, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	dc05      	bgt.n	8004944 <__sflush_r+0x20>
 8004938:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	dc02      	bgt.n	8004944 <__sflush_r+0x20>
 800493e:	2000      	movs	r0, #0
 8004940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004946:	2e00      	cmp	r6, #0
 8004948:	d0f9      	beq.n	800493e <__sflush_r+0x1a>
 800494a:	2300      	movs	r3, #0
 800494c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004950:	682f      	ldr	r7, [r5, #0]
 8004952:	6a21      	ldr	r1, [r4, #32]
 8004954:	602b      	str	r3, [r5, #0]
 8004956:	d032      	beq.n	80049be <__sflush_r+0x9a>
 8004958:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800495a:	89a3      	ldrh	r3, [r4, #12]
 800495c:	075a      	lsls	r2, r3, #29
 800495e:	d505      	bpl.n	800496c <__sflush_r+0x48>
 8004960:	6863      	ldr	r3, [r4, #4]
 8004962:	1ac0      	subs	r0, r0, r3
 8004964:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004966:	b10b      	cbz	r3, 800496c <__sflush_r+0x48>
 8004968:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800496a:	1ac0      	subs	r0, r0, r3
 800496c:	2300      	movs	r3, #0
 800496e:	4602      	mov	r2, r0
 8004970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004972:	6a21      	ldr	r1, [r4, #32]
 8004974:	4628      	mov	r0, r5
 8004976:	47b0      	blx	r6
 8004978:	1c43      	adds	r3, r0, #1
 800497a:	89a3      	ldrh	r3, [r4, #12]
 800497c:	d106      	bne.n	800498c <__sflush_r+0x68>
 800497e:	6829      	ldr	r1, [r5, #0]
 8004980:	291d      	cmp	r1, #29
 8004982:	d82b      	bhi.n	80049dc <__sflush_r+0xb8>
 8004984:	4a29      	ldr	r2, [pc, #164]	; (8004a2c <__sflush_r+0x108>)
 8004986:	410a      	asrs	r2, r1
 8004988:	07d6      	lsls	r6, r2, #31
 800498a:	d427      	bmi.n	80049dc <__sflush_r+0xb8>
 800498c:	2200      	movs	r2, #0
 800498e:	6062      	str	r2, [r4, #4]
 8004990:	04d9      	lsls	r1, r3, #19
 8004992:	6922      	ldr	r2, [r4, #16]
 8004994:	6022      	str	r2, [r4, #0]
 8004996:	d504      	bpl.n	80049a2 <__sflush_r+0x7e>
 8004998:	1c42      	adds	r2, r0, #1
 800499a:	d101      	bne.n	80049a0 <__sflush_r+0x7c>
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	b903      	cbnz	r3, 80049a2 <__sflush_r+0x7e>
 80049a0:	6560      	str	r0, [r4, #84]	; 0x54
 80049a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049a4:	602f      	str	r7, [r5, #0]
 80049a6:	2900      	cmp	r1, #0
 80049a8:	d0c9      	beq.n	800493e <__sflush_r+0x1a>
 80049aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049ae:	4299      	cmp	r1, r3
 80049b0:	d002      	beq.n	80049b8 <__sflush_r+0x94>
 80049b2:	4628      	mov	r0, r5
 80049b4:	f7ff fbce 	bl	8004154 <_free_r>
 80049b8:	2000      	movs	r0, #0
 80049ba:	6360      	str	r0, [r4, #52]	; 0x34
 80049bc:	e7c0      	b.n	8004940 <__sflush_r+0x1c>
 80049be:	2301      	movs	r3, #1
 80049c0:	4628      	mov	r0, r5
 80049c2:	47b0      	blx	r6
 80049c4:	1c41      	adds	r1, r0, #1
 80049c6:	d1c8      	bne.n	800495a <__sflush_r+0x36>
 80049c8:	682b      	ldr	r3, [r5, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0c5      	beq.n	800495a <__sflush_r+0x36>
 80049ce:	2b1d      	cmp	r3, #29
 80049d0:	d001      	beq.n	80049d6 <__sflush_r+0xb2>
 80049d2:	2b16      	cmp	r3, #22
 80049d4:	d101      	bne.n	80049da <__sflush_r+0xb6>
 80049d6:	602f      	str	r7, [r5, #0]
 80049d8:	e7b1      	b.n	800493e <__sflush_r+0x1a>
 80049da:	89a3      	ldrh	r3, [r4, #12]
 80049dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049e0:	81a3      	strh	r3, [r4, #12]
 80049e2:	e7ad      	b.n	8004940 <__sflush_r+0x1c>
 80049e4:	690f      	ldr	r7, [r1, #16]
 80049e6:	2f00      	cmp	r7, #0
 80049e8:	d0a9      	beq.n	800493e <__sflush_r+0x1a>
 80049ea:	0793      	lsls	r3, r2, #30
 80049ec:	680e      	ldr	r6, [r1, #0]
 80049ee:	bf08      	it	eq
 80049f0:	694b      	ldreq	r3, [r1, #20]
 80049f2:	600f      	str	r7, [r1, #0]
 80049f4:	bf18      	it	ne
 80049f6:	2300      	movne	r3, #0
 80049f8:	eba6 0807 	sub.w	r8, r6, r7
 80049fc:	608b      	str	r3, [r1, #8]
 80049fe:	f1b8 0f00 	cmp.w	r8, #0
 8004a02:	dd9c      	ble.n	800493e <__sflush_r+0x1a>
 8004a04:	6a21      	ldr	r1, [r4, #32]
 8004a06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a08:	4643      	mov	r3, r8
 8004a0a:	463a      	mov	r2, r7
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	47b0      	blx	r6
 8004a10:	2800      	cmp	r0, #0
 8004a12:	dc06      	bgt.n	8004a22 <__sflush_r+0xfe>
 8004a14:	89a3      	ldrh	r3, [r4, #12]
 8004a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a1a:	81a3      	strh	r3, [r4, #12]
 8004a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a20:	e78e      	b.n	8004940 <__sflush_r+0x1c>
 8004a22:	4407      	add	r7, r0
 8004a24:	eba8 0800 	sub.w	r8, r8, r0
 8004a28:	e7e9      	b.n	80049fe <__sflush_r+0xda>
 8004a2a:	bf00      	nop
 8004a2c:	dfbffffe 	.word	0xdfbffffe

08004a30 <_fflush_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	690b      	ldr	r3, [r1, #16]
 8004a34:	4605      	mov	r5, r0
 8004a36:	460c      	mov	r4, r1
 8004a38:	b913      	cbnz	r3, 8004a40 <_fflush_r+0x10>
 8004a3a:	2500      	movs	r5, #0
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	bd38      	pop	{r3, r4, r5, pc}
 8004a40:	b118      	cbz	r0, 8004a4a <_fflush_r+0x1a>
 8004a42:	6a03      	ldr	r3, [r0, #32]
 8004a44:	b90b      	cbnz	r3, 8004a4a <_fflush_r+0x1a>
 8004a46:	f7ff fa39 	bl	8003ebc <__sinit>
 8004a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f3      	beq.n	8004a3a <_fflush_r+0xa>
 8004a52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a54:	07d0      	lsls	r0, r2, #31
 8004a56:	d404      	bmi.n	8004a62 <_fflush_r+0x32>
 8004a58:	0599      	lsls	r1, r3, #22
 8004a5a:	d402      	bmi.n	8004a62 <_fflush_r+0x32>
 8004a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a5e:	f7ff fb58 	bl	8004112 <__retarget_lock_acquire_recursive>
 8004a62:	4628      	mov	r0, r5
 8004a64:	4621      	mov	r1, r4
 8004a66:	f7ff ff5d 	bl	8004924 <__sflush_r>
 8004a6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a6c:	07da      	lsls	r2, r3, #31
 8004a6e:	4605      	mov	r5, r0
 8004a70:	d4e4      	bmi.n	8004a3c <_fflush_r+0xc>
 8004a72:	89a3      	ldrh	r3, [r4, #12]
 8004a74:	059b      	lsls	r3, r3, #22
 8004a76:	d4e1      	bmi.n	8004a3c <_fflush_r+0xc>
 8004a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a7a:	f7ff fb4b 	bl	8004114 <__retarget_lock_release_recursive>
 8004a7e:	e7dd      	b.n	8004a3c <_fflush_r+0xc>

08004a80 <fiprintf>:
 8004a80:	b40e      	push	{r1, r2, r3}
 8004a82:	b503      	push	{r0, r1, lr}
 8004a84:	4601      	mov	r1, r0
 8004a86:	ab03      	add	r3, sp, #12
 8004a88:	4805      	ldr	r0, [pc, #20]	; (8004aa0 <fiprintf+0x20>)
 8004a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a8e:	6800      	ldr	r0, [r0, #0]
 8004a90:	9301      	str	r3, [sp, #4]
 8004a92:	f000 f89f 	bl	8004bd4 <_vfiprintf_r>
 8004a96:	b002      	add	sp, #8
 8004a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a9c:	b003      	add	sp, #12
 8004a9e:	4770      	bx	lr
 8004aa0:	20000064 	.word	0x20000064

08004aa4 <memmove>:
 8004aa4:	4288      	cmp	r0, r1
 8004aa6:	b510      	push	{r4, lr}
 8004aa8:	eb01 0402 	add.w	r4, r1, r2
 8004aac:	d902      	bls.n	8004ab4 <memmove+0x10>
 8004aae:	4284      	cmp	r4, r0
 8004ab0:	4623      	mov	r3, r4
 8004ab2:	d807      	bhi.n	8004ac4 <memmove+0x20>
 8004ab4:	1e43      	subs	r3, r0, #1
 8004ab6:	42a1      	cmp	r1, r4
 8004ab8:	d008      	beq.n	8004acc <memmove+0x28>
 8004aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004abe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ac2:	e7f8      	b.n	8004ab6 <memmove+0x12>
 8004ac4:	4402      	add	r2, r0
 8004ac6:	4601      	mov	r1, r0
 8004ac8:	428a      	cmp	r2, r1
 8004aca:	d100      	bne.n	8004ace <memmove+0x2a>
 8004acc:	bd10      	pop	{r4, pc}
 8004ace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ad2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ad6:	e7f7      	b.n	8004ac8 <memmove+0x24>

08004ad8 <_sbrk_r>:
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	4d06      	ldr	r5, [pc, #24]	; (8004af4 <_sbrk_r+0x1c>)
 8004adc:	2300      	movs	r3, #0
 8004ade:	4604      	mov	r4, r0
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	602b      	str	r3, [r5, #0]
 8004ae4:	f7fc fd62 	bl	80015ac <_sbrk>
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d102      	bne.n	8004af2 <_sbrk_r+0x1a>
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	b103      	cbz	r3, 8004af2 <_sbrk_r+0x1a>
 8004af0:	6023      	str	r3, [r4, #0]
 8004af2:	bd38      	pop	{r3, r4, r5, pc}
 8004af4:	200002dc 	.word	0x200002dc

08004af8 <memcpy>:
 8004af8:	440a      	add	r2, r1
 8004afa:	4291      	cmp	r1, r2
 8004afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b00:	d100      	bne.n	8004b04 <memcpy+0xc>
 8004b02:	4770      	bx	lr
 8004b04:	b510      	push	{r4, lr}
 8004b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b0e:	4291      	cmp	r1, r2
 8004b10:	d1f9      	bne.n	8004b06 <memcpy+0xe>
 8004b12:	bd10      	pop	{r4, pc}

08004b14 <abort>:
 8004b14:	b508      	push	{r3, lr}
 8004b16:	2006      	movs	r0, #6
 8004b18:	f000 fa34 	bl	8004f84 <raise>
 8004b1c:	2001      	movs	r0, #1
 8004b1e:	f7fc fccd 	bl	80014bc <_exit>

08004b22 <_realloc_r>:
 8004b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b26:	4680      	mov	r8, r0
 8004b28:	4614      	mov	r4, r2
 8004b2a:	460e      	mov	r6, r1
 8004b2c:	b921      	cbnz	r1, 8004b38 <_realloc_r+0x16>
 8004b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b32:	4611      	mov	r1, r2
 8004b34:	f7ff bb82 	b.w	800423c <_malloc_r>
 8004b38:	b92a      	cbnz	r2, 8004b46 <_realloc_r+0x24>
 8004b3a:	f7ff fb0b 	bl	8004154 <_free_r>
 8004b3e:	4625      	mov	r5, r4
 8004b40:	4628      	mov	r0, r5
 8004b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b46:	f000 fa39 	bl	8004fbc <_malloc_usable_size_r>
 8004b4a:	4284      	cmp	r4, r0
 8004b4c:	4607      	mov	r7, r0
 8004b4e:	d802      	bhi.n	8004b56 <_realloc_r+0x34>
 8004b50:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b54:	d812      	bhi.n	8004b7c <_realloc_r+0x5a>
 8004b56:	4621      	mov	r1, r4
 8004b58:	4640      	mov	r0, r8
 8004b5a:	f7ff fb6f 	bl	800423c <_malloc_r>
 8004b5e:	4605      	mov	r5, r0
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d0ed      	beq.n	8004b40 <_realloc_r+0x1e>
 8004b64:	42bc      	cmp	r4, r7
 8004b66:	4622      	mov	r2, r4
 8004b68:	4631      	mov	r1, r6
 8004b6a:	bf28      	it	cs
 8004b6c:	463a      	movcs	r2, r7
 8004b6e:	f7ff ffc3 	bl	8004af8 <memcpy>
 8004b72:	4631      	mov	r1, r6
 8004b74:	4640      	mov	r0, r8
 8004b76:	f7ff faed 	bl	8004154 <_free_r>
 8004b7a:	e7e1      	b.n	8004b40 <_realloc_r+0x1e>
 8004b7c:	4635      	mov	r5, r6
 8004b7e:	e7df      	b.n	8004b40 <_realloc_r+0x1e>

08004b80 <__sfputc_r>:
 8004b80:	6893      	ldr	r3, [r2, #8]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	b410      	push	{r4}
 8004b88:	6093      	str	r3, [r2, #8]
 8004b8a:	da08      	bge.n	8004b9e <__sfputc_r+0x1e>
 8004b8c:	6994      	ldr	r4, [r2, #24]
 8004b8e:	42a3      	cmp	r3, r4
 8004b90:	db01      	blt.n	8004b96 <__sfputc_r+0x16>
 8004b92:	290a      	cmp	r1, #10
 8004b94:	d103      	bne.n	8004b9e <__sfputc_r+0x1e>
 8004b96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b9a:	f000 b935 	b.w	8004e08 <__swbuf_r>
 8004b9e:	6813      	ldr	r3, [r2, #0]
 8004ba0:	1c58      	adds	r0, r3, #1
 8004ba2:	6010      	str	r0, [r2, #0]
 8004ba4:	7019      	strb	r1, [r3, #0]
 8004ba6:	4608      	mov	r0, r1
 8004ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <__sfputs_r>:
 8004bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb0:	4606      	mov	r6, r0
 8004bb2:	460f      	mov	r7, r1
 8004bb4:	4614      	mov	r4, r2
 8004bb6:	18d5      	adds	r5, r2, r3
 8004bb8:	42ac      	cmp	r4, r5
 8004bba:	d101      	bne.n	8004bc0 <__sfputs_r+0x12>
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	e007      	b.n	8004bd0 <__sfputs_r+0x22>
 8004bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bc4:	463a      	mov	r2, r7
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	f7ff ffda 	bl	8004b80 <__sfputc_r>
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	d1f3      	bne.n	8004bb8 <__sfputs_r+0xa>
 8004bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bd4 <_vfiprintf_r>:
 8004bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd8:	460d      	mov	r5, r1
 8004bda:	b09d      	sub	sp, #116	; 0x74
 8004bdc:	4614      	mov	r4, r2
 8004bde:	4698      	mov	r8, r3
 8004be0:	4606      	mov	r6, r0
 8004be2:	b118      	cbz	r0, 8004bec <_vfiprintf_r+0x18>
 8004be4:	6a03      	ldr	r3, [r0, #32]
 8004be6:	b90b      	cbnz	r3, 8004bec <_vfiprintf_r+0x18>
 8004be8:	f7ff f968 	bl	8003ebc <__sinit>
 8004bec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bee:	07d9      	lsls	r1, r3, #31
 8004bf0:	d405      	bmi.n	8004bfe <_vfiprintf_r+0x2a>
 8004bf2:	89ab      	ldrh	r3, [r5, #12]
 8004bf4:	059a      	lsls	r2, r3, #22
 8004bf6:	d402      	bmi.n	8004bfe <_vfiprintf_r+0x2a>
 8004bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bfa:	f7ff fa8a 	bl	8004112 <__retarget_lock_acquire_recursive>
 8004bfe:	89ab      	ldrh	r3, [r5, #12]
 8004c00:	071b      	lsls	r3, r3, #28
 8004c02:	d501      	bpl.n	8004c08 <_vfiprintf_r+0x34>
 8004c04:	692b      	ldr	r3, [r5, #16]
 8004c06:	b99b      	cbnz	r3, 8004c30 <_vfiprintf_r+0x5c>
 8004c08:	4629      	mov	r1, r5
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	f000 f93a 	bl	8004e84 <__swsetup_r>
 8004c10:	b170      	cbz	r0, 8004c30 <_vfiprintf_r+0x5c>
 8004c12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c14:	07dc      	lsls	r4, r3, #31
 8004c16:	d504      	bpl.n	8004c22 <_vfiprintf_r+0x4e>
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	b01d      	add	sp, #116	; 0x74
 8004c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c22:	89ab      	ldrh	r3, [r5, #12]
 8004c24:	0598      	lsls	r0, r3, #22
 8004c26:	d4f7      	bmi.n	8004c18 <_vfiprintf_r+0x44>
 8004c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c2a:	f7ff fa73 	bl	8004114 <__retarget_lock_release_recursive>
 8004c2e:	e7f3      	b.n	8004c18 <_vfiprintf_r+0x44>
 8004c30:	2300      	movs	r3, #0
 8004c32:	9309      	str	r3, [sp, #36]	; 0x24
 8004c34:	2320      	movs	r3, #32
 8004c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c3e:	2330      	movs	r3, #48	; 0x30
 8004c40:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004df4 <_vfiprintf_r+0x220>
 8004c44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c48:	f04f 0901 	mov.w	r9, #1
 8004c4c:	4623      	mov	r3, r4
 8004c4e:	469a      	mov	sl, r3
 8004c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c54:	b10a      	cbz	r2, 8004c5a <_vfiprintf_r+0x86>
 8004c56:	2a25      	cmp	r2, #37	; 0x25
 8004c58:	d1f9      	bne.n	8004c4e <_vfiprintf_r+0x7a>
 8004c5a:	ebba 0b04 	subs.w	fp, sl, r4
 8004c5e:	d00b      	beq.n	8004c78 <_vfiprintf_r+0xa4>
 8004c60:	465b      	mov	r3, fp
 8004c62:	4622      	mov	r2, r4
 8004c64:	4629      	mov	r1, r5
 8004c66:	4630      	mov	r0, r6
 8004c68:	f7ff ffa1 	bl	8004bae <__sfputs_r>
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	f000 80a9 	beq.w	8004dc4 <_vfiprintf_r+0x1f0>
 8004c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c74:	445a      	add	r2, fp
 8004c76:	9209      	str	r2, [sp, #36]	; 0x24
 8004c78:	f89a 3000 	ldrb.w	r3, [sl]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 80a1 	beq.w	8004dc4 <_vfiprintf_r+0x1f0>
 8004c82:	2300      	movs	r3, #0
 8004c84:	f04f 32ff 	mov.w	r2, #4294967295
 8004c88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c8c:	f10a 0a01 	add.w	sl, sl, #1
 8004c90:	9304      	str	r3, [sp, #16]
 8004c92:	9307      	str	r3, [sp, #28]
 8004c94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c98:	931a      	str	r3, [sp, #104]	; 0x68
 8004c9a:	4654      	mov	r4, sl
 8004c9c:	2205      	movs	r2, #5
 8004c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca2:	4854      	ldr	r0, [pc, #336]	; (8004df4 <_vfiprintf_r+0x220>)
 8004ca4:	f7fb faa4 	bl	80001f0 <memchr>
 8004ca8:	9a04      	ldr	r2, [sp, #16]
 8004caa:	b9d8      	cbnz	r0, 8004ce4 <_vfiprintf_r+0x110>
 8004cac:	06d1      	lsls	r1, r2, #27
 8004cae:	bf44      	itt	mi
 8004cb0:	2320      	movmi	r3, #32
 8004cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cb6:	0713      	lsls	r3, r2, #28
 8004cb8:	bf44      	itt	mi
 8004cba:	232b      	movmi	r3, #43	; 0x2b
 8004cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8004cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8004cc6:	d015      	beq.n	8004cf4 <_vfiprintf_r+0x120>
 8004cc8:	9a07      	ldr	r2, [sp, #28]
 8004cca:	4654      	mov	r4, sl
 8004ccc:	2000      	movs	r0, #0
 8004cce:	f04f 0c0a 	mov.w	ip, #10
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cd8:	3b30      	subs	r3, #48	; 0x30
 8004cda:	2b09      	cmp	r3, #9
 8004cdc:	d94d      	bls.n	8004d7a <_vfiprintf_r+0x1a6>
 8004cde:	b1b0      	cbz	r0, 8004d0e <_vfiprintf_r+0x13a>
 8004ce0:	9207      	str	r2, [sp, #28]
 8004ce2:	e014      	b.n	8004d0e <_vfiprintf_r+0x13a>
 8004ce4:	eba0 0308 	sub.w	r3, r0, r8
 8004ce8:	fa09 f303 	lsl.w	r3, r9, r3
 8004cec:	4313      	orrs	r3, r2
 8004cee:	9304      	str	r3, [sp, #16]
 8004cf0:	46a2      	mov	sl, r4
 8004cf2:	e7d2      	b.n	8004c9a <_vfiprintf_r+0xc6>
 8004cf4:	9b03      	ldr	r3, [sp, #12]
 8004cf6:	1d19      	adds	r1, r3, #4
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	9103      	str	r1, [sp, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	bfbb      	ittet	lt
 8004d00:	425b      	neglt	r3, r3
 8004d02:	f042 0202 	orrlt.w	r2, r2, #2
 8004d06:	9307      	strge	r3, [sp, #28]
 8004d08:	9307      	strlt	r3, [sp, #28]
 8004d0a:	bfb8      	it	lt
 8004d0c:	9204      	strlt	r2, [sp, #16]
 8004d0e:	7823      	ldrb	r3, [r4, #0]
 8004d10:	2b2e      	cmp	r3, #46	; 0x2e
 8004d12:	d10c      	bne.n	8004d2e <_vfiprintf_r+0x15a>
 8004d14:	7863      	ldrb	r3, [r4, #1]
 8004d16:	2b2a      	cmp	r3, #42	; 0x2a
 8004d18:	d134      	bne.n	8004d84 <_vfiprintf_r+0x1b0>
 8004d1a:	9b03      	ldr	r3, [sp, #12]
 8004d1c:	1d1a      	adds	r2, r3, #4
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	9203      	str	r2, [sp, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	bfb8      	it	lt
 8004d26:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d2a:	3402      	adds	r4, #2
 8004d2c:	9305      	str	r3, [sp, #20]
 8004d2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004e04 <_vfiprintf_r+0x230>
 8004d32:	7821      	ldrb	r1, [r4, #0]
 8004d34:	2203      	movs	r2, #3
 8004d36:	4650      	mov	r0, sl
 8004d38:	f7fb fa5a 	bl	80001f0 <memchr>
 8004d3c:	b138      	cbz	r0, 8004d4e <_vfiprintf_r+0x17a>
 8004d3e:	9b04      	ldr	r3, [sp, #16]
 8004d40:	eba0 000a 	sub.w	r0, r0, sl
 8004d44:	2240      	movs	r2, #64	; 0x40
 8004d46:	4082      	lsls	r2, r0
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	3401      	adds	r4, #1
 8004d4c:	9304      	str	r3, [sp, #16]
 8004d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d52:	4829      	ldr	r0, [pc, #164]	; (8004df8 <_vfiprintf_r+0x224>)
 8004d54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d58:	2206      	movs	r2, #6
 8004d5a:	f7fb fa49 	bl	80001f0 <memchr>
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	d03f      	beq.n	8004de2 <_vfiprintf_r+0x20e>
 8004d62:	4b26      	ldr	r3, [pc, #152]	; (8004dfc <_vfiprintf_r+0x228>)
 8004d64:	bb1b      	cbnz	r3, 8004dae <_vfiprintf_r+0x1da>
 8004d66:	9b03      	ldr	r3, [sp, #12]
 8004d68:	3307      	adds	r3, #7
 8004d6a:	f023 0307 	bic.w	r3, r3, #7
 8004d6e:	3308      	adds	r3, #8
 8004d70:	9303      	str	r3, [sp, #12]
 8004d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d74:	443b      	add	r3, r7
 8004d76:	9309      	str	r3, [sp, #36]	; 0x24
 8004d78:	e768      	b.n	8004c4c <_vfiprintf_r+0x78>
 8004d7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d7e:	460c      	mov	r4, r1
 8004d80:	2001      	movs	r0, #1
 8004d82:	e7a6      	b.n	8004cd2 <_vfiprintf_r+0xfe>
 8004d84:	2300      	movs	r3, #0
 8004d86:	3401      	adds	r4, #1
 8004d88:	9305      	str	r3, [sp, #20]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	f04f 0c0a 	mov.w	ip, #10
 8004d90:	4620      	mov	r0, r4
 8004d92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d96:	3a30      	subs	r2, #48	; 0x30
 8004d98:	2a09      	cmp	r2, #9
 8004d9a:	d903      	bls.n	8004da4 <_vfiprintf_r+0x1d0>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0c6      	beq.n	8004d2e <_vfiprintf_r+0x15a>
 8004da0:	9105      	str	r1, [sp, #20]
 8004da2:	e7c4      	b.n	8004d2e <_vfiprintf_r+0x15a>
 8004da4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004da8:	4604      	mov	r4, r0
 8004daa:	2301      	movs	r3, #1
 8004dac:	e7f0      	b.n	8004d90 <_vfiprintf_r+0x1bc>
 8004dae:	ab03      	add	r3, sp, #12
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	462a      	mov	r2, r5
 8004db4:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <_vfiprintf_r+0x22c>)
 8004db6:	a904      	add	r1, sp, #16
 8004db8:	4630      	mov	r0, r6
 8004dba:	f3af 8000 	nop.w
 8004dbe:	4607      	mov	r7, r0
 8004dc0:	1c78      	adds	r0, r7, #1
 8004dc2:	d1d6      	bne.n	8004d72 <_vfiprintf_r+0x19e>
 8004dc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dc6:	07d9      	lsls	r1, r3, #31
 8004dc8:	d405      	bmi.n	8004dd6 <_vfiprintf_r+0x202>
 8004dca:	89ab      	ldrh	r3, [r5, #12]
 8004dcc:	059a      	lsls	r2, r3, #22
 8004dce:	d402      	bmi.n	8004dd6 <_vfiprintf_r+0x202>
 8004dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dd2:	f7ff f99f 	bl	8004114 <__retarget_lock_release_recursive>
 8004dd6:	89ab      	ldrh	r3, [r5, #12]
 8004dd8:	065b      	lsls	r3, r3, #25
 8004dda:	f53f af1d 	bmi.w	8004c18 <_vfiprintf_r+0x44>
 8004dde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004de0:	e71c      	b.n	8004c1c <_vfiprintf_r+0x48>
 8004de2:	ab03      	add	r3, sp, #12
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	462a      	mov	r2, r5
 8004de8:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <_vfiprintf_r+0x22c>)
 8004dea:	a904      	add	r1, sp, #16
 8004dec:	4630      	mov	r0, r6
 8004dee:	f7ff fc77 	bl	80046e0 <_printf_i>
 8004df2:	e7e4      	b.n	8004dbe <_vfiprintf_r+0x1ea>
 8004df4:	080052cf 	.word	0x080052cf
 8004df8:	080052d9 	.word	0x080052d9
 8004dfc:	00000000 	.word	0x00000000
 8004e00:	08004baf 	.word	0x08004baf
 8004e04:	080052d5 	.word	0x080052d5

08004e08 <__swbuf_r>:
 8004e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0a:	460e      	mov	r6, r1
 8004e0c:	4614      	mov	r4, r2
 8004e0e:	4605      	mov	r5, r0
 8004e10:	b118      	cbz	r0, 8004e1a <__swbuf_r+0x12>
 8004e12:	6a03      	ldr	r3, [r0, #32]
 8004e14:	b90b      	cbnz	r3, 8004e1a <__swbuf_r+0x12>
 8004e16:	f7ff f851 	bl	8003ebc <__sinit>
 8004e1a:	69a3      	ldr	r3, [r4, #24]
 8004e1c:	60a3      	str	r3, [r4, #8]
 8004e1e:	89a3      	ldrh	r3, [r4, #12]
 8004e20:	071a      	lsls	r2, r3, #28
 8004e22:	d525      	bpl.n	8004e70 <__swbuf_r+0x68>
 8004e24:	6923      	ldr	r3, [r4, #16]
 8004e26:	b31b      	cbz	r3, 8004e70 <__swbuf_r+0x68>
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	6922      	ldr	r2, [r4, #16]
 8004e2c:	1a98      	subs	r0, r3, r2
 8004e2e:	6963      	ldr	r3, [r4, #20]
 8004e30:	b2f6      	uxtb	r6, r6
 8004e32:	4283      	cmp	r3, r0
 8004e34:	4637      	mov	r7, r6
 8004e36:	dc04      	bgt.n	8004e42 <__swbuf_r+0x3a>
 8004e38:	4621      	mov	r1, r4
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f7ff fdf8 	bl	8004a30 <_fflush_r>
 8004e40:	b9e0      	cbnz	r0, 8004e7c <__swbuf_r+0x74>
 8004e42:	68a3      	ldr	r3, [r4, #8]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	60a3      	str	r3, [r4, #8]
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	6022      	str	r2, [r4, #0]
 8004e4e:	701e      	strb	r6, [r3, #0]
 8004e50:	6962      	ldr	r2, [r4, #20]
 8004e52:	1c43      	adds	r3, r0, #1
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d004      	beq.n	8004e62 <__swbuf_r+0x5a>
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	07db      	lsls	r3, r3, #31
 8004e5c:	d506      	bpl.n	8004e6c <__swbuf_r+0x64>
 8004e5e:	2e0a      	cmp	r6, #10
 8004e60:	d104      	bne.n	8004e6c <__swbuf_r+0x64>
 8004e62:	4621      	mov	r1, r4
 8004e64:	4628      	mov	r0, r5
 8004e66:	f7ff fde3 	bl	8004a30 <_fflush_r>
 8004e6a:	b938      	cbnz	r0, 8004e7c <__swbuf_r+0x74>
 8004e6c:	4638      	mov	r0, r7
 8004e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e70:	4621      	mov	r1, r4
 8004e72:	4628      	mov	r0, r5
 8004e74:	f000 f806 	bl	8004e84 <__swsetup_r>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d0d5      	beq.n	8004e28 <__swbuf_r+0x20>
 8004e7c:	f04f 37ff 	mov.w	r7, #4294967295
 8004e80:	e7f4      	b.n	8004e6c <__swbuf_r+0x64>
	...

08004e84 <__swsetup_r>:
 8004e84:	b538      	push	{r3, r4, r5, lr}
 8004e86:	4b2a      	ldr	r3, [pc, #168]	; (8004f30 <__swsetup_r+0xac>)
 8004e88:	4605      	mov	r5, r0
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	b118      	cbz	r0, 8004e98 <__swsetup_r+0x14>
 8004e90:	6a03      	ldr	r3, [r0, #32]
 8004e92:	b90b      	cbnz	r3, 8004e98 <__swsetup_r+0x14>
 8004e94:	f7ff f812 	bl	8003ebc <__sinit>
 8004e98:	89a3      	ldrh	r3, [r4, #12]
 8004e9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e9e:	0718      	lsls	r0, r3, #28
 8004ea0:	d422      	bmi.n	8004ee8 <__swsetup_r+0x64>
 8004ea2:	06d9      	lsls	r1, r3, #27
 8004ea4:	d407      	bmi.n	8004eb6 <__swsetup_r+0x32>
 8004ea6:	2309      	movs	r3, #9
 8004ea8:	602b      	str	r3, [r5, #0]
 8004eaa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004eae:	81a3      	strh	r3, [r4, #12]
 8004eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb4:	e034      	b.n	8004f20 <__swsetup_r+0x9c>
 8004eb6:	0758      	lsls	r0, r3, #29
 8004eb8:	d512      	bpl.n	8004ee0 <__swsetup_r+0x5c>
 8004eba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ebc:	b141      	cbz	r1, 8004ed0 <__swsetup_r+0x4c>
 8004ebe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ec2:	4299      	cmp	r1, r3
 8004ec4:	d002      	beq.n	8004ecc <__swsetup_r+0x48>
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f7ff f944 	bl	8004154 <_free_r>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	6363      	str	r3, [r4, #52]	; 0x34
 8004ed0:	89a3      	ldrh	r3, [r4, #12]
 8004ed2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ed6:	81a3      	strh	r3, [r4, #12]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	6063      	str	r3, [r4, #4]
 8004edc:	6923      	ldr	r3, [r4, #16]
 8004ede:	6023      	str	r3, [r4, #0]
 8004ee0:	89a3      	ldrh	r3, [r4, #12]
 8004ee2:	f043 0308 	orr.w	r3, r3, #8
 8004ee6:	81a3      	strh	r3, [r4, #12]
 8004ee8:	6923      	ldr	r3, [r4, #16]
 8004eea:	b94b      	cbnz	r3, 8004f00 <__swsetup_r+0x7c>
 8004eec:	89a3      	ldrh	r3, [r4, #12]
 8004eee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef6:	d003      	beq.n	8004f00 <__swsetup_r+0x7c>
 8004ef8:	4621      	mov	r1, r4
 8004efa:	4628      	mov	r0, r5
 8004efc:	f000 f88c 	bl	8005018 <__smakebuf_r>
 8004f00:	89a0      	ldrh	r0, [r4, #12]
 8004f02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f06:	f010 0301 	ands.w	r3, r0, #1
 8004f0a:	d00a      	beq.n	8004f22 <__swsetup_r+0x9e>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60a3      	str	r3, [r4, #8]
 8004f10:	6963      	ldr	r3, [r4, #20]
 8004f12:	425b      	negs	r3, r3
 8004f14:	61a3      	str	r3, [r4, #24]
 8004f16:	6923      	ldr	r3, [r4, #16]
 8004f18:	b943      	cbnz	r3, 8004f2c <__swsetup_r+0xa8>
 8004f1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f1e:	d1c4      	bne.n	8004eaa <__swsetup_r+0x26>
 8004f20:	bd38      	pop	{r3, r4, r5, pc}
 8004f22:	0781      	lsls	r1, r0, #30
 8004f24:	bf58      	it	pl
 8004f26:	6963      	ldrpl	r3, [r4, #20]
 8004f28:	60a3      	str	r3, [r4, #8]
 8004f2a:	e7f4      	b.n	8004f16 <__swsetup_r+0x92>
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	e7f7      	b.n	8004f20 <__swsetup_r+0x9c>
 8004f30:	20000064 	.word	0x20000064

08004f34 <_raise_r>:
 8004f34:	291f      	cmp	r1, #31
 8004f36:	b538      	push	{r3, r4, r5, lr}
 8004f38:	4604      	mov	r4, r0
 8004f3a:	460d      	mov	r5, r1
 8004f3c:	d904      	bls.n	8004f48 <_raise_r+0x14>
 8004f3e:	2316      	movs	r3, #22
 8004f40:	6003      	str	r3, [r0, #0]
 8004f42:	f04f 30ff 	mov.w	r0, #4294967295
 8004f46:	bd38      	pop	{r3, r4, r5, pc}
 8004f48:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004f4a:	b112      	cbz	r2, 8004f52 <_raise_r+0x1e>
 8004f4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f50:	b94b      	cbnz	r3, 8004f66 <_raise_r+0x32>
 8004f52:	4620      	mov	r0, r4
 8004f54:	f000 f830 	bl	8004fb8 <_getpid_r>
 8004f58:	462a      	mov	r2, r5
 8004f5a:	4601      	mov	r1, r0
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f62:	f000 b817 	b.w	8004f94 <_kill_r>
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d00a      	beq.n	8004f80 <_raise_r+0x4c>
 8004f6a:	1c59      	adds	r1, r3, #1
 8004f6c:	d103      	bne.n	8004f76 <_raise_r+0x42>
 8004f6e:	2316      	movs	r3, #22
 8004f70:	6003      	str	r3, [r0, #0]
 8004f72:	2001      	movs	r0, #1
 8004f74:	e7e7      	b.n	8004f46 <_raise_r+0x12>
 8004f76:	2400      	movs	r4, #0
 8004f78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	4798      	blx	r3
 8004f80:	2000      	movs	r0, #0
 8004f82:	e7e0      	b.n	8004f46 <_raise_r+0x12>

08004f84 <raise>:
 8004f84:	4b02      	ldr	r3, [pc, #8]	; (8004f90 <raise+0xc>)
 8004f86:	4601      	mov	r1, r0
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	f7ff bfd3 	b.w	8004f34 <_raise_r>
 8004f8e:	bf00      	nop
 8004f90:	20000064 	.word	0x20000064

08004f94 <_kill_r>:
 8004f94:	b538      	push	{r3, r4, r5, lr}
 8004f96:	4d07      	ldr	r5, [pc, #28]	; (8004fb4 <_kill_r+0x20>)
 8004f98:	2300      	movs	r3, #0
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	4608      	mov	r0, r1
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	602b      	str	r3, [r5, #0]
 8004fa2:	f7fc fa7b 	bl	800149c <_kill>
 8004fa6:	1c43      	adds	r3, r0, #1
 8004fa8:	d102      	bne.n	8004fb0 <_kill_r+0x1c>
 8004faa:	682b      	ldr	r3, [r5, #0]
 8004fac:	b103      	cbz	r3, 8004fb0 <_kill_r+0x1c>
 8004fae:	6023      	str	r3, [r4, #0]
 8004fb0:	bd38      	pop	{r3, r4, r5, pc}
 8004fb2:	bf00      	nop
 8004fb4:	200002dc 	.word	0x200002dc

08004fb8 <_getpid_r>:
 8004fb8:	f7fc ba68 	b.w	800148c <_getpid>

08004fbc <_malloc_usable_size_r>:
 8004fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fc0:	1f18      	subs	r0, r3, #4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bfbc      	itt	lt
 8004fc6:	580b      	ldrlt	r3, [r1, r0]
 8004fc8:	18c0      	addlt	r0, r0, r3
 8004fca:	4770      	bx	lr

08004fcc <__swhatbuf_r>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	460c      	mov	r4, r1
 8004fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fd4:	2900      	cmp	r1, #0
 8004fd6:	b096      	sub	sp, #88	; 0x58
 8004fd8:	4615      	mov	r5, r2
 8004fda:	461e      	mov	r6, r3
 8004fdc:	da0d      	bge.n	8004ffa <__swhatbuf_r+0x2e>
 8004fde:	89a3      	ldrh	r3, [r4, #12]
 8004fe0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004fe4:	f04f 0100 	mov.w	r1, #0
 8004fe8:	bf0c      	ite	eq
 8004fea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004fee:	2340      	movne	r3, #64	; 0x40
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	6031      	str	r1, [r6, #0]
 8004ff4:	602b      	str	r3, [r5, #0]
 8004ff6:	b016      	add	sp, #88	; 0x58
 8004ff8:	bd70      	pop	{r4, r5, r6, pc}
 8004ffa:	466a      	mov	r2, sp
 8004ffc:	f000 f848 	bl	8005090 <_fstat_r>
 8005000:	2800      	cmp	r0, #0
 8005002:	dbec      	blt.n	8004fde <__swhatbuf_r+0x12>
 8005004:	9901      	ldr	r1, [sp, #4]
 8005006:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800500a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800500e:	4259      	negs	r1, r3
 8005010:	4159      	adcs	r1, r3
 8005012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005016:	e7eb      	b.n	8004ff0 <__swhatbuf_r+0x24>

08005018 <__smakebuf_r>:
 8005018:	898b      	ldrh	r3, [r1, #12]
 800501a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800501c:	079d      	lsls	r5, r3, #30
 800501e:	4606      	mov	r6, r0
 8005020:	460c      	mov	r4, r1
 8005022:	d507      	bpl.n	8005034 <__smakebuf_r+0x1c>
 8005024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005028:	6023      	str	r3, [r4, #0]
 800502a:	6123      	str	r3, [r4, #16]
 800502c:	2301      	movs	r3, #1
 800502e:	6163      	str	r3, [r4, #20]
 8005030:	b002      	add	sp, #8
 8005032:	bd70      	pop	{r4, r5, r6, pc}
 8005034:	ab01      	add	r3, sp, #4
 8005036:	466a      	mov	r2, sp
 8005038:	f7ff ffc8 	bl	8004fcc <__swhatbuf_r>
 800503c:	9900      	ldr	r1, [sp, #0]
 800503e:	4605      	mov	r5, r0
 8005040:	4630      	mov	r0, r6
 8005042:	f7ff f8fb 	bl	800423c <_malloc_r>
 8005046:	b948      	cbnz	r0, 800505c <__smakebuf_r+0x44>
 8005048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800504c:	059a      	lsls	r2, r3, #22
 800504e:	d4ef      	bmi.n	8005030 <__smakebuf_r+0x18>
 8005050:	f023 0303 	bic.w	r3, r3, #3
 8005054:	f043 0302 	orr.w	r3, r3, #2
 8005058:	81a3      	strh	r3, [r4, #12]
 800505a:	e7e3      	b.n	8005024 <__smakebuf_r+0xc>
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	6020      	str	r0, [r4, #0]
 8005060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005064:	81a3      	strh	r3, [r4, #12]
 8005066:	9b00      	ldr	r3, [sp, #0]
 8005068:	6163      	str	r3, [r4, #20]
 800506a:	9b01      	ldr	r3, [sp, #4]
 800506c:	6120      	str	r0, [r4, #16]
 800506e:	b15b      	cbz	r3, 8005088 <__smakebuf_r+0x70>
 8005070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005074:	4630      	mov	r0, r6
 8005076:	f000 f81d 	bl	80050b4 <_isatty_r>
 800507a:	b128      	cbz	r0, 8005088 <__smakebuf_r+0x70>
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	f023 0303 	bic.w	r3, r3, #3
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	81a3      	strh	r3, [r4, #12]
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	431d      	orrs	r5, r3
 800508c:	81a5      	strh	r5, [r4, #12]
 800508e:	e7cf      	b.n	8005030 <__smakebuf_r+0x18>

08005090 <_fstat_r>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	4d07      	ldr	r5, [pc, #28]	; (80050b0 <_fstat_r+0x20>)
 8005094:	2300      	movs	r3, #0
 8005096:	4604      	mov	r4, r0
 8005098:	4608      	mov	r0, r1
 800509a:	4611      	mov	r1, r2
 800509c:	602b      	str	r3, [r5, #0]
 800509e:	f7fc fa5c 	bl	800155a <_fstat>
 80050a2:	1c43      	adds	r3, r0, #1
 80050a4:	d102      	bne.n	80050ac <_fstat_r+0x1c>
 80050a6:	682b      	ldr	r3, [r5, #0]
 80050a8:	b103      	cbz	r3, 80050ac <_fstat_r+0x1c>
 80050aa:	6023      	str	r3, [r4, #0]
 80050ac:	bd38      	pop	{r3, r4, r5, pc}
 80050ae:	bf00      	nop
 80050b0:	200002dc 	.word	0x200002dc

080050b4 <_isatty_r>:
 80050b4:	b538      	push	{r3, r4, r5, lr}
 80050b6:	4d06      	ldr	r5, [pc, #24]	; (80050d0 <_isatty_r+0x1c>)
 80050b8:	2300      	movs	r3, #0
 80050ba:	4604      	mov	r4, r0
 80050bc:	4608      	mov	r0, r1
 80050be:	602b      	str	r3, [r5, #0]
 80050c0:	f7fc fa5b 	bl	800157a <_isatty>
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	d102      	bne.n	80050ce <_isatty_r+0x1a>
 80050c8:	682b      	ldr	r3, [r5, #0]
 80050ca:	b103      	cbz	r3, 80050ce <_isatty_r+0x1a>
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	bd38      	pop	{r3, r4, r5, pc}
 80050d0:	200002dc 	.word	0x200002dc

080050d4 <_init>:
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d6:	bf00      	nop
 80050d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050da:	bc08      	pop	{r3}
 80050dc:	469e      	mov	lr, r3
 80050de:	4770      	bx	lr

080050e0 <_fini>:
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	bf00      	nop
 80050e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e6:	bc08      	pop	{r3}
 80050e8:	469e      	mov	lr, r3
 80050ea:	4770      	bx	lr
