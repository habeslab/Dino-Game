
Dino-Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08004ef8  08004ef8  00014ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050a0  080050a0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080050a0  080050a0  000150a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050a8  080050a8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050a8  080050a8  000150a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050ac  080050ac  000150ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080050b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000068  08005118  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08005118  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000afc4  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002064  00000000  00000000  0002b09f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  0002d108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000740  00000000  00000000  0002daa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180e5  00000000  00000000  0002e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cc48  00000000  00000000  000462c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092fcc  00000000  00000000  00052f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030dc  00000000  00000000  000e5edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000e8fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ee0 	.word	0x08004ee0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004ee0 	.word	0x08004ee0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <generate_obstacles>:

#include "dino-game.h"
#include <stdlib.h>

// Function to ensure obstacles are at least a minimum distance apart
void generate_obstacles(Obstacles *obstacles) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    obstacles->position_col[0] = 16 + (rand() % 16);
 8000594:	f003 fae6 	bl	8003b64 <rand>
 8000598:	4603      	mov	r3, r0
 800059a:	425a      	negs	r2, r3
 800059c:	f003 030f 	and.w	r3, r3, #15
 80005a0:	f002 020f 	and.w	r2, r2, #15
 80005a4:	bf58      	it	pl
 80005a6:	4253      	negpl	r3, r2
 80005a8:	f103 0210 	add.w	r2, r3, #16
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
    for (int i = 1; i < MAX_OBSTACLES; i++) {
 80005b2:	2301      	movs	r3, #1
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	e01d      	b.n	80005f4 <generate_obstacles+0x68>
        obstacles->position_col[i] = obstacles->position_col[i - 1] + MIN_OBSTACLE_DISTANCE;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	1e5a      	subs	r2, r3, #1
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 80005c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005c6:	1cd9      	adds	r1, r3, #3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	68fa      	ldr	r2, [r7, #12]
 80005cc:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 80005d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        obstacles->position_row[i] = rand() % 2; // Randomly position the obstacle in row 0 or 1
 80005d4:	f003 fac6 	bl	8003b64 <rand>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	f003 0301 	and.w	r3, r3, #1
 80005e0:	bfb8      	it	lt
 80005e2:	425b      	neglt	r3, r3
 80005e4:	4619      	mov	r1, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 1; i < MAX_OBSTACLES; i++) {
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	3301      	adds	r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80005fa:	dbdd      	blt.n	80005b8 <generate_obstacles+0x2c>
    }
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <game_init>:

void game_init(Lcd_HandleTypeDef *lcd, Dino *dino, Obstacles *obstacles) {
 8000606:	b580      	push	{r7, lr}
 8000608:	b084      	sub	sp, #16
 800060a:	af00      	add	r7, sp, #0
 800060c:	60f8      	str	r0, [r7, #12]
 800060e:	60b9      	str	r1, [r7, #8]
 8000610:	607a      	str	r2, [r7, #4]
    Lcd_init(lcd);
 8000612:	68f8      	ldr	r0, [r7, #12]
 8000614:	f000 fa9c 	bl	8000b50 <Lcd_init>

    set_dino_char(lcd); // Set custom characters
 8000618:	68f8      	ldr	r0, [r7, #12]
 800061a:	f000 f991 	bl	8000940 <set_dino_char>

    dino->position_row = 0;
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
    dino->position_col = 0;
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
    dino->jump = false;
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2200      	movs	r2, #0
 800062e:	721a      	strb	r2, [r3, #8]
    dino->down = false;
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	2200      	movs	r2, #0
 8000634:	725a      	strb	r2, [r3, #9]

    generate_obstacles(obstacles); // Generate initial obstacles with distance constraints
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f7ff ffa8 	bl	800058c <generate_obstacles>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <game_update>:

void game_update(uint32_t *VR, Lcd_HandleTypeDef *lcd, Dino *dino, Obstacles *obstacles) {
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b087      	sub	sp, #28
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	603b      	str	r3, [r7, #0]
    // Handle joystick input
    if (joystick_up(VR) == 1) {
 8000652:	68f8      	ldr	r0, [r7, #12]
 8000654:	f000 fa0a 	bl	8000a6c <joystick_up>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d109      	bne.n	8000672 <game_update+0x2e>
        dino->jump = true;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2201      	movs	r2, #1
 8000662:	721a      	strb	r2, [r3, #8]
        dino->down = false;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	725a      	strb	r2, [r3, #9]
        dino->position_row = 0;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	e01e      	b.n	80006b0 <game_update+0x6c>
    } else if (joystick_down(VR) == 1) {
 8000672:	68f8      	ldr	r0, [r7, #12]
 8000674:	f000 fa12 	bl	8000a9c <joystick_down>
 8000678:	4603      	mov	r3, r0
 800067a:	2b01      	cmp	r3, #1
 800067c:	d109      	bne.n	8000692 <game_update+0x4e>
        dino->jump = false;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2200      	movs	r2, #0
 8000682:	721a      	strb	r2, [r3, #8]
        dino->down = true;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2201      	movs	r2, #1
 8000688:	725a      	strb	r2, [r3, #9]
        dino->position_row = 1;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2201      	movs	r2, #1
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	e00e      	b.n	80006b0 <game_update+0x6c>
    } else if (joystick_stable(VR) == 1) {
 8000692:	68f8      	ldr	r0, [r7, #12]
 8000694:	f000 fa17 	bl	8000ac6 <joystick_stable>
 8000698:	4603      	mov	r3, r0
 800069a:	2b01      	cmp	r3, #1
 800069c:	d108      	bne.n	80006b0 <game_update+0x6c>
        dino->jump = false;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2200      	movs	r2, #0
 80006a2:	721a      	strb	r2, [r3, #8]
        dino->down = false;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	725a      	strb	r2, [r3, #9]
        dino->position_row = 1;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2201      	movs	r2, #1
 80006ae:	601a      	str	r2, [r3, #0]
    }

    // Move obstacles
    for (int i = 0; i < MAX_OBSTACLES; i++) {
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	e056      	b.n	8000764 <game_update+0x120>
        obstacles->position_col[i]--;
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	697a      	ldr	r2, [r7, #20]
 80006ba:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 80006be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006c2:	1e59      	subs	r1, r3, #1
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	697a      	ldr	r2, [r7, #20]
 80006c8:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 80006cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        if (obstacles->position_col[i] < 0) {
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	697a      	ldr	r2, [r7, #20]
 80006d4:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 80006d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	da3e      	bge.n	800075e <game_update+0x11a>
            // Reposition the obstacle with a minimum distance
            obstacles->position_row[i] = rand() % 2; // Randomly position the obstacle in row 0 or 1
 80006e0:	f003 fa40 	bl	8003b64 <rand>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	bfb8      	it	lt
 80006ee:	425b      	neglt	r3, r3
 80006f0:	4619      	mov	r1, r3
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	697a      	ldr	r2, [r7, #20]
 80006f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            if (i == 0) {
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d115      	bne.n	800072c <game_update+0xe8>
                obstacles->position_col[i] = obstacles->position_col[MAX_OBSTACLES - 1] + MIN_OBSTACLE_DISTANCE + (rand() % 16);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	f8d3 395c 	ldr.w	r3, [r3, #2396]	; 0x95c
 8000706:	1cdc      	adds	r4, r3, #3
 8000708:	f003 fa2c 	bl	8003b64 <rand>
 800070c:	4603      	mov	r3, r0
 800070e:	425a      	negs	r2, r3
 8000710:	f003 030f 	and.w	r3, r3, #15
 8000714:	f002 020f 	and.w	r2, r2, #15
 8000718:	bf58      	it	pl
 800071a:	4253      	negpl	r3, r2
 800071c:	18e1      	adds	r1, r4, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	697a      	ldr	r2, [r7, #20]
 8000722:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 8000726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800072a:	e018      	b.n	800075e <game_update+0x11a>
            } else {
                obstacles->position_col[i] = obstacles->position_col[i - 1] + MIN_OBSTACLE_DISTANCE + (rand() % 16);
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	1e5a      	subs	r2, r3, #1
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 8000736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800073a:	1cdc      	adds	r4, r3, #3
 800073c:	f003 fa12 	bl	8003b64 <rand>
 8000740:	4603      	mov	r3, r0
 8000742:	425a      	negs	r2, r3
 8000744:	f003 030f 	and.w	r3, r3, #15
 8000748:	f002 020f 	and.w	r2, r2, #15
 800074c:	bf58      	it	pl
 800074e:	4253      	negpl	r3, r2
 8000750:	18e1      	adds	r1, r4, r3
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 800075a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < MAX_OBSTACLES; i++) {
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	3301      	adds	r3, #1
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800076a:	dba4      	blt.n	80006b6 <game_update+0x72>
            }
        }
    }
}
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	371c      	adds	r7, #28
 8000772:	46bd      	mov	sp, r7
 8000774:	bd90      	pop	{r4, r7, pc}
	...

08000778 <game_draw>:

void game_draw(Lcd_HandleTypeDef *lcd, Dino *dino, Obstacles *obstacles) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
    Lcd_clear(lcd);
 8000784:	68f8      	ldr	r0, [r7, #12]
 8000786:	f000 fa45 	bl	8000c14 <Lcd_clear>

    // Draw sun
    Lcd_cursor(lcd, 0, 15);
 800078a:	220f      	movs	r2, #15
 800078c:	2100      	movs	r1, #0
 800078e:	68f8      	ldr	r0, [r7, #12]
 8000790:	f000 fa26 	bl	8000be0 <Lcd_cursor>
    Lcd_write_data(lcd, 0); // Sun
 8000794:	2100      	movs	r1, #0
 8000796:	68f8      	ldr	r0, [r7, #12]
 8000798:	f000 fad0 	bl	8000d3c <Lcd_write_data>

    // Draw Dino
    if (!dino->jump && !dino->down && dino->position_row == 1) {
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	7a1b      	ldrb	r3, [r3, #8]
 80007a0:	f083 0301 	eor.w	r3, r3, #1
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d019      	beq.n	80007de <game_draw+0x66>
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	7a5b      	ldrb	r3, [r3, #9]
 80007ae:	f083 0301 	eor.w	r3, r3, #1
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d012      	beq.n	80007de <game_draw+0x66>
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d10e      	bne.n	80007de <game_draw+0x66>
        Lcd_cursor(lcd, dino->position_row, dino->position_col);
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	b2d9      	uxtb	r1, r3
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	461a      	mov	r2, r3
 80007ce:	68f8      	ldr	r0, [r7, #12]
 80007d0:	f000 fa06 	bl	8000be0 <Lcd_cursor>
        Lcd_string(lcd, "\x01"); // dino_run1
 80007d4:	4940      	ldr	r1, [pc, #256]	; (80008d8 <game_draw+0x160>)
 80007d6:	68f8      	ldr	r0, [r7, #12]
 80007d8:	f000 f9e3 	bl	8000ba2 <Lcd_string>
 80007dc:	e02c      	b.n	8000838 <game_draw+0xc0>
    } else if (dino->jump && dino->position_row == 0) {
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	7a1b      	ldrb	r3, [r3, #8]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d012      	beq.n	800080c <game_draw+0x94>
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d10e      	bne.n	800080c <game_draw+0x94>
        Lcd_cursor(lcd, dino->position_row, dino->position_col);
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	b2d9      	uxtb	r1, r3
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	461a      	mov	r2, r3
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	f000 f9ef 	bl	8000be0 <Lcd_cursor>
        Lcd_string(lcd, "\x02"); // dino_jump
 8000802:	4936      	ldr	r1, [pc, #216]	; (80008dc <game_draw+0x164>)
 8000804:	68f8      	ldr	r0, [r7, #12]
 8000806:	f000 f9cc 	bl	8000ba2 <Lcd_string>
 800080a:	e015      	b.n	8000838 <game_draw+0xc0>
    } else if (dino->down && dino->position_row == 1) {
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	7a5b      	ldrb	r3, [r3, #9]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d011      	beq.n	8000838 <game_draw+0xc0>
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d10d      	bne.n	8000838 <game_draw+0xc0>
        Lcd_cursor(lcd, dino->position_row, dino->position_col);
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	b2d9      	uxtb	r1, r3
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	461a      	mov	r2, r3
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f000 f9d8 	bl	8000be0 <Lcd_cursor>
        Lcd_string(lcd, "\x03"); // dino_down1
 8000830:	492b      	ldr	r1, [pc, #172]	; (80008e0 <game_draw+0x168>)
 8000832:	68f8      	ldr	r0, [r7, #12]
 8000834:	f000 f9b5 	bl	8000ba2 <Lcd_string>
    }


    // Draw obstacles
    for (int i = 0; i < MAX_OBSTACLES; i++) {
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	e042      	b.n	80008c4 <game_draw+0x14c>
        if (obstacles->position_col[i] < 16) { // If obstacle is on screen
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 8000846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800084a:	2b0f      	cmp	r3, #15
 800084c:	dc37      	bgt.n	80008be <game_draw+0x146>
            Lcd_cursor(lcd, obstacles->position_row[i], obstacles->position_col[i]);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	697a      	ldr	r2, [r7, #20]
 8000852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000856:	b2d9      	uxtb	r1, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 8000860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	461a      	mov	r2, r3
 8000868:	68f8      	ldr	r0, [r7, #12]
 800086a:	f000 f9b9 	bl	8000be0 <Lcd_cursor>
            if (obstacles->position_row[i] == 1) {
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d104      	bne.n	8000884 <game_draw+0x10c>
                Lcd_string(lcd, "\x05"); // cactus
 800087a:	491a      	ldr	r1, [pc, #104]	; (80008e4 <game_draw+0x16c>)
 800087c:	68f8      	ldr	r0, [r7, #12]
 800087e:	f000 f990 	bl	8000ba2 <Lcd_string>
 8000882:	e01c      	b.n	80008be <game_draw+0x146>
            } else if (obstacles->position_row[i] == 0) {
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d116      	bne.n	80008be <game_draw+0x146>
                switch (rand() % 2) {
 8000890:	f003 f968 	bl	8003b64 <rand>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	bfb8      	it	lt
 800089e:	425b      	neglt	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d002      	beq.n	80008aa <game_draw+0x132>
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d005      	beq.n	80008b4 <game_draw+0x13c>
 80008a8:	e009      	b.n	80008be <game_draw+0x146>
                    case 0:
                        Lcd_string(lcd, "\x06"); // bird_top
 80008aa:	490f      	ldr	r1, [pc, #60]	; (80008e8 <game_draw+0x170>)
 80008ac:	68f8      	ldr	r0, [r7, #12]
 80008ae:	f000 f978 	bl	8000ba2 <Lcd_string>
                        break;
 80008b2:	e004      	b.n	80008be <game_draw+0x146>
                    case 1:
                        Lcd_string(lcd, "\x07"); // bird_bottom
 80008b4:	490d      	ldr	r1, [pc, #52]	; (80008ec <game_draw+0x174>)
 80008b6:	68f8      	ldr	r0, [r7, #12]
 80008b8:	f000 f973 	bl	8000ba2 <Lcd_string>
                        break;
 80008bc:	bf00      	nop
    for (int i = 0; i < MAX_OBSTACLES; i++) {
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	3301      	adds	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80008ca:	dbb8      	blt.n	800083e <game_draw+0xc6>
                }
            }
        }
    }
}
 80008cc:	bf00      	nop
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	08004ef8 	.word	0x08004ef8
 80008dc:	08004efc 	.word	0x08004efc
 80008e0:	08004f00 	.word	0x08004f00
 80008e4:	08004f04 	.word	0x08004f04
 80008e8:	08004f08 	.word	0x08004f08
 80008ec:	08004f0c 	.word	0x08004f0c

080008f0 <check_collision>:




int check_collision(Dino *dino, Obstacles *obstacles) {
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_OBSTACLES; i++) {
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	e014      	b.n	800092a <check_collision+0x3a>
        if (dino->position_row == obstacles->position_row[i] && obstacles->position_col[i] == 0) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	68f9      	ldr	r1, [r7, #12]
 8000908:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800090c:	429a      	cmp	r2, r3
 800090e:	d109      	bne.n	8000924 <check_collision+0x34>
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 8000918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d101      	bne.n	8000924 <check_collision+0x34>
            return 1; // Collisione rilevata
 8000920:	2301      	movs	r3, #1
 8000922:	e007      	b.n	8000934 <check_collision+0x44>
    for (int i = 0; i < MAX_OBSTACLES; i++) {
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	3301      	adds	r3, #1
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000930:	dbe6      	blt.n	8000900 <check_collision+0x10>
        }
    }
    return 0; // Nessuna collisione
 8000932:	2300      	movs	r3, #0
}
 8000934:	4618      	mov	r0, r3
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <set_dino_char>:



void set_dino_char(Lcd_HandleTypeDef *lcd) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b092      	sub	sp, #72	; 0x48
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
    uint8_t sun[8] = {
 8000948:	4a39      	ldr	r2, [pc, #228]	; (8000a30 <set_dino_char+0xf0>)
 800094a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800094e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000952:	e883 0003 	stmia.w	r3, {r0, r1}
        0x00, 0x00, 0x1C, 0x1F, 0x1F, 0x1F, 0x1C, 0x00
    };
    uint8_t dino_run1[8] = {
 8000956:	4a37      	ldr	r2, [pc, #220]	; (8000a34 <set_dino_char+0xf4>)
 8000958:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800095c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000960:	e883 0003 	stmia.w	r3, {r0, r1}
        0x07, 0x05, 0x07, 0x04, 0x17, 0x1E, 0x0E, 0x1B
    };
    uint8_t dino_run2[8] = {
 8000964:	4a34      	ldr	r2, [pc, #208]	; (8000a38 <set_dino_char+0xf8>)
 8000966:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800096a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800096e:	e883 0003 	stmia.w	r3, {r0, r1}
        0x07, 0x05, 0x07, 0x04, 0x17, 0x1E, 0x0F, 0x0C
    };
    uint8_t cactus[8] = {
 8000972:	4a32      	ldr	r2, [pc, #200]	; (8000a3c <set_dino_char+0xfc>)
 8000974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000978:	e892 0003 	ldmia.w	r2, {r0, r1}
 800097c:	e883 0003 	stmia.w	r3, {r0, r1}
        0x04, 0x04, 0x05, 0x15, 0x17, 0x1C, 0x04, 0x04
    };
    uint8_t dino_duck1[8] = {
 8000980:	4a2f      	ldr	r2, [pc, #188]	; (8000a40 <set_dino_char+0x100>)
 8000982:	f107 0320 	add.w	r3, r7, #32
 8000986:	e892 0003 	ldmia.w	r2, {r0, r1}
 800098a:	e883 0003 	stmia.w	r3, {r0, r1}
        0x00, 0x00, 0x03, 0x05, 0x17, 0x1E, 0x0F, 0x08
    };
    uint8_t dino_duck2[8] = {
 800098e:	4a2d      	ldr	r2, [pc, #180]	; (8000a44 <set_dino_char+0x104>)
 8000990:	f107 0318 	add.w	r3, r7, #24
 8000994:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000998:	e883 0003 	stmia.w	r3, {r0, r1}
        0x00, 0x00, 0x03, 0x05, 0x17, 0x1E, 0x0E, 0x12
    };
    uint8_t bird_top[8] = {
 800099c:	4a2a      	ldr	r2, [pc, #168]	; (8000a48 <set_dino_char+0x108>)
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009a6:	e883 0003 	stmia.w	r3, {r0, r1}
        0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0E, 0x1C
    };
    uint8_t bird_bottom[8] = {
 80009aa:	4a28      	ldr	r2, [pc, #160]	; (8000a4c <set_dino_char+0x10c>)
 80009ac:	f107 0308 	add.w	r3, r7, #8
 80009b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b4:	e883 0003 	stmia.w	r3, {r0, r1}
        0x1C, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    Lcd_define_char(lcd, 0, sun);
 80009b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009bc:	461a      	mov	r2, r3
 80009be:	2100      	movs	r1, #0
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 f933 	bl	8000c2c <Lcd_define_char>
    Lcd_define_char(lcd, 1, dino_run1);
 80009c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ca:	461a      	mov	r2, r3
 80009cc:	2101      	movs	r1, #1
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f000 f92c 	bl	8000c2c <Lcd_define_char>
    Lcd_define_char(lcd, 2, dino_run2);
 80009d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009d8:	461a      	mov	r2, r3
 80009da:	2102      	movs	r1, #2
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f000 f925 	bl	8000c2c <Lcd_define_char>
    Lcd_define_char(lcd, 3, dino_duck1);
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	461a      	mov	r2, r3
 80009e8:	2103      	movs	r1, #3
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f000 f91e 	bl	8000c2c <Lcd_define_char>
    Lcd_define_char(lcd, 4, dino_duck2);
 80009f0:	f107 0318 	add.w	r3, r7, #24
 80009f4:	461a      	mov	r2, r3
 80009f6:	2104      	movs	r1, #4
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f000 f917 	bl	8000c2c <Lcd_define_char>
    Lcd_define_char(lcd, 5, cactus);
 80009fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a02:	461a      	mov	r2, r3
 8000a04:	2105      	movs	r1, #5
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f000 f910 	bl	8000c2c <Lcd_define_char>
    Lcd_define_char(lcd, 6, bird_top);
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	461a      	mov	r2, r3
 8000a12:	2106      	movs	r1, #6
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 f909 	bl	8000c2c <Lcd_define_char>
    Lcd_define_char(lcd, 7, bird_bottom);
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	461a      	mov	r2, r3
 8000a20:	2107      	movs	r1, #7
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f000 f902 	bl	8000c2c <Lcd_define_char>
}
 8000a28:	bf00      	nop
 8000a2a:	3748      	adds	r7, #72	; 0x48
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	08004f10 	.word	0x08004f10
 8000a34:	08004f18 	.word	0x08004f18
 8000a38:	08004f20 	.word	0x08004f20
 8000a3c:	08004f28 	.word	0x08004f28
 8000a40:	08004f30 	.word	0x08004f30
 8000a44:	08004f38 	.word	0x08004f38
 8000a48:	08004f40 	.word	0x08004f40
 8000a4c:	08004f48 	.word	0x08004f48

08000a50 <joystick_init>:
#include "joystick.h"


void joystick_init(ADC_HandleTypeDef *hadc1, uint32_t *VR) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
    // Inizializza il joystick (se necessario)
    // La configurazione dell'ADC e del DMA dovrebbe essere già fatta nel main.c
    HAL_ADC_Start_DMA(hadc1, VR, 2);
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	6839      	ldr	r1, [r7, #0]
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 ff56 	bl	8001910 <HAL_ADC_Start_DMA>
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <joystick_up>:


int joystick_up(uint32_t *VR) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
    // Leggi il valore del joystick dall'asse Y
    int joy_Y = VR[1];
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3304      	adds	r3, #4
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	60fb      	str	r3, [r7, #12]
    //serial_print("Sono qui nel joystick-up() , value : %d\n",joy_Y);

    // Soglia per rilevare il movimento verso l'alto (da calibrare)
    int threshold_up = 500;
 8000a7c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a80:	60bb      	str	r3, [r7, #8]

    // Ritorna 1 se il joystick è spostato verso l'alto, altrimenti 0
    return (joy_Y < threshold_up) ? 1 : 0;
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	bfb4      	ite	lt
 8000a8a:	2301      	movlt	r3, #1
 8000a8c:	2300      	movge	r3, #0
 8000a8e:	b2db      	uxtb	r3, r3
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <joystick_down>:


int joystick_down(uint32_t *VR) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    // Leggi il valore del joystick dall'asse Y
    int joy_Y = VR[1];
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	60fb      	str	r3, [r7, #12]
    //serial_print("Sono qui nel joystick-down() , value : %d\n",joy_Y);

    // Soglia per rilevare il movimento verso il basso (da calibrare)
    return (joy_Y > 3200) ? 1 : 0;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8000ab2:	bfcc      	ite	gt
 8000ab4:	2301      	movgt	r3, #1
 8000ab6:	2300      	movle	r3, #0
 8000ab8:	b2db      	uxtb	r3, r3
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <joystick_stable>:

int joystick_stable(uint32_t *VR) {
 8000ac6:	b480      	push	{r7}
 8000ac8:	b085      	sub	sp, #20
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
    // Leggi il valore del joystick dall'asse Y
    int joy_Y = VR[1];
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	60fb      	str	r3, [r7, #12]
    //serial_print("Sono qui nel joystick-down() , value : %d\n",joy_Y);

    return (joy_Y>=3000 && joy_Y<=3200) ? 1: 0;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000adc:	4293      	cmp	r3, r2
 8000ade:	dd05      	ble.n	8000aec <joystick_stable+0x26>
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8000ae6:	dc01      	bgt.n	8000aec <joystick_stable+0x26>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e000      	b.n	8000aee <joystick_stable+0x28>
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000afa:	b5b0      	push	{r4, r5, r7, lr}
 8000afc:	b08a      	sub	sp, #40	; 0x28
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000b08:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000b0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000b10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b14:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b18:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000b1a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b1c:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f80e 	bl	8000b50 <Lcd_init>

	return lcd;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	461d      	mov	r5, r3
 8000b38:	f107 0410 	add.w	r4, r7, #16
 8000b3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b44:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	3728      	adds	r7, #40	; 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bdb0      	pop	{r4, r5, r7, pc}

08000b50 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7d9b      	ldrb	r3, [r3, #22]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d10c      	bne.n	8000b7a <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000b60:	2133      	movs	r1, #51	; 0x33
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 f88e 	bl	8000c84 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000b68:	2132      	movs	r1, #50	; 0x32
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f000 f88a 	bl	8000c84 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000b70:	2128      	movs	r1, #40	; 0x28
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f000 f886 	bl	8000c84 <lcd_write_command>
 8000b78:	e003      	b.n	8000b82 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000b7a:	2138      	movs	r1, #56	; 0x38
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f000 f881 	bl	8000c84 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000b82:	2101      	movs	r1, #1
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f000 f87d 	bl	8000c84 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000b8a:	210c      	movs	r1, #12
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f000 f879 	bl	8000c84 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000b92:	2106      	movs	r1, #6
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f000 f875 	bl	8000c84 <lcd_write_command>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000ba2:	b590      	push	{r4, r7, lr}
 8000ba4:	b085      	sub	sp, #20
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]
 8000bb0:	e00a      	b.n	8000bc8 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f000 f88f 	bl	8000ce0 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	73fb      	strb	r3, [r7, #15]
 8000bc8:	7bfc      	ldrb	r4, [r7, #15]
 8000bca:	6838      	ldr	r0, [r7, #0]
 8000bcc:	f7ff fb08 	bl	80001e0 <strlen>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	429c      	cmp	r4, r3
 8000bd4:	d3ed      	bcc.n	8000bb2 <Lcd_string+0x10>
	}
}
 8000bd6:	bf00      	nop
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd90      	pop	{r4, r7, pc}

08000be0 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	70fb      	strb	r3, [r7, #3]
 8000bec:	4613      	mov	r3, r2
 8000bee:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000bf0:	78fb      	ldrb	r3, [r7, #3]
 8000bf2:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <Lcd_cursor+0x30>)
 8000bf4:	5cd2      	ldrb	r2, [r2, r3]
 8000bf6:	78bb      	ldrb	r3, [r7, #2]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	3b80      	subs	r3, #128	; 0x80
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4619      	mov	r1, r3
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 f83e 	bl	8000c84 <lcd_write_command>
	#endif
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	08004f9c 	.word	0x08004f9c

08000c14 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 f830 	bl	8000c84 <lcd_write_command>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <Lcd_define_char>:

void Lcd_define_char(Lcd_HandleTypeDef * lcd, uint8_t code, uint8_t bitmap[]){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	460b      	mov	r3, r1
 8000c36:	607a      	str	r2, [r7, #4]
 8000c38:	72fb      	strb	r3, [r7, #11]
	code &= 0x7; // we only have 8 locations 0-7
 8000c3a:	7afb      	ldrb	r3, [r7, #11]
 8000c3c:	f003 0307 	and.w	r3, r3, #7
 8000c40:	72fb      	strb	r3, [r7, #11]
	lcd_write_command(lcd, SETCGRAM_ADDR | (code << 3));
 8000c42:	7afb      	ldrb	r3, [r7, #11]
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	4619      	mov	r1, r3
 8000c52:	68f8      	ldr	r0, [r7, #12]
 8000c54:	f000 f816 	bl	8000c84 <lcd_write_command>
	for(uint8_t i=0;i<8;++i){
 8000c58:	2300      	movs	r3, #0
 8000c5a:	75fb      	strb	r3, [r7, #23]
 8000c5c:	e00a      	b.n	8000c74 <Lcd_define_char+0x48>
		lcd_write_data(lcd, bitmap[i]);
 8000c5e:	7dfb      	ldrb	r3, [r7, #23]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	4413      	add	r3, r2
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	4619      	mov	r1, r3
 8000c68:	68f8      	ldr	r0, [r7, #12]
 8000c6a:	f000 f839 	bl	8000ce0 <lcd_write_data>
	for(uint8_t i=0;i<8;++i){
 8000c6e:	7dfb      	ldrb	r3, [r7, #23]
 8000c70:	3301      	adds	r3, #1
 8000c72:	75fb      	strb	r3, [r7, #23]
 8000c74:	7dfb      	ldrb	r3, [r7, #23]
 8000c76:	2b07      	cmp	r3, #7
 8000c78:	d9f1      	bls.n	8000c5e <Lcd_define_char+0x32>
	}

}
 8000c7a:	bf00      	nop
 8000c7c:	bf00      	nop
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6898      	ldr	r0, [r3, #8]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	899b      	ldrh	r3, [r3, #12]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f001 ffec 	bl	8002c78 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	7d9b      	ldrb	r3, [r3, #22]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d111      	bne.n	8000ccc <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	091b      	lsrs	r3, r3, #4
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2204      	movs	r2, #4
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f000 f870 	bl	8000d98 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000cb8:	78fb      	ldrb	r3, [r7, #3]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2204      	movs	r2, #4
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f000 f867 	bl	8000d98 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000cca:	e005      	b.n	8000cd8 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	2208      	movs	r2, #8
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 f860 	bl	8000d98 <lcd_write>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6898      	ldr	r0, [r3, #8]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	899b      	ldrh	r3, [r3, #12]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f001 ffbe 	bl	8002c78 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7d9b      	ldrb	r3, [r3, #22]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d111      	bne.n	8000d28 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	091b      	lsrs	r3, r3, #4
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f000 f842 	bl	8000d98 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	4619      	mov	r1, r3
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f000 f839 	bl	8000d98 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000d26:	e005      	b.n	8000d34 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	2208      	movs	r2, #8
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f000 f832 	bl	8000d98 <lcd_write>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <Lcd_write_data>:


void Lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6898      	ldr	r0, [r3, #8]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	899b      	ldrh	r3, [r3, #12]
 8000d50:	2201      	movs	r2, #1
 8000d52:	4619      	mov	r1, r3
 8000d54:	f001 ff90 	bl	8002c78 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	7d9b      	ldrb	r3, [r3, #22]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d111      	bne.n	8000d84 <Lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	091b      	lsrs	r3, r3, #4
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2204      	movs	r2, #4
 8000d68:	4619      	mov	r1, r3
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f000 f814 	bl	8000d98 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000d70:	78fb      	ldrb	r3, [r7, #3]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2204      	movs	r2, #4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f000 f80b 	bl	8000d98 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000d82:	e005      	b.n	8000d90 <Lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	2208      	movs	r2, #8
 8000d88:	4619      	mov	r1, r3
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 f804 	bl	8000d98 <lcd_write>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	70fb      	strb	r3, [r7, #3]
 8000da4:	4613      	mov	r3, r2
 8000da6:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]
 8000dac:	e019      	b.n	8000de2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	8819      	ldrh	r1, [r3, #0]
 8000dc6:	78fa      	ldrb	r2, [r7, #3]
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	fa42 f303 	asr.w	r3, r2, r3
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	f001 ff4e 	bl	8002c78 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	3301      	adds	r3, #1
 8000de0:	73fb      	strb	r3, [r7, #15]
 8000de2:	7bfa      	ldrb	r2, [r7, #15]
 8000de4:	78bb      	ldrb	r3, [r7, #2]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d3e1      	bcc.n	8000dae <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6918      	ldr	r0, [r3, #16]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	8a9b      	ldrh	r3, [r3, #20]
 8000df2:	2201      	movs	r2, #1
 8000df4:	4619      	mov	r1, r3
 8000df6:	f001 ff3f 	bl	8002c78 <HAL_GPIO_WritePin>
	DELAY(1);
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f000 fd20 	bl	8001840 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6918      	ldr	r0, [r3, #16]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	8a9b      	ldrh	r3, [r3, #20]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f001 ff34 	bl	8002c78 <HAL_GPIO_WritePin>
}
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <main>:


// Global variable to hold the score
volatile int score = 0;

int main(void) {
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	f6ad 1dc8 	subw	sp, sp, #2504	; 0x9c8
 8000e1e:	af04      	add	r7, sp, #16
    // HAL (Hardware Abstraction Layer) initialization
    HAL_Init();
 8000e20:	f000 fc9c 	bl	800175c <HAL_Init>

    // System Clock Configuration
    SystemClock_Config();
 8000e24:	f000 f8d6 	bl	8000fd4 <SystemClock_Config>

    // GPIO (General Purpose Input/Output) configuration
    MX_GPIO_Init();
 8000e28:	f000 f9de 	bl	80011e8 <MX_GPIO_Init>

    // Initialize DMA (Direct Memory Access) - Configuration
    MX_DMA_Init();
 8000e2c:	f000 f9bc 	bl	80011a8 <MX_DMA_Init>

    // Initialize ADC (Analog-to-Digital Converter)
    MX_ADC1_Init();
 8000e30:	f000 f930 	bl	8001094 <MX_ADC1_Init>

    // Setup USART (Universal Synchronous/Asynchronous Receiver-Transmitter) Configuration
    MX_USART2_UART_Init();
 8000e34:	f000 f98e 	bl	8001154 <MX_USART2_UART_Init>

    // Configuration for the LCD display ports and pins
    Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 8000e38:	4b5b      	ldr	r3, [pc, #364]	; (8000fa8 <main+0x190>)
 8000e3a:	f507 641a 	add.w	r4, r7, #2464	; 0x9a0
 8000e3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Lcd_PinType pins[] = { GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_6 };
 8000e44:	4a59      	ldr	r2, [pc, #356]	; (8000fac <main+0x194>)
 8000e46:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8000e4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e4e:	e883 0003 	stmia.w	r3, {r0, r1}

    // Create the LCD instance with the defined ports and pins
    lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 8000e52:	4c57      	ldr	r4, [pc, #348]	; (8000fb0 <main+0x198>)
 8000e54:	4638      	mov	r0, r7
 8000e56:	f607 1298 	addw	r2, r7, #2456	; 0x998
 8000e5a:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 8000e5e:	2300      	movs	r3, #0
 8000e60:	9303      	str	r3, [sp, #12]
 8000e62:	2310      	movs	r3, #16
 8000e64:	9302      	str	r3, [sp, #8]
 8000e66:	4b53      	ldr	r3, [pc, #332]	; (8000fb4 <main+0x19c>)
 8000e68:	9301      	str	r3, [sp, #4]
 8000e6a:	2320      	movs	r3, #32
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	4b51      	ldr	r3, [pc, #324]	; (8000fb4 <main+0x19c>)
 8000e70:	f7ff fe43 	bl	8000afa <Lcd_create>
 8000e74:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8000e78:	f6a3 13b8 	subw	r3, r3, #2488	; 0x9b8
 8000e7c:	461d      	mov	r5, r3
 8000e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e82:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e86:	e884 0003 	stmia.w	r4, {r0, r1}

    // Initialize the LCD display
    Lcd_init(&lcd);
 8000e8a:	4849      	ldr	r0, [pc, #292]	; (8000fb0 <main+0x198>)
 8000e8c:	f7ff fe60 	bl	8000b50 <Lcd_init>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(&hadc1, VR, 2);
 8000e90:	2202      	movs	r2, #2
 8000e92:	4949      	ldr	r1, [pc, #292]	; (8000fb8 <main+0x1a0>)
 8000e94:	4849      	ldr	r0, [pc, #292]	; (8000fbc <main+0x1a4>)
 8000e96:	f000 fd3b 	bl	8001910 <HAL_ADC_Start_DMA>

    // Show the welcome message
    Lcd_clear(&lcd); // Clear the LCD display
 8000e9a:	4845      	ldr	r0, [pc, #276]	; (8000fb0 <main+0x198>)
 8000e9c:	f7ff feba 	bl	8000c14 <Lcd_clear>
    Lcd_cursor(&lcd, 0, 1); // Set cursor to row 0, column 1
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4842      	ldr	r0, [pc, #264]	; (8000fb0 <main+0x198>)
 8000ea6:	f7ff fe9b 	bl	8000be0 <Lcd_cursor>
    Lcd_string(&lcd, " Welcome in "); // Display welcome message
 8000eaa:	4945      	ldr	r1, [pc, #276]	; (8000fc0 <main+0x1a8>)
 8000eac:	4840      	ldr	r0, [pc, #256]	; (8000fb0 <main+0x198>)
 8000eae:	f7ff fe78 	bl	8000ba2 <Lcd_string>
    Lcd_cursor(&lcd, 1, 1); // Set cursor to row 1, column 1
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	483e      	ldr	r0, [pc, #248]	; (8000fb0 <main+0x198>)
 8000eb8:	f7ff fe92 	bl	8000be0 <Lcd_cursor>
    Lcd_string(&lcd, " Dino-Game "); // Display game title
 8000ebc:	4941      	ldr	r1, [pc, #260]	; (8000fc4 <main+0x1ac>)
 8000ebe:	483c      	ldr	r0, [pc, #240]	; (8000fb0 <main+0x198>)
 8000ec0:	f7ff fe6f 	bl	8000ba2 <Lcd_string>
    HAL_Delay(2000); // Show the welcome message for 2 seconds
 8000ec4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ec8:	f000 fcba 	bl	8001840 <HAL_Delay>
    Lcd_clear(&lcd); // Clear the LCD display
 8000ecc:	4838      	ldr	r0, [pc, #224]	; (8000fb0 <main+0x198>)
 8000ece:	f7ff fea1 	bl	8000c14 <Lcd_clear>

    // Initialize game structures
    Dino dino; // Create a Dino object
    Obstacles obstacles; // Create an Obstacles object
    game_init(&lcd, &dino, &obstacles); // Initialize the game
 8000ed2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000ed6:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8000eda:	4619      	mov	r1, r3
 8000edc:	4834      	ldr	r0, [pc, #208]	; (8000fb0 <main+0x198>)
 8000ede:	f7ff fb92 	bl	8000606 <game_init>

    int dino_difficulty = 200; // Initial delay
 8000ee2:	23c8      	movs	r3, #200	; 0xc8
 8000ee4:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
    int max_dino_difficulty = 20; // Minimum delay
 8000ee8:	2314      	movs	r3, #20
 8000eea:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
    // Main game loop
    while (1) {
        // Update joystick input commands
        joystick_init(&hadc1, VR); // Initialize joystick with ADC
 8000eee:	4932      	ldr	r1, [pc, #200]	; (8000fb8 <main+0x1a0>)
 8000ef0:	4832      	ldr	r0, [pc, #200]	; (8000fbc <main+0x1a4>)
 8000ef2:	f7ff fdad 	bl	8000a50 <joystick_init>

        // Update the game state
        game_update(VR, &lcd, &dino, &obstacles);
 8000ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000efa:	f607 128c 	addw	r2, r7, #2444	; 0x98c
 8000efe:	492c      	ldr	r1, [pc, #176]	; (8000fb0 <main+0x198>)
 8000f00:	482d      	ldr	r0, [pc, #180]	; (8000fb8 <main+0x1a0>)
 8000f02:	f7ff fb9f 	bl	8000644 <game_update>

        // Draw the current game state on the LCD
        game_draw(&lcd, &dino, &obstacles);
 8000f06:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000f0a:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4827      	ldr	r0, [pc, #156]	; (8000fb0 <main+0x198>)
 8000f12:	f7ff fc31 	bl	8000778 <game_draw>

        // Check for collisions
        if (check_collision(&dino, &obstacles) == 1) {
 8000f16:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000f1a:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fce5 	bl	80008f0 <check_collision>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d123      	bne.n	8000f74 <main+0x15c>
            Lcd_clear(&lcd); // Clear the display for Game Over message
 8000f2c:	4820      	ldr	r0, [pc, #128]	; (8000fb0 <main+0x198>)
 8000f2e:	f7ff fe71 	bl	8000c14 <Lcd_clear>
            Lcd_cursor(&lcd, 0, 0); // Set cursor to the top left corner
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	481e      	ldr	r0, [pc, #120]	; (8000fb0 <main+0x198>)
 8000f38:	f7ff fe52 	bl	8000be0 <Lcd_cursor>
            Lcd_string(&lcd, "Game Over!"); // Display Game Over message
 8000f3c:	4922      	ldr	r1, [pc, #136]	; (8000fc8 <main+0x1b0>)
 8000f3e:	481c      	ldr	r0, [pc, #112]	; (8000fb0 <main+0x198>)
 8000f40:	f7ff fe2f 	bl	8000ba2 <Lcd_string>

            // Prepare score string for display
            char score_str[16];
            sprintf(score_str, "Score: %d", score); // Format score into string
 8000f44:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <main+0x1b4>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4920      	ldr	r1, [pc, #128]	; (8000fd0 <main+0x1b8>)
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 ff08 	bl	8003d64 <siprintf>
            Lcd_cursor(&lcd, 1, 0); // Set cursor to row 1, column 0
 8000f54:	2200      	movs	r2, #0
 8000f56:	2101      	movs	r1, #1
 8000f58:	4815      	ldr	r0, [pc, #84]	; (8000fb0 <main+0x198>)
 8000f5a:	f7ff fe41 	bl	8000be0 <Lcd_cursor>
            Lcd_string(&lcd, score_str); // Display the score
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	4812      	ldr	r0, [pc, #72]	; (8000fb0 <main+0x198>)
 8000f66:	f7ff fe1c 	bl	8000ba2 <Lcd_string>

            // Infinite loop to hold the Game Over screen
            while (1) {
                HAL_Delay(1000); // Keep the Game Over screen for 1 second intervals
 8000f6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f6e:	f000 fc67 	bl	8001840 <HAL_Delay>
 8000f72:	e7fa      	b.n	8000f6a <main+0x152>


        // Difficulty settings - decrease delay to increase game speed

        // Increment the score
        score += 1;
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <main+0x1b4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <main+0x1b4>)
 8000f7c:	6013      	str	r3, [r2, #0]
        // Dino difficulty settings
        HAL_Delay(dino_difficulty); // Delay for the current difficulty level
 8000f7e:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	; 0x9b4
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 fc5c 	bl	8001840 <HAL_Delay>
        if (dino_difficulty > max_dino_difficulty && dino_difficulty>50) {
 8000f88:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 8000f8c:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	; 0x9b0
 8000f90:	429a      	cmp	r2, r3
 8000f92:	ddac      	ble.n	8000eee <main+0xd6>
 8000f94:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	; 0x9b4
 8000f98:	2b32      	cmp	r3, #50	; 0x32
 8000f9a:	dda8      	ble.n	8000eee <main+0xd6>
            dino_difficulty -= 1; // Decrease difficulty level (increase speed)
 8000f9c:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	; 0x9b4
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
        joystick_init(&hadc1, VR); // Initialize joystick with ADC
 8000fa6:	e7a2      	b.n	8000eee <main+0xd6>
 8000fa8:	08004f84 	.word	0x08004f84
 8000fac:	08004f94 	.word	0x08004f94
 8000fb0:	20000174 	.word	0x20000174
 8000fb4:	40020400 	.word	0x40020400
 8000fb8:	2000018c 	.word	0x2000018c
 8000fbc:	20000084 	.word	0x20000084
 8000fc0:	08004f50 	.word	0x08004f50
 8000fc4:	08004f60 	.word	0x08004f60
 8000fc8:	08004f6c 	.word	0x08004f6c
 8000fcc:	20000194 	.word	0x20000194
 8000fd0:	08004f78 	.word	0x08004f78

08000fd4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b094      	sub	sp, #80	; 0x50
 8000fd8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	2230      	movs	r2, #48	; 0x30
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 ff21 	bl	8003e2a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	4b23      	ldr	r3, [pc, #140]	; (800108c <SystemClock_Config+0xb8>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	4a22      	ldr	r2, [pc, #136]	; (800108c <SystemClock_Config+0xb8>)
 8001002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001006:	6413      	str	r3, [r2, #64]	; 0x40
 8001008:	4b20      	ldr	r3, [pc, #128]	; (800108c <SystemClock_Config+0xb8>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <SystemClock_Config+0xbc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001020:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <SystemClock_Config+0xbc>)
 8001022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <SystemClock_Config+0xbc>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001034:	2302      	movs	r3, #2
 8001036:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001038:	2301      	movs	r3, #1
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800103c:	2310      	movs	r3, #16
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001040:	2300      	movs	r3, #0
 8001042:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001044:	f107 0320 	add.w	r3, r7, #32
 8001048:	4618      	mov	r0, r3
 800104a:	f001 fe2f 	bl	8002cac <HAL_RCC_OscConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8001054:	f000 f95e 	bl	8001314 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001058:	230f      	movs	r3, #15
 800105a:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001068:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f002 f891 	bl	800319c <HAL_RCC_ClockConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0xb0>
	{
		Error_Handler();
 8001080:	f000 f948 	bl	8001314 <Error_Handler>
	}
}
 8001084:	bf00      	nop
 8001086:	3750      	adds	r7, #80	; 0x50
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800
 8001090:	40007000 	.word	0x40007000

08001094 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800109a:	463b      	mov	r3, r7
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <MX_ADC1_Init+0xb4>)
 80010a8:	4a28      	ldr	r2, [pc, #160]	; (800114c <MX_ADC1_Init+0xb8>)
 80010aa:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010ac:	4b26      	ldr	r3, [pc, #152]	; (8001148 <MX_ADC1_Init+0xb4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <MX_ADC1_Init+0xb4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 80010b8:	4b23      	ldr	r3, [pc, #140]	; (8001148 <MX_ADC1_Init+0xb4>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <MX_ADC1_Init+0xb4>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <MX_ADC1_Init+0xb4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <MX_ADC1_Init+0xb4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <MX_ADC1_Init+0xb4>)
 80010d4:	4a1e      	ldr	r2, [pc, #120]	; (8001150 <MX_ADC1_Init+0xbc>)
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <MX_ADC1_Init+0xb4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_ADC1_Init+0xb4>)
 80010e0:	2202      	movs	r2, #2
 80010e2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_ADC1_Init+0xb4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <MX_ADC1_Init+0xb4>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f2:	4815      	ldr	r0, [pc, #84]	; (8001148 <MX_ADC1_Init+0xb4>)
 80010f4:	f000 fbc8 	bl	8001888 <HAL_ADC_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 80010fe:	f000 f909 	bl	8001314 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8001102:	230a      	movs	r3, #10
 8001104:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001106:	2301      	movs	r3, #1
 8001108:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800110a:	2307      	movs	r3, #7
 800110c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110e:	463b      	mov	r3, r7
 8001110:	4619      	mov	r1, r3
 8001112:	480d      	ldr	r0, [pc, #52]	; (8001148 <MX_ADC1_Init+0xb4>)
 8001114:	f000 fd0a 	bl	8001b2c <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 800111e:	f000 f8f9 	bl	8001314 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8001122:	230b      	movs	r3, #11
 8001124:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8001126:	2302      	movs	r3, #2
 8001128:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112a:	463b      	mov	r3, r7
 800112c:	4619      	mov	r1, r3
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <MX_ADC1_Init+0xb4>)
 8001130:	f000 fcfc 	bl	8001b2c <HAL_ADC_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_ADC1_Init+0xaa>
	{
		Error_Handler();
 800113a:	f000 f8eb 	bl	8001314 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000084 	.word	0x20000084
 800114c:	40012000 	.word	0x40012000
 8001150:	0f000001 	.word	0x0f000001

08001154 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800115a:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <MX_USART2_UART_Init+0x50>)
 800115c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800118c:	f002 fa26 	bl	80035dc <HAL_UART_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001196:	f000 f8bd 	bl	8001314 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000012c 	.word	0x2000012c
 80011a4:	40004400 	.word	0x40004400

080011a8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_DMA_Init+0x3c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <MX_DMA_Init+0x3c>)
 80011b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_DMA_Init+0x3c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2038      	movs	r0, #56	; 0x38
 80011d0:	f001 f827 	bl	8002222 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011d4:	2038      	movs	r0, #56	; 0x38
 80011d6:	f001 f840 	bl	800225a <HAL_NVIC_EnableIRQ>

}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800

080011e8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b40      	ldr	r3, [pc, #256]	; (8001304 <MX_GPIO_Init+0x11c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a3f      	ldr	r2, [pc, #252]	; (8001304 <MX_GPIO_Init+0x11c>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b3d      	ldr	r3, [pc, #244]	; (8001304 <MX_GPIO_Init+0x11c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b39      	ldr	r3, [pc, #228]	; (8001304 <MX_GPIO_Init+0x11c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a38      	ldr	r2, [pc, #224]	; (8001304 <MX_GPIO_Init+0x11c>)
 8001224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b36      	ldr	r3, [pc, #216]	; (8001304 <MX_GPIO_Init+0x11c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	4b32      	ldr	r3, [pc, #200]	; (8001304 <MX_GPIO_Init+0x11c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a31      	ldr	r2, [pc, #196]	; (8001304 <MX_GPIO_Init+0x11c>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b2f      	ldr	r3, [pc, #188]	; (8001304 <MX_GPIO_Init+0x11c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <MX_GPIO_Init+0x11c>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a2a      	ldr	r2, [pc, #168]	; (8001304 <MX_GPIO_Init+0x11c>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b28      	ldr	r3, [pc, #160]	; (8001304 <MX_GPIO_Init+0x11c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	21e0      	movs	r1, #224	; 0xe0
 8001272:	4825      	ldr	r0, [pc, #148]	; (8001308 <MX_GPIO_Init+0x120>)
 8001274:	f001 fd00 	bl	8002c78 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2180      	movs	r1, #128	; 0x80
 800127c:	4823      	ldr	r0, [pc, #140]	; (800130c <MX_GPIO_Init+0x124>)
 800127e:	f001 fcfb 	bl	8002c78 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2170      	movs	r1, #112	; 0x70
 8001286:	4822      	ldr	r0, [pc, #136]	; (8001310 <MX_GPIO_Init+0x128>)
 8001288:	f001 fcf6 	bl	8002c78 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800128c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001290:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001292:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001296:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	481a      	ldr	r0, [pc, #104]	; (800130c <MX_GPIO_Init+0x124>)
 80012a4:	f001 fb64 	bl	8002970 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA6 PA7 */
	GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 80012a8:	23e0      	movs	r3, #224	; 0xe0
 80012aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4812      	ldr	r0, [pc, #72]	; (8001308 <MX_GPIO_Init+0x120>)
 80012c0:	f001 fb56 	bl	8002970 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	480c      	ldr	r0, [pc, #48]	; (800130c <MX_GPIO_Init+0x124>)
 80012dc:	f001 fb48 	bl	8002970 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB4 PB5 PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80012e0:	2370      	movs	r3, #112	; 0x70
 80012e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <MX_GPIO_Init+0x128>)
 80012f8:	f001 fb3a 	bl	8002970 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	; 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020800 	.word	0x40020800
 8001310:	40020400 	.word	0x40020400

08001314 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001318:	b672      	cpsid	i
}
 800131a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800131c:	e7fe      	b.n	800131c <Error_Handler+0x8>
	...

08001320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <HAL_MspInit+0x4c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a0f      	ldr	r2, [pc, #60]	; (800136c <HAL_MspInit+0x4c>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_MspInit+0x4c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <HAL_MspInit+0x4c>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800135e:	2007      	movs	r0, #7
 8001360:	f000 ff54 	bl	800220c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800

08001370 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a2f      	ldr	r2, [pc, #188]	; (800144c <HAL_ADC_MspInit+0xdc>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d157      	bne.n	8001442 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <HAL_ADC_MspInit+0xe0>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a2d      	ldr	r2, [pc, #180]	; (8001450 <HAL_ADC_MspInit+0xe0>)
 800139c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <HAL_ADC_MspInit+0xe0>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b27      	ldr	r3, [pc, #156]	; (8001450 <HAL_ADC_MspInit+0xe0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a26      	ldr	r2, [pc, #152]	; (8001450 <HAL_ADC_MspInit+0xe0>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b24      	ldr	r3, [pc, #144]	; (8001450 <HAL_ADC_MspInit+0xe0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013ca:	2303      	movs	r3, #3
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ce:	2303      	movs	r3, #3
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	481d      	ldr	r0, [pc, #116]	; (8001454 <HAL_ADC_MspInit+0xe4>)
 80013de:	f001 fac7 	bl	8002970 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 80013e4:	4a1d      	ldr	r2, [pc, #116]	; (800145c <HAL_ADC_MspInit+0xec>)
 80013e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 80013fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001400:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 8001404:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001408:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 800140c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001410:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 8001414:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001418:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001426:	480c      	ldr	r0, [pc, #48]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 8001428:	f000 ff32 	bl	8002290 <HAL_DMA_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001432:	f7ff ff6f 	bl	8001314 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 800143a:	639a      	str	r2, [r3, #56]	; 0x38
 800143c:	4a06      	ldr	r2, [pc, #24]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40012000 	.word	0x40012000
 8001450:	40023800 	.word	0x40023800
 8001454:	40020800 	.word	0x40020800
 8001458:	200000cc 	.word	0x200000cc
 800145c:	40026410 	.word	0x40026410

08001460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <HAL_UART_MspInit+0x84>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d12b      	bne.n	80014da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_UART_MspInit+0x88>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <HAL_UART_MspInit+0x88>)
 800148c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_UART_MspInit+0x88>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_UART_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <HAL_UART_MspInit+0x88>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <HAL_UART_MspInit+0x88>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014ba:	230c      	movs	r3, #12
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ca:	2307      	movs	r3, #7
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <HAL_UART_MspInit+0x8c>)
 80014d6:	f001 fa4b 	bl	8002970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40004400 	.word	0x40004400
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f4:	e7fe      	b.n	80014f4 <NMI_Handler+0x4>

080014f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <MemManage_Handler+0x4>

08001502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <UsageFault_Handler+0x4>

0800150e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153c:	f000 f960 	bl	8001800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <DMA2_Stream0_IRQHandler+0x10>)
 800154a:	f000 ffa7 	bl	800249c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200000cc 	.word	0x200000cc

08001558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return 1;
 800155c:	2301      	movs	r3, #1
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_kill>:

int _kill(int pid, int sig)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001572:	f002 fca9 	bl	8003ec8 <__errno>
 8001576:	4603      	mov	r3, r0
 8001578:	2216      	movs	r2, #22
 800157a:	601a      	str	r2, [r3, #0]
  return -1;
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <_exit>:

void _exit (int status)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001590:	f04f 31ff 	mov.w	r1, #4294967295
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ffe7 	bl	8001568 <_kill>
  while (1) {}    /* Make sure we hang here */
 800159a:	e7fe      	b.n	800159a <_exit+0x12>

0800159c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	e00a      	b.n	80015c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ae:	f3af 8000 	nop.w
 80015b2:	4601      	mov	r1, r0
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	60ba      	str	r2, [r7, #8]
 80015ba:	b2ca      	uxtb	r2, r1
 80015bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbf0      	blt.n	80015ae <_read+0x12>
  }

  return len;
 80015cc:	687b      	ldr	r3, [r7, #4]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	e009      	b.n	80015fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	60ba      	str	r2, [r7, #8]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3301      	adds	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	dbf1      	blt.n	80015e8 <_write+0x12>
  }
  return len;
 8001604:	687b      	ldr	r3, [r7, #4]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_close>:

int _close(int file)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001636:	605a      	str	r2, [r3, #4]
  return 0;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_isatty>:

int _isatty(int file)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001680:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <_sbrk+0x5c>)
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <_sbrk+0x60>)
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <_sbrk+0x64>)
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <_sbrk+0x68>)
 8001698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d207      	bcs.n	80016b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a8:	f002 fc0e 	bl	8003ec8 <__errno>
 80016ac:	4603      	mov	r3, r0
 80016ae:	220c      	movs	r2, #12
 80016b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e009      	b.n	80016cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	4a05      	ldr	r2, [pc, #20]	; (80016dc <_sbrk+0x64>)
 80016c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20018000 	.word	0x20018000
 80016d8:	00000400 	.word	0x00000400
 80016dc:	20000198 	.word	0x20000198
 80016e0:	200002f0 	.word	0x200002f0

080016e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <SystemInit+0x20>)
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ee:	4a05      	ldr	r2, [pc, #20]	; (8001704 <SystemInit+0x20>)
 80016f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
	}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001740 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800170c:	f7ff ffea 	bl	80016e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001712:	490d      	ldr	r1, [pc, #52]	; (8001748 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001714:	4a0d      	ldr	r2, [pc, #52]	; (800174c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001718:	e002      	b.n	8001720 <LoopCopyDataInit>

0800171a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800171c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171e:	3304      	adds	r3, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001724:	d3f9      	bcc.n	800171a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001728:	4c0a      	ldr	r4, [pc, #40]	; (8001754 <LoopFillZerobss+0x22>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800172c:	e001      	b.n	8001732 <LoopFillZerobss>

0800172e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001730:	3204      	adds	r2, #4

08001732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001734:	d3fb      	bcc.n	800172e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001736:	f002 fbcd 	bl	8003ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173a:	f7ff fb6d 	bl	8000e18 <main>
  bx  lr    
 800173e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001740:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001748:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800174c:	080050b0 	.word	0x080050b0
  ldr r2, =_sbss
 8001750:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001754:	200002ec 	.word	0x200002ec

08001758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001758:	e7fe      	b.n	8001758 <ADC_IRQHandler>
	...

0800175c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001760:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <HAL_Init+0x40>)
 8001766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800176a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0a      	ldr	r2, [pc, #40]	; (800179c <HAL_Init+0x40>)
 8001772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001776:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <HAL_Init+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a07      	ldr	r2, [pc, #28]	; (800179c <HAL_Init+0x40>)
 800177e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001784:	2003      	movs	r0, #3
 8001786:	f000 fd41 	bl	800220c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800178a:	2000      	movs	r0, #0
 800178c:	f000 f808 	bl	80017a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001790:	f7ff fdc6 	bl	8001320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023c00 	.word	0x40023c00

080017a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_InitTick+0x54>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_InitTick+0x58>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4619      	mov	r1, r3
 80017b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 fd59 	bl	8002276 <HAL_SYSTICK_Config>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00e      	b.n	80017ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b0f      	cmp	r3, #15
 80017d2:	d80a      	bhi.n	80017ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d4:	2200      	movs	r2, #0
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f000 fd21 	bl	8002222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e0:	4a06      	ldr	r2, [pc, #24]	; (80017fc <HAL_InitTick+0x5c>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e000      	b.n	80017ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000000 	.word	0x20000000
 80017f8:	20000008 	.word	0x20000008
 80017fc:	20000004 	.word	0x20000004

08001800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_IncTick+0x20>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_IncTick+0x24>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4413      	add	r3, r2
 8001810:	4a04      	ldr	r2, [pc, #16]	; (8001824 <HAL_IncTick+0x24>)
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000008 	.word	0x20000008
 8001824:	2000019c 	.word	0x2000019c

08001828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return uwTick;
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_GetTick+0x14>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	2000019c 	.word	0x2000019c

08001840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001848:	f7ff ffee 	bl	8001828 <HAL_GetTick>
 800184c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001858:	d005      	beq.n	8001866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_Delay+0x44>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4413      	add	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001866:	bf00      	nop
 8001868:	f7ff ffde 	bl	8001828 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	429a      	cmp	r2, r3
 8001876:	d8f7      	bhi.n	8001868 <HAL_Delay+0x28>
  {
  }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000008 	.word	0x20000008

08001888 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e033      	b.n	8001906 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff fd62 	bl	8001370 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d118      	bne.n	80018f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018ce:	f023 0302 	bic.w	r3, r3, #2
 80018d2:	f043 0202 	orr.w	r2, r3, #2
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fa48 	bl	8001d70 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f023 0303 	bic.w	r3, r3, #3
 80018ee:	f043 0201 	orr.w	r2, r3, #1
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	641a      	str	r2, [r3, #64]	; 0x40
 80018f6:	e001      	b.n	80018fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001904:	7bfb      	ldrb	r3, [r7, #15]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_ADC_Start_DMA+0x1e>
 800192a:	2302      	movs	r3, #2
 800192c:	e0ce      	b.n	8001acc <HAL_ADC_Start_DMA+0x1bc>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b01      	cmp	r3, #1
 8001942:	d018      	beq.n	8001976 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0201 	orr.w	r2, r2, #1
 8001952:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001954:	4b5f      	ldr	r3, [pc, #380]	; (8001ad4 <HAL_ADC_Start_DMA+0x1c4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a5f      	ldr	r2, [pc, #380]	; (8001ad8 <HAL_ADC_Start_DMA+0x1c8>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	0c9a      	lsrs	r2, r3, #18
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001968:	e002      	b.n	8001970 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	3b01      	subs	r3, #1
 800196e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f9      	bne.n	800196a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001984:	d107      	bne.n	8001996 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001994:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	f040 8086 	bne.w	8001ab2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d007      	beq.n	80019d8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019e4:	d106      	bne.n	80019f4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f023 0206 	bic.w	r2, r3, #6
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	645a      	str	r2, [r3, #68]	; 0x44
 80019f2:	e002      	b.n	80019fa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a02:	4b36      	ldr	r3, [pc, #216]	; (8001adc <HAL_ADC_Start_DMA+0x1cc>)
 8001a04:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0a:	4a35      	ldr	r2, [pc, #212]	; (8001ae0 <HAL_ADC_Start_DMA+0x1d0>)
 8001a0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a12:	4a34      	ldr	r2, [pc, #208]	; (8001ae4 <HAL_ADC_Start_DMA+0x1d4>)
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1a:	4a33      	ldr	r2, [pc, #204]	; (8001ae8 <HAL_ADC_Start_DMA+0x1d8>)
 8001a1c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a26:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a36:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a46:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	334c      	adds	r3, #76	; 0x4c
 8001a52:	4619      	mov	r1, r3
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f000 fcc8 	bl	80023ec <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10f      	bne.n	8001a88 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d129      	bne.n	8001aca <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	e020      	b.n	8001aca <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a17      	ldr	r2, [pc, #92]	; (8001aec <HAL_ADC_Start_DMA+0x1dc>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d11b      	bne.n	8001aca <HAL_ADC_Start_DMA+0x1ba>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d114      	bne.n	8001aca <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	e00b      	b.n	8001aca <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f043 0210 	orr.w	r2, r3, #16
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f043 0201 	orr.w	r2, r3, #1
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	431bde83 	.word	0x431bde83
 8001adc:	40012300 	.word	0x40012300
 8001ae0:	08001f69 	.word	0x08001f69
 8001ae4:	08002023 	.word	0x08002023
 8001ae8:	0800203f 	.word	0x0800203f
 8001aec:	40012000 	.word	0x40012000

08001af0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1c>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e105      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x228>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b09      	cmp	r3, #9
 8001b56:	d925      	bls.n	8001ba4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68d9      	ldr	r1, [r3, #12]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b1e      	subs	r3, #30
 8001b6e:	2207      	movs	r2, #7
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43da      	mvns	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68d9      	ldr	r1, [r3, #12]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	4603      	mov	r3, r0
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4403      	add	r3, r0
 8001b96:	3b1e      	subs	r3, #30
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	e022      	b.n	8001bea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6919      	ldr	r1, [r3, #16]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	2207      	movs	r2, #7
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6919      	ldr	r1, [r3, #16]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	4618      	mov	r0, r3
 8001bda:	4603      	mov	r3, r0
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4403      	add	r3, r0
 8001be0:	409a      	lsls	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d824      	bhi.n	8001c3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	3b05      	subs	r3, #5
 8001c04:	221f      	movs	r2, #31
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	400a      	ands	r2, r1
 8001c12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	4618      	mov	r0, r3
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3b05      	subs	r3, #5
 8001c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	635a      	str	r2, [r3, #52]	; 0x34
 8001c3a:	e04c      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b0c      	cmp	r3, #12
 8001c42:	d824      	bhi.n	8001c8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	3b23      	subs	r3, #35	; 0x23
 8001c56:	221f      	movs	r2, #31
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43da      	mvns	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	400a      	ands	r2, r1
 8001c64:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b23      	subs	r3, #35	; 0x23
 8001c80:	fa00 f203 	lsl.w	r2, r0, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c8c:	e023      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3b41      	subs	r3, #65	; 0x41
 8001ca0:	221f      	movs	r2, #31
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	400a      	ands	r2, r1
 8001cae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3b41      	subs	r3, #65	; 0x41
 8001cca:	fa00 f203 	lsl.w	r2, r0, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd6:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <HAL_ADC_ConfigChannel+0x234>)
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a21      	ldr	r2, [pc, #132]	; (8001d64 <HAL_ADC_ConfigChannel+0x238>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d109      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b12      	cmp	r3, #18
 8001cea:	d105      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a19      	ldr	r2, [pc, #100]	; (8001d64 <HAL_ADC_ConfigChannel+0x238>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d123      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x21e>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b10      	cmp	r3, #16
 8001d08:	d003      	beq.n	8001d12 <HAL_ADC_ConfigChannel+0x1e6>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b11      	cmp	r3, #17
 8001d10:	d11b      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	d111      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_ADC_ConfigChannel+0x23c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <HAL_ADC_ConfigChannel+0x240>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	0c9a      	lsrs	r2, r3, #18
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d3c:	e002      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f9      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	40012300 	.word	0x40012300
 8001d64:	40012000 	.word	0x40012000
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	431bde83 	.word	0x431bde83

08001d70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d78:	4b79      	ldr	r3, [pc, #484]	; (8001f60 <ADC_Init+0x1f0>)
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	431a      	orrs	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001da4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6859      	ldr	r1, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	021a      	lsls	r2, r3, #8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6899      	ldr	r1, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	4a58      	ldr	r2, [pc, #352]	; (8001f64 <ADC_Init+0x1f4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d022      	beq.n	8001e4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6899      	ldr	r1, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6899      	ldr	r1, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	e00f      	b.n	8001e6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e6c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0202 	bic.w	r2, r2, #2
 8001e7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6899      	ldr	r1, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7e1b      	ldrb	r3, [r3, #24]
 8001e88:	005a      	lsls	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d01b      	beq.n	8001ed4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eaa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001eba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6859      	ldr	r1, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	035a      	lsls	r2, r3, #13
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	e007      	b.n	8001ee4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	051a      	lsls	r2, r3, #20
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6899      	ldr	r1, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f26:	025a      	lsls	r2, r3, #9
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6899      	ldr	r1, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	029a      	lsls	r2, r3, #10
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	609a      	str	r2, [r3, #8]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40012300 	.word	0x40012300
 8001f64:	0f000001 	.word	0x0f000001

08001f68 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f74:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d13c      	bne.n	8001ffc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d12b      	bne.n	8001ff4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d127      	bne.n	8001ff4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001faa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d006      	beq.n	8001fc0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d119      	bne.n	8001ff4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0220 	bic.w	r2, r2, #32
 8001fce:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d105      	bne.n	8001ff4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	f043 0201 	orr.w	r2, r3, #1
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f7ff fd7b 	bl	8001af0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ffa:	e00e      	b.n	800201a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f7ff fd85 	bl	8001b18 <HAL_ADC_ErrorCallback>
}
 800200e:	e004      	b.n	800201a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	4798      	blx	r3
}
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f7ff fd67 	bl	8001b04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2240      	movs	r2, #64	; 0x40
 8002050:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	f043 0204 	orr.w	r2, r3, #4
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f7ff fd5a 	bl	8001b18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002064:	bf00      	nop
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002088:	4013      	ands	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800209c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209e:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	60d3      	str	r3, [r2, #12]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <__NVIC_GetPriorityGrouping+0x18>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	f003 0307 	and.w	r3, r3, #7
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db0b      	blt.n	80020fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	4907      	ldr	r1, [pc, #28]	; (8002108 <__NVIC_EnableIRQ+0x38>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	2001      	movs	r0, #1
 80020f2:	fa00 f202 	lsl.w	r2, r0, r2
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e100 	.word	0xe000e100

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db0a      	blt.n	8002136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	490c      	ldr	r1, [pc, #48]	; (8002158 <__NVIC_SetPriority+0x4c>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	440b      	add	r3, r1
 8002130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002134:	e00a      	b.n	800214c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4908      	ldr	r1, [pc, #32]	; (800215c <__NVIC_SetPriority+0x50>)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	3b04      	subs	r3, #4
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	440b      	add	r3, r1
 800214a:	761a      	strb	r2, [r3, #24]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	; 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f1c3 0307 	rsb	r3, r3, #7
 800217a:	2b04      	cmp	r3, #4
 800217c:	bf28      	it	cs
 800217e:	2304      	movcs	r3, #4
 8002180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3304      	adds	r3, #4
 8002186:	2b06      	cmp	r3, #6
 8002188:	d902      	bls.n	8002190 <NVIC_EncodePriority+0x30>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3b03      	subs	r3, #3
 800218e:	e000      	b.n	8002192 <NVIC_EncodePriority+0x32>
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	f04f 32ff 	mov.w	r2, #4294967295
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	401a      	ands	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43d9      	mvns	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	4313      	orrs	r3, r2
         );
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	; 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d8:	d301      	bcc.n	80021de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021da:	2301      	movs	r3, #1
 80021dc:	e00f      	b.n	80021fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <SysTick_Config+0x40>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e6:	210f      	movs	r1, #15
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ec:	f7ff ff8e 	bl	800210c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <SysTick_Config+0x40>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <SysTick_Config+0x40>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000e010 	.word	0xe000e010

0800220c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff29 	bl	800206c <__NVIC_SetPriorityGrouping>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff3e 	bl	80020b4 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff8e 	bl	8002160 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5d 	bl	800210c <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff31 	bl	80020d0 <__NVIC_EnableIRQ>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ffa2 	bl	80021c8 <SysTick_Config>
 8002284:	4603      	mov	r3, r0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff fac4 	bl	8001828 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e099      	b.n	80023e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022cc:	e00f      	b.n	80022ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ce:	f7ff faab 	bl	8001828 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b05      	cmp	r3, #5
 80022da:	d908      	bls.n	80022ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2203      	movs	r2, #3
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e078      	b.n	80023e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1e8      	bne.n	80022ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	4b38      	ldr	r3, [pc, #224]	; (80023e8 <HAL_DMA_Init+0x158>)
 8002308:	4013      	ands	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800231a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002326:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002332:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4313      	orrs	r3, r2
 800233e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	2b04      	cmp	r3, #4
 8002346:	d107      	bne.n	8002358 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	4313      	orrs	r3, r2
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f023 0307 	bic.w	r3, r3, #7
 800236e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	4313      	orrs	r3, r2
 8002378:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	2b04      	cmp	r3, #4
 8002380:	d117      	bne.n	80023b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00e      	beq.n	80023b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 fa6f 	bl	8002878 <DMA_CheckFifoParam>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2240      	movs	r2, #64	; 0x40
 80023a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023ae:	2301      	movs	r3, #1
 80023b0:	e016      	b.n	80023e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fa26 	bl	800280c <DMA_CalcBaseAndBitshift>
 80023c0:	4603      	mov	r3, r0
 80023c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c8:	223f      	movs	r2, #63	; 0x3f
 80023ca:	409a      	lsls	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	f010803f 	.word	0xf010803f

080023ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_DMA_Start_IT+0x26>
 800240e:	2302      	movs	r3, #2
 8002410:	e040      	b.n	8002494 <HAL_DMA_Start_IT+0xa8>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d12f      	bne.n	8002486 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2202      	movs	r2, #2
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f9b8 	bl	80027b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002444:	223f      	movs	r2, #63	; 0x3f
 8002446:	409a      	lsls	r2, r3
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0216 	orr.w	r2, r2, #22
 800245a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	2b00      	cmp	r3, #0
 8002462:	d007      	beq.n	8002474 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0208 	orr.w	r2, r2, #8
 8002472:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	e005      	b.n	8002492 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800248e:	2302      	movs	r3, #2
 8002490:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002492:	7dfb      	ldrb	r3, [r7, #23]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024a8:	4b8e      	ldr	r3, [pc, #568]	; (80026e4 <HAL_DMA_IRQHandler+0x248>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a8e      	ldr	r2, [pc, #568]	; (80026e8 <HAL_DMA_IRQHandler+0x24c>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	0a9b      	lsrs	r3, r3, #10
 80024b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c6:	2208      	movs	r2, #8
 80024c8:	409a      	lsls	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d01a      	beq.n	8002508 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d013      	beq.n	8002508 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0204 	bic.w	r2, r2, #4
 80024ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	2208      	movs	r2, #8
 80024f6:	409a      	lsls	r2, r3
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002500:	f043 0201 	orr.w	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	2201      	movs	r2, #1
 800250e:	409a      	lsls	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4013      	ands	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d012      	beq.n	800253e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00b      	beq.n	800253e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252a:	2201      	movs	r2, #1
 800252c:	409a      	lsls	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002536:	f043 0202 	orr.w	r2, r3, #2
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002542:	2204      	movs	r2, #4
 8002544:	409a      	lsls	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4013      	ands	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d012      	beq.n	8002574 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00b      	beq.n	8002574 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	2204      	movs	r2, #4
 8002562:	409a      	lsls	r2, r3
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256c:	f043 0204 	orr.w	r2, r3, #4
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002578:	2210      	movs	r2, #16
 800257a:	409a      	lsls	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d043      	beq.n	800260c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d03c      	beq.n	800260c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002596:	2210      	movs	r2, #16
 8002598:	409a      	lsls	r2, r3
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d018      	beq.n	80025de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d108      	bne.n	80025cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d024      	beq.n	800260c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	4798      	blx	r3
 80025ca:	e01f      	b.n	800260c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01b      	beq.n	800260c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
 80025dc:	e016      	b.n	800260c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d107      	bne.n	80025fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0208 	bic.w	r2, r2, #8
 80025fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002610:	2220      	movs	r2, #32
 8002612:	409a      	lsls	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4013      	ands	r3, r2
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 808f 	beq.w	800273c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 8087 	beq.w	800273c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002632:	2220      	movs	r2, #32
 8002634:	409a      	lsls	r2, r3
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b05      	cmp	r3, #5
 8002644:	d136      	bne.n	80026b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0216 	bic.w	r2, r2, #22
 8002654:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002664:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d103      	bne.n	8002676 <HAL_DMA_IRQHandler+0x1da>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0208 	bic.w	r2, r2, #8
 8002684:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	223f      	movs	r2, #63	; 0x3f
 800268c:	409a      	lsls	r2, r3
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d07e      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	4798      	blx	r3
        }
        return;
 80026b2:	e079      	b.n	80027a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01d      	beq.n	80026fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10d      	bne.n	80026ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d031      	beq.n	800273c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	4798      	blx	r3
 80026e0:	e02c      	b.n	800273c <HAL_DMA_IRQHandler+0x2a0>
 80026e2:	bf00      	nop
 80026e4:	20000000 	.word	0x20000000
 80026e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d023      	beq.n	800273c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	4798      	blx	r3
 80026fc:	e01e      	b.n	800273c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10f      	bne.n	800272c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0210 	bic.w	r2, r2, #16
 800271a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002740:	2b00      	cmp	r3, #0
 8002742:	d032      	beq.n	80027aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d022      	beq.n	8002796 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2205      	movs	r2, #5
 8002754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	3301      	adds	r3, #1
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	429a      	cmp	r2, r3
 8002772:	d307      	bcc.n	8002784 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f2      	bne.n	8002768 <HAL_DMA_IRQHandler+0x2cc>
 8002782:	e000      	b.n	8002786 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002784:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	4798      	blx	r3
 80027a6:	e000      	b.n	80027aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80027a8:	bf00      	nop
    }
  }
}
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b40      	cmp	r3, #64	; 0x40
 80027dc:	d108      	bne.n	80027f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027ee:	e007      	b.n	8002800 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	60da      	str	r2, [r3, #12]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	3b10      	subs	r3, #16
 800281c:	4a14      	ldr	r2, [pc, #80]	; (8002870 <DMA_CalcBaseAndBitshift+0x64>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	091b      	lsrs	r3, r3, #4
 8002824:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002826:	4a13      	ldr	r2, [pc, #76]	; (8002874 <DMA_CalcBaseAndBitshift+0x68>)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4413      	add	r3, r2
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2b03      	cmp	r3, #3
 8002838:	d909      	bls.n	800284e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002842:	f023 0303 	bic.w	r3, r3, #3
 8002846:	1d1a      	adds	r2, r3, #4
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	659a      	str	r2, [r3, #88]	; 0x58
 800284c:	e007      	b.n	800285e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002856:	f023 0303 	bic.w	r3, r3, #3
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	aaaaaaab 	.word	0xaaaaaaab
 8002874:	08004fb8 	.word	0x08004fb8

08002878 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d11f      	bne.n	80028d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b03      	cmp	r3, #3
 8002896:	d856      	bhi.n	8002946 <DMA_CheckFifoParam+0xce>
 8002898:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <DMA_CheckFifoParam+0x28>)
 800289a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289e:	bf00      	nop
 80028a0:	080028b1 	.word	0x080028b1
 80028a4:	080028c3 	.word	0x080028c3
 80028a8:	080028b1 	.word	0x080028b1
 80028ac:	08002947 	.word	0x08002947
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d046      	beq.n	800294a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028c0:	e043      	b.n	800294a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028ca:	d140      	bne.n	800294e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d0:	e03d      	b.n	800294e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028da:	d121      	bne.n	8002920 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d837      	bhi.n	8002952 <DMA_CheckFifoParam+0xda>
 80028e2:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <DMA_CheckFifoParam+0x70>)
 80028e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e8:	080028f9 	.word	0x080028f9
 80028ec:	080028ff 	.word	0x080028ff
 80028f0:	080028f9 	.word	0x080028f9
 80028f4:	08002911 	.word	0x08002911
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
      break;
 80028fc:	e030      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002902:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d025      	beq.n	8002956 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800290e:	e022      	b.n	8002956 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002918:	d11f      	bne.n	800295a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800291e:	e01c      	b.n	800295a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d903      	bls.n	800292e <DMA_CheckFifoParam+0xb6>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d003      	beq.n	8002934 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800292c:	e018      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
      break;
 8002932:	e015      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00e      	beq.n	800295e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
      break;
 8002944:	e00b      	b.n	800295e <DMA_CheckFifoParam+0xe6>
      break;
 8002946:	bf00      	nop
 8002948:	e00a      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      break;
 800294a:	bf00      	nop
 800294c:	e008      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      break;
 800294e:	bf00      	nop
 8002950:	e006      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      break;
 8002952:	bf00      	nop
 8002954:	e004      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      break;
 8002956:	bf00      	nop
 8002958:	e002      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      break;   
 800295a:	bf00      	nop
 800295c:	e000      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      break;
 800295e:	bf00      	nop
    }
  } 
  
  return status; 
 8002960:	7bfb      	ldrb	r3, [r7, #15]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop

08002970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	e159      	b.n	8002c40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800298c:	2201      	movs	r2, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	f040 8148 	bne.w	8002c3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d005      	beq.n	80029c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d130      	bne.n	8002a24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	2203      	movs	r2, #3
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029f8:	2201      	movs	r2, #1
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	f003 0201 	and.w	r2, r3, #1
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d017      	beq.n	8002a60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d123      	bne.n	8002ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	08da      	lsrs	r2, r3, #3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3208      	adds	r2, #8
 8002a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	220f      	movs	r2, #15
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	08da      	lsrs	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3208      	adds	r2, #8
 8002aae:	69b9      	ldr	r1, [r7, #24]
 8002ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	2203      	movs	r2, #3
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0203 	and.w	r2, r3, #3
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80a2 	beq.w	8002c3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	4b57      	ldr	r3, [pc, #348]	; (8002c58 <HAL_GPIO_Init+0x2e8>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	4a56      	ldr	r2, [pc, #344]	; (8002c58 <HAL_GPIO_Init+0x2e8>)
 8002b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b04:	6453      	str	r3, [r2, #68]	; 0x44
 8002b06:	4b54      	ldr	r3, [pc, #336]	; (8002c58 <HAL_GPIO_Init+0x2e8>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b12:	4a52      	ldr	r2, [pc, #328]	; (8002c5c <HAL_GPIO_Init+0x2ec>)
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	3302      	adds	r3, #2
 8002b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	220f      	movs	r2, #15
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a49      	ldr	r2, [pc, #292]	; (8002c60 <HAL_GPIO_Init+0x2f0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d019      	beq.n	8002b72 <HAL_GPIO_Init+0x202>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a48      	ldr	r2, [pc, #288]	; (8002c64 <HAL_GPIO_Init+0x2f4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d013      	beq.n	8002b6e <HAL_GPIO_Init+0x1fe>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a47      	ldr	r2, [pc, #284]	; (8002c68 <HAL_GPIO_Init+0x2f8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00d      	beq.n	8002b6a <HAL_GPIO_Init+0x1fa>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a46      	ldr	r2, [pc, #280]	; (8002c6c <HAL_GPIO_Init+0x2fc>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d007      	beq.n	8002b66 <HAL_GPIO_Init+0x1f6>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a45      	ldr	r2, [pc, #276]	; (8002c70 <HAL_GPIO_Init+0x300>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d101      	bne.n	8002b62 <HAL_GPIO_Init+0x1f2>
 8002b5e:	2304      	movs	r3, #4
 8002b60:	e008      	b.n	8002b74 <HAL_GPIO_Init+0x204>
 8002b62:	2307      	movs	r3, #7
 8002b64:	e006      	b.n	8002b74 <HAL_GPIO_Init+0x204>
 8002b66:	2303      	movs	r3, #3
 8002b68:	e004      	b.n	8002b74 <HAL_GPIO_Init+0x204>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e002      	b.n	8002b74 <HAL_GPIO_Init+0x204>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <HAL_GPIO_Init+0x204>
 8002b72:	2300      	movs	r3, #0
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	f002 0203 	and.w	r2, r2, #3
 8002b7a:	0092      	lsls	r2, r2, #2
 8002b7c:	4093      	lsls	r3, r2
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b84:	4935      	ldr	r1, [pc, #212]	; (8002c5c <HAL_GPIO_Init+0x2ec>)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b92:	4b38      	ldr	r3, [pc, #224]	; (8002c74 <HAL_GPIO_Init+0x304>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bb6:	4a2f      	ldr	r2, [pc, #188]	; (8002c74 <HAL_GPIO_Init+0x304>)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bbc:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <HAL_GPIO_Init+0x304>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002be0:	4a24      	ldr	r2, [pc, #144]	; (8002c74 <HAL_GPIO_Init+0x304>)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002be6:	4b23      	ldr	r3, [pc, #140]	; (8002c74 <HAL_GPIO_Init+0x304>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c0a:	4a1a      	ldr	r2, [pc, #104]	; (8002c74 <HAL_GPIO_Init+0x304>)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c10:	4b18      	ldr	r3, [pc, #96]	; (8002c74 <HAL_GPIO_Init+0x304>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c34:	4a0f      	ldr	r2, [pc, #60]	; (8002c74 <HAL_GPIO_Init+0x304>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b0f      	cmp	r3, #15
 8002c44:	f67f aea2 	bls.w	800298c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	3724      	adds	r7, #36	; 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40013800 	.word	0x40013800
 8002c60:	40020000 	.word	0x40020000
 8002c64:	40020400 	.word	0x40020400
 8002c68:	40020800 	.word	0x40020800
 8002c6c:	40020c00 	.word	0x40020c00
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40013c00 	.word	0x40013c00

08002c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	807b      	strh	r3, [r7, #2]
 8002c84:	4613      	mov	r3, r2
 8002c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c88:	787b      	ldrb	r3, [r7, #1]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c94:	e003      	b.n	8002c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c96:	887b      	ldrh	r3, [r7, #2]
 8002c98:	041a      	lsls	r2, r3, #16
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	619a      	str	r2, [r3, #24]
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e267      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d075      	beq.n	8002db6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cca:	4b88      	ldr	r3, [pc, #544]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d00c      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd6:	4b85      	ldr	r3, [pc, #532]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d112      	bne.n	8002d08 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce2:	4b82      	ldr	r3, [pc, #520]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cee:	d10b      	bne.n	8002d08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf0:	4b7e      	ldr	r3, [pc, #504]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d05b      	beq.n	8002db4 <HAL_RCC_OscConfig+0x108>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d157      	bne.n	8002db4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e242      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d10:	d106      	bne.n	8002d20 <HAL_RCC_OscConfig+0x74>
 8002d12:	4b76      	ldr	r3, [pc, #472]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a75      	ldr	r2, [pc, #468]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e01d      	b.n	8002d5c <HAL_RCC_OscConfig+0xb0>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x98>
 8002d2a:	4b70      	ldr	r3, [pc, #448]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a6f      	ldr	r2, [pc, #444]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	4b6d      	ldr	r3, [pc, #436]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a6c      	ldr	r2, [pc, #432]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	e00b      	b.n	8002d5c <HAL_RCC_OscConfig+0xb0>
 8002d44:	4b69      	ldr	r3, [pc, #420]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a68      	ldr	r2, [pc, #416]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	4b66      	ldr	r3, [pc, #408]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a65      	ldr	r2, [pc, #404]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d013      	beq.n	8002d8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe fd60 	bl	8001828 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7fe fd5c 	bl	8001828 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	; 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e207      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	4b5b      	ldr	r3, [pc, #364]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0xc0>
 8002d8a:	e014      	b.n	8002db6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fd4c 	bl	8001828 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d94:	f7fe fd48 	bl	8001828 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	; 0x64
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e1f3      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da6:	4b51      	ldr	r3, [pc, #324]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0xe8>
 8002db2:	e000      	b.n	8002db6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d063      	beq.n	8002e8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dc2:	4b4a      	ldr	r3, [pc, #296]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dce:	4b47      	ldr	r3, [pc, #284]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d11c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dda:	4b44      	ldr	r3, [pc, #272]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d116      	bne.n	8002e14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de6:	4b41      	ldr	r3, [pc, #260]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_RCC_OscConfig+0x152>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d001      	beq.n	8002dfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e1c7      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfe:	4b3b      	ldr	r3, [pc, #236]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4937      	ldr	r1, [pc, #220]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e12:	e03a      	b.n	8002e8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d020      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e1c:	4b34      	ldr	r3, [pc, #208]	; (8002ef0 <HAL_RCC_OscConfig+0x244>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7fe fd01 	bl	8001828 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e2a:	f7fe fcfd 	bl	8001828 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e1a8      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3c:	4b2b      	ldr	r3, [pc, #172]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e48:	4b28      	ldr	r3, [pc, #160]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4925      	ldr	r1, [pc, #148]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	600b      	str	r3, [r1, #0]
 8002e5c:	e015      	b.n	8002e8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5e:	4b24      	ldr	r3, [pc, #144]	; (8002ef0 <HAL_RCC_OscConfig+0x244>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fe fce0 	bl	8001828 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7fe fcdc 	bl	8001828 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e187      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d036      	beq.n	8002f04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d016      	beq.n	8002ecc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9e:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <HAL_RCC_OscConfig+0x248>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea4:	f7fe fcc0 	bl	8001828 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eac:	f7fe fcbc 	bl	8001828 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e167      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x200>
 8002eca:	e01b      	b.n	8002f04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCC_OscConfig+0x248>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed2:	f7fe fca9 	bl	8001828 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed8:	e00e      	b.n	8002ef8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eda:	f7fe fca5 	bl	8001828 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d907      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e150      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	42470000 	.word	0x42470000
 8002ef4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef8:	4b88      	ldr	r3, [pc, #544]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ea      	bne.n	8002eda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 8097 	beq.w	8003040 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f16:	4b81      	ldr	r3, [pc, #516]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10f      	bne.n	8002f42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	4b7d      	ldr	r3, [pc, #500]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	4a7c      	ldr	r2, [pc, #496]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f30:	6413      	str	r3, [r2, #64]	; 0x40
 8002f32:	4b7a      	ldr	r3, [pc, #488]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f42:	4b77      	ldr	r3, [pc, #476]	; (8003120 <HAL_RCC_OscConfig+0x474>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d118      	bne.n	8002f80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4e:	4b74      	ldr	r3, [pc, #464]	; (8003120 <HAL_RCC_OscConfig+0x474>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a73      	ldr	r2, [pc, #460]	; (8003120 <HAL_RCC_OscConfig+0x474>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5a:	f7fe fc65 	bl	8001828 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f62:	f7fe fc61 	bl	8001828 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e10c      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	4b6a      	ldr	r3, [pc, #424]	; (8003120 <HAL_RCC_OscConfig+0x474>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d106      	bne.n	8002f96 <HAL_RCC_OscConfig+0x2ea>
 8002f88:	4b64      	ldr	r3, [pc, #400]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	4a63      	ldr	r2, [pc, #396]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6713      	str	r3, [r2, #112]	; 0x70
 8002f94:	e01c      	b.n	8002fd0 <HAL_RCC_OscConfig+0x324>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b05      	cmp	r3, #5
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x30c>
 8002f9e:	4b5f      	ldr	r3, [pc, #380]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	4a5e      	ldr	r2, [pc, #376]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002fa4:	f043 0304 	orr.w	r3, r3, #4
 8002fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002faa:	4b5c      	ldr	r3, [pc, #368]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	4a5b      	ldr	r2, [pc, #364]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCC_OscConfig+0x324>
 8002fb8:	4b58      	ldr	r3, [pc, #352]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	4a57      	ldr	r2, [pc, #348]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002fbe:	f023 0301 	bic.w	r3, r3, #1
 8002fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc4:	4b55      	ldr	r3, [pc, #340]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc8:	4a54      	ldr	r2, [pc, #336]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002fca:	f023 0304 	bic.w	r3, r3, #4
 8002fce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d015      	beq.n	8003004 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd8:	f7fe fc26 	bl	8001828 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe0:	f7fe fc22 	bl	8001828 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e0cb      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff6:	4b49      	ldr	r3, [pc, #292]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0ee      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x334>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003004:	f7fe fc10 	bl	8001828 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300a:	e00a      	b.n	8003022 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300c:	f7fe fc0c 	bl	8001828 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e0b5      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003022:	4b3e      	ldr	r3, [pc, #248]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1ee      	bne.n	800300c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800302e:	7dfb      	ldrb	r3, [r7, #23]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d105      	bne.n	8003040 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003034:	4b39      	ldr	r3, [pc, #228]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	4a38      	ldr	r2, [pc, #224]	; (800311c <HAL_RCC_OscConfig+0x470>)
 800303a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800303e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80a1 	beq.w	800318c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800304a:	4b34      	ldr	r3, [pc, #208]	; (800311c <HAL_RCC_OscConfig+0x470>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b08      	cmp	r3, #8
 8003054:	d05c      	beq.n	8003110 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d141      	bne.n	80030e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305e:	4b31      	ldr	r3, [pc, #196]	; (8003124 <HAL_RCC_OscConfig+0x478>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7fe fbe0 	bl	8001828 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306c:	f7fe fbdc 	bl	8001828 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e087      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307e:	4b27      	ldr	r3, [pc, #156]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69da      	ldr	r2, [r3, #28]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	019b      	lsls	r3, r3, #6
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	3b01      	subs	r3, #1
 80030a4:	041b      	lsls	r3, r3, #16
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	061b      	lsls	r3, r3, #24
 80030ae:	491b      	ldr	r1, [pc, #108]	; (800311c <HAL_RCC_OscConfig+0x470>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b4:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <HAL_RCC_OscConfig+0x478>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ba:	f7fe fbb5 	bl	8001828 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c2:	f7fe fbb1 	bl	8001828 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e05c      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <HAL_RCC_OscConfig+0x470>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x416>
 80030e0:	e054      	b.n	800318c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <HAL_RCC_OscConfig+0x478>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fe fb9e 	bl	8001828 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f0:	f7fe fb9a 	bl	8001828 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e045      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x444>
 800310e:	e03d      	b.n	800318c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d107      	bne.n	8003128 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e038      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
 800311c:	40023800 	.word	0x40023800
 8003120:	40007000 	.word	0x40007000
 8003124:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003128:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <HAL_RCC_OscConfig+0x4ec>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d028      	beq.n	8003188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003140:	429a      	cmp	r2, r3
 8003142:	d121      	bne.n	8003188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d11a      	bne.n	8003188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003158:	4013      	ands	r3, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800315e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003160:	4293      	cmp	r3, r2
 8003162:	d111      	bne.n	8003188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	085b      	lsrs	r3, r3, #1
 8003170:	3b01      	subs	r3, #1
 8003172:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d107      	bne.n	8003188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003182:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800

0800319c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0cc      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031b0:	4b68      	ldr	r3, [pc, #416]	; (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d90c      	bls.n	80031d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031be:	4b65      	ldr	r3, [pc, #404]	; (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c6:	4b63      	ldr	r3, [pc, #396]	; (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d001      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0b8      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d020      	beq.n	8003226 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031f0:	4b59      	ldr	r3, [pc, #356]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	4a58      	ldr	r2, [pc, #352]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003208:	4b53      	ldr	r3, [pc, #332]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4a52      	ldr	r2, [pc, #328]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003212:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003214:	4b50      	ldr	r3, [pc, #320]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	494d      	ldr	r1, [pc, #308]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d044      	beq.n	80032bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323a:	4b47      	ldr	r3, [pc, #284]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d119      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e07f      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d003      	beq.n	800325a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003256:	2b03      	cmp	r3, #3
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325a:	4b3f      	ldr	r3, [pc, #252]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e06f      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326a:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e067      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800327a:	4b37      	ldr	r3, [pc, #220]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f023 0203 	bic.w	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4934      	ldr	r1, [pc, #208]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	4313      	orrs	r3, r2
 800328a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800328c:	f7fe facc 	bl	8001828 <HAL_GetTick>
 8003290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003292:	e00a      	b.n	80032aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003294:	f7fe fac8 	bl	8001828 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e04f      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032aa:	4b2b      	ldr	r3, [pc, #172]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 020c 	and.w	r2, r3, #12
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d1eb      	bne.n	8003294 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032bc:	4b25      	ldr	r3, [pc, #148]	; (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d20c      	bcs.n	80032e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ca:	4b22      	ldr	r3, [pc, #136]	; (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d2:	4b20      	ldr	r3, [pc, #128]	; (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e032      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032f0:	4b19      	ldr	r3, [pc, #100]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4916      	ldr	r1, [pc, #88]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b00      	cmp	r3, #0
 800330c:	d009      	beq.n	8003322 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800330e:	4b12      	ldr	r3, [pc, #72]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	490e      	ldr	r1, [pc, #56]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	4313      	orrs	r3, r2
 8003320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003322:	f000 f821 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 8003326:	4602      	mov	r2, r0
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	490a      	ldr	r1, [pc, #40]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 8003334:	5ccb      	ldrb	r3, [r1, r3]
 8003336:	fa22 f303 	lsr.w	r3, r2, r3
 800333a:	4a09      	ldr	r2, [pc, #36]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 800333c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800333e:	4b09      	ldr	r3, [pc, #36]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe fa2c 	bl	80017a0 <HAL_InitTick>

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40023c00 	.word	0x40023c00
 8003358:	40023800 	.word	0x40023800
 800335c:	08004fa0 	.word	0x08004fa0
 8003360:	20000000 	.word	0x20000000
 8003364:	20000004 	.word	0x20000004

08003368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800336c:	b094      	sub	sp, #80	; 0x50
 800336e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003380:	4b79      	ldr	r3, [pc, #484]	; (8003568 <HAL_RCC_GetSysClockFreq+0x200>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b08      	cmp	r3, #8
 800338a:	d00d      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0x40>
 800338c:	2b08      	cmp	r3, #8
 800338e:	f200 80e1 	bhi.w	8003554 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0x34>
 8003396:	2b04      	cmp	r3, #4
 8003398:	d003      	beq.n	80033a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800339a:	e0db      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800339c:	4b73      	ldr	r3, [pc, #460]	; (800356c <HAL_RCC_GetSysClockFreq+0x204>)
 800339e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033a0:	e0db      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033a2:	4b73      	ldr	r3, [pc, #460]	; (8003570 <HAL_RCC_GetSysClockFreq+0x208>)
 80033a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033a6:	e0d8      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a8:	4b6f      	ldr	r3, [pc, #444]	; (8003568 <HAL_RCC_GetSysClockFreq+0x200>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033b0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033b2:	4b6d      	ldr	r3, [pc, #436]	; (8003568 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d063      	beq.n	8003486 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033be:	4b6a      	ldr	r3, [pc, #424]	; (8003568 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	099b      	lsrs	r3, r3, #6
 80033c4:	2200      	movs	r2, #0
 80033c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80033c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033d0:	633b      	str	r3, [r7, #48]	; 0x30
 80033d2:	2300      	movs	r3, #0
 80033d4:	637b      	str	r3, [r7, #52]	; 0x34
 80033d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033da:	4622      	mov	r2, r4
 80033dc:	462b      	mov	r3, r5
 80033de:	f04f 0000 	mov.w	r0, #0
 80033e2:	f04f 0100 	mov.w	r1, #0
 80033e6:	0159      	lsls	r1, r3, #5
 80033e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ec:	0150      	lsls	r0, r2, #5
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4621      	mov	r1, r4
 80033f4:	1a51      	subs	r1, r2, r1
 80033f6:	6139      	str	r1, [r7, #16]
 80033f8:	4629      	mov	r1, r5
 80033fa:	eb63 0301 	sbc.w	r3, r3, r1
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800340c:	4659      	mov	r1, fp
 800340e:	018b      	lsls	r3, r1, #6
 8003410:	4651      	mov	r1, sl
 8003412:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003416:	4651      	mov	r1, sl
 8003418:	018a      	lsls	r2, r1, #6
 800341a:	4651      	mov	r1, sl
 800341c:	ebb2 0801 	subs.w	r8, r2, r1
 8003420:	4659      	mov	r1, fp
 8003422:	eb63 0901 	sbc.w	r9, r3, r1
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003432:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003436:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800343a:	4690      	mov	r8, r2
 800343c:	4699      	mov	r9, r3
 800343e:	4623      	mov	r3, r4
 8003440:	eb18 0303 	adds.w	r3, r8, r3
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	462b      	mov	r3, r5
 8003448:	eb49 0303 	adc.w	r3, r9, r3
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800345a:	4629      	mov	r1, r5
 800345c:	024b      	lsls	r3, r1, #9
 800345e:	4621      	mov	r1, r4
 8003460:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003464:	4621      	mov	r1, r4
 8003466:	024a      	lsls	r2, r1, #9
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800346e:	2200      	movs	r2, #0
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
 8003472:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003474:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003478:	f7fc ff0a 	bl	8000290 <__aeabi_uldivmod>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4613      	mov	r3, r2
 8003482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003484:	e058      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003486:	4b38      	ldr	r3, [pc, #224]	; (8003568 <HAL_RCC_GetSysClockFreq+0x200>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	099b      	lsrs	r3, r3, #6
 800348c:	2200      	movs	r2, #0
 800348e:	4618      	mov	r0, r3
 8003490:	4611      	mov	r1, r2
 8003492:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003496:	623b      	str	r3, [r7, #32]
 8003498:	2300      	movs	r3, #0
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
 800349c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034a0:	4642      	mov	r2, r8
 80034a2:	464b      	mov	r3, r9
 80034a4:	f04f 0000 	mov.w	r0, #0
 80034a8:	f04f 0100 	mov.w	r1, #0
 80034ac:	0159      	lsls	r1, r3, #5
 80034ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b2:	0150      	lsls	r0, r2, #5
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4641      	mov	r1, r8
 80034ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80034be:	4649      	mov	r1, r9
 80034c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034d8:	ebb2 040a 	subs.w	r4, r2, sl
 80034dc:	eb63 050b 	sbc.w	r5, r3, fp
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	00eb      	lsls	r3, r5, #3
 80034ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ee:	00e2      	lsls	r2, r4, #3
 80034f0:	4614      	mov	r4, r2
 80034f2:	461d      	mov	r5, r3
 80034f4:	4643      	mov	r3, r8
 80034f6:	18e3      	adds	r3, r4, r3
 80034f8:	603b      	str	r3, [r7, #0]
 80034fa:	464b      	mov	r3, r9
 80034fc:	eb45 0303 	adc.w	r3, r5, r3
 8003500:	607b      	str	r3, [r7, #4]
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800350e:	4629      	mov	r1, r5
 8003510:	028b      	lsls	r3, r1, #10
 8003512:	4621      	mov	r1, r4
 8003514:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003518:	4621      	mov	r1, r4
 800351a:	028a      	lsls	r2, r1, #10
 800351c:	4610      	mov	r0, r2
 800351e:	4619      	mov	r1, r3
 8003520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003522:	2200      	movs	r2, #0
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	61fa      	str	r2, [r7, #28]
 8003528:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800352c:	f7fc feb0 	bl	8000290 <__aeabi_uldivmod>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4613      	mov	r3, r2
 8003536:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <HAL_RCC_GetSysClockFreq+0x200>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	0c1b      	lsrs	r3, r3, #16
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	3301      	adds	r3, #1
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003548:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800354a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800354c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003550:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003552:	e002      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_RCC_GetSysClockFreq+0x204>)
 8003556:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800355a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800355c:	4618      	mov	r0, r3
 800355e:	3750      	adds	r7, #80	; 0x50
 8003560:	46bd      	mov	sp, r7
 8003562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003566:	bf00      	nop
 8003568:	40023800 	.word	0x40023800
 800356c:	00f42400 	.word	0x00f42400
 8003570:	007a1200 	.word	0x007a1200

08003574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <HAL_RCC_GetHCLKFreq+0x14>)
 800357a:	681b      	ldr	r3, [r3, #0]
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	20000000 	.word	0x20000000

0800358c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003590:	f7ff fff0 	bl	8003574 <HAL_RCC_GetHCLKFreq>
 8003594:	4602      	mov	r2, r0
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	0a9b      	lsrs	r3, r3, #10
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	4903      	ldr	r1, [pc, #12]	; (80035b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40023800 	.word	0x40023800
 80035b0:	08004fb0 	.word	0x08004fb0

080035b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035b8:	f7ff ffdc 	bl	8003574 <HAL_RCC_GetHCLKFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	0b5b      	lsrs	r3, r3, #13
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	4903      	ldr	r1, [pc, #12]	; (80035d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40023800 	.word	0x40023800
 80035d8:	08004fb0 	.word	0x08004fb0

080035dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e042      	b.n	8003674 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fd ff2c 	bl	8001460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2224      	movs	r2, #36	; 0x24
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800361e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f82b 	bl	800367c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800367c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003680:	b0c0      	sub	sp, #256	; 0x100
 8003682:	af00      	add	r7, sp, #0
 8003684:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003698:	68d9      	ldr	r1, [r3, #12]
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	ea40 0301 	orr.w	r3, r0, r1
 80036a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	431a      	orrs	r2, r3
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036d4:	f021 010c 	bic.w	r1, r1, #12
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036e2:	430b      	orrs	r3, r1
 80036e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f6:	6999      	ldr	r1, [r3, #24]
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	ea40 0301 	orr.w	r3, r0, r1
 8003702:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	4b8f      	ldr	r3, [pc, #572]	; (8003948 <UART_SetConfig+0x2cc>)
 800370c:	429a      	cmp	r2, r3
 800370e:	d005      	beq.n	800371c <UART_SetConfig+0xa0>
 8003710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	4b8d      	ldr	r3, [pc, #564]	; (800394c <UART_SetConfig+0x2d0>)
 8003718:	429a      	cmp	r2, r3
 800371a:	d104      	bne.n	8003726 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800371c:	f7ff ff4a 	bl	80035b4 <HAL_RCC_GetPCLK2Freq>
 8003720:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003724:	e003      	b.n	800372e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003726:	f7ff ff31 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 800372a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800372e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003738:	f040 810c 	bne.w	8003954 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800373c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003740:	2200      	movs	r2, #0
 8003742:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003746:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800374a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800374e:	4622      	mov	r2, r4
 8003750:	462b      	mov	r3, r5
 8003752:	1891      	adds	r1, r2, r2
 8003754:	65b9      	str	r1, [r7, #88]	; 0x58
 8003756:	415b      	adcs	r3, r3
 8003758:	65fb      	str	r3, [r7, #92]	; 0x5c
 800375a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800375e:	4621      	mov	r1, r4
 8003760:	eb12 0801 	adds.w	r8, r2, r1
 8003764:	4629      	mov	r1, r5
 8003766:	eb43 0901 	adc.w	r9, r3, r1
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800377a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800377e:	4690      	mov	r8, r2
 8003780:	4699      	mov	r9, r3
 8003782:	4623      	mov	r3, r4
 8003784:	eb18 0303 	adds.w	r3, r8, r3
 8003788:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800378c:	462b      	mov	r3, r5
 800378e:	eb49 0303 	adc.w	r3, r9, r3
 8003792:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037aa:	460b      	mov	r3, r1
 80037ac:	18db      	adds	r3, r3, r3
 80037ae:	653b      	str	r3, [r7, #80]	; 0x50
 80037b0:	4613      	mov	r3, r2
 80037b2:	eb42 0303 	adc.w	r3, r2, r3
 80037b6:	657b      	str	r3, [r7, #84]	; 0x54
 80037b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037c0:	f7fc fd66 	bl	8000290 <__aeabi_uldivmod>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4b61      	ldr	r3, [pc, #388]	; (8003950 <UART_SetConfig+0x2d4>)
 80037ca:	fba3 2302 	umull	r2, r3, r3, r2
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	011c      	lsls	r4, r3, #4
 80037d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037d6:	2200      	movs	r2, #0
 80037d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037e4:	4642      	mov	r2, r8
 80037e6:	464b      	mov	r3, r9
 80037e8:	1891      	adds	r1, r2, r2
 80037ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80037ec:	415b      	adcs	r3, r3
 80037ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037f4:	4641      	mov	r1, r8
 80037f6:	eb12 0a01 	adds.w	sl, r2, r1
 80037fa:	4649      	mov	r1, r9
 80037fc:	eb43 0b01 	adc.w	fp, r3, r1
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800380c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003810:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003814:	4692      	mov	sl, r2
 8003816:	469b      	mov	fp, r3
 8003818:	4643      	mov	r3, r8
 800381a:	eb1a 0303 	adds.w	r3, sl, r3
 800381e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003822:	464b      	mov	r3, r9
 8003824:	eb4b 0303 	adc.w	r3, fp, r3
 8003828:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003838:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800383c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003840:	460b      	mov	r3, r1
 8003842:	18db      	adds	r3, r3, r3
 8003844:	643b      	str	r3, [r7, #64]	; 0x40
 8003846:	4613      	mov	r3, r2
 8003848:	eb42 0303 	adc.w	r3, r2, r3
 800384c:	647b      	str	r3, [r7, #68]	; 0x44
 800384e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003852:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003856:	f7fc fd1b 	bl	8000290 <__aeabi_uldivmod>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4611      	mov	r1, r2
 8003860:	4b3b      	ldr	r3, [pc, #236]	; (8003950 <UART_SetConfig+0x2d4>)
 8003862:	fba3 2301 	umull	r2, r3, r3, r1
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	2264      	movs	r2, #100	; 0x64
 800386a:	fb02 f303 	mul.w	r3, r2, r3
 800386e:	1acb      	subs	r3, r1, r3
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003876:	4b36      	ldr	r3, [pc, #216]	; (8003950 <UART_SetConfig+0x2d4>)
 8003878:	fba3 2302 	umull	r2, r3, r3, r2
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003884:	441c      	add	r4, r3
 8003886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800388a:	2200      	movs	r2, #0
 800388c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003890:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003894:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003898:	4642      	mov	r2, r8
 800389a:	464b      	mov	r3, r9
 800389c:	1891      	adds	r1, r2, r2
 800389e:	63b9      	str	r1, [r7, #56]	; 0x38
 80038a0:	415b      	adcs	r3, r3
 80038a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038a8:	4641      	mov	r1, r8
 80038aa:	1851      	adds	r1, r2, r1
 80038ac:	6339      	str	r1, [r7, #48]	; 0x30
 80038ae:	4649      	mov	r1, r9
 80038b0:	414b      	adcs	r3, r1
 80038b2:	637b      	str	r3, [r7, #52]	; 0x34
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038c0:	4659      	mov	r1, fp
 80038c2:	00cb      	lsls	r3, r1, #3
 80038c4:	4651      	mov	r1, sl
 80038c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ca:	4651      	mov	r1, sl
 80038cc:	00ca      	lsls	r2, r1, #3
 80038ce:	4610      	mov	r0, r2
 80038d0:	4619      	mov	r1, r3
 80038d2:	4603      	mov	r3, r0
 80038d4:	4642      	mov	r2, r8
 80038d6:	189b      	adds	r3, r3, r2
 80038d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038dc:	464b      	mov	r3, r9
 80038de:	460a      	mov	r2, r1
 80038e0:	eb42 0303 	adc.w	r3, r2, r3
 80038e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038fc:	460b      	mov	r3, r1
 80038fe:	18db      	adds	r3, r3, r3
 8003900:	62bb      	str	r3, [r7, #40]	; 0x28
 8003902:	4613      	mov	r3, r2
 8003904:	eb42 0303 	adc.w	r3, r2, r3
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800390a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800390e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003912:	f7fc fcbd 	bl	8000290 <__aeabi_uldivmod>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <UART_SetConfig+0x2d4>)
 800391c:	fba3 1302 	umull	r1, r3, r3, r2
 8003920:	095b      	lsrs	r3, r3, #5
 8003922:	2164      	movs	r1, #100	; 0x64
 8003924:	fb01 f303 	mul.w	r3, r1, r3
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	3332      	adds	r3, #50	; 0x32
 800392e:	4a08      	ldr	r2, [pc, #32]	; (8003950 <UART_SetConfig+0x2d4>)
 8003930:	fba2 2303 	umull	r2, r3, r2, r3
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	f003 0207 	and.w	r2, r3, #7
 800393a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4422      	add	r2, r4
 8003942:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003944:	e106      	b.n	8003b54 <UART_SetConfig+0x4d8>
 8003946:	bf00      	nop
 8003948:	40011000 	.word	0x40011000
 800394c:	40011400 	.word	0x40011400
 8003950:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003958:	2200      	movs	r2, #0
 800395a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800395e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003962:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003966:	4642      	mov	r2, r8
 8003968:	464b      	mov	r3, r9
 800396a:	1891      	adds	r1, r2, r2
 800396c:	6239      	str	r1, [r7, #32]
 800396e:	415b      	adcs	r3, r3
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
 8003972:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003976:	4641      	mov	r1, r8
 8003978:	1854      	adds	r4, r2, r1
 800397a:	4649      	mov	r1, r9
 800397c:	eb43 0501 	adc.w	r5, r3, r1
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	00eb      	lsls	r3, r5, #3
 800398a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800398e:	00e2      	lsls	r2, r4, #3
 8003990:	4614      	mov	r4, r2
 8003992:	461d      	mov	r5, r3
 8003994:	4643      	mov	r3, r8
 8003996:	18e3      	adds	r3, r4, r3
 8003998:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800399c:	464b      	mov	r3, r9
 800399e:	eb45 0303 	adc.w	r3, r5, r3
 80039a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039c2:	4629      	mov	r1, r5
 80039c4:	008b      	lsls	r3, r1, #2
 80039c6:	4621      	mov	r1, r4
 80039c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039cc:	4621      	mov	r1, r4
 80039ce:	008a      	lsls	r2, r1, #2
 80039d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039d4:	f7fc fc5c 	bl	8000290 <__aeabi_uldivmod>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4b60      	ldr	r3, [pc, #384]	; (8003b60 <UART_SetConfig+0x4e4>)
 80039de:	fba3 2302 	umull	r2, r3, r3, r2
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	011c      	lsls	r4, r3, #4
 80039e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039f8:	4642      	mov	r2, r8
 80039fa:	464b      	mov	r3, r9
 80039fc:	1891      	adds	r1, r2, r2
 80039fe:	61b9      	str	r1, [r7, #24]
 8003a00:	415b      	adcs	r3, r3
 8003a02:	61fb      	str	r3, [r7, #28]
 8003a04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a08:	4641      	mov	r1, r8
 8003a0a:	1851      	adds	r1, r2, r1
 8003a0c:	6139      	str	r1, [r7, #16]
 8003a0e:	4649      	mov	r1, r9
 8003a10:	414b      	adcs	r3, r1
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a20:	4659      	mov	r1, fp
 8003a22:	00cb      	lsls	r3, r1, #3
 8003a24:	4651      	mov	r1, sl
 8003a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a2a:	4651      	mov	r1, sl
 8003a2c:	00ca      	lsls	r2, r1, #3
 8003a2e:	4610      	mov	r0, r2
 8003a30:	4619      	mov	r1, r3
 8003a32:	4603      	mov	r3, r0
 8003a34:	4642      	mov	r2, r8
 8003a36:	189b      	adds	r3, r3, r2
 8003a38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a3c:	464b      	mov	r3, r9
 8003a3e:	460a      	mov	r2, r1
 8003a40:	eb42 0303 	adc.w	r3, r2, r3
 8003a44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	f04f 0300 	mov.w	r3, #0
 8003a5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a60:	4649      	mov	r1, r9
 8003a62:	008b      	lsls	r3, r1, #2
 8003a64:	4641      	mov	r1, r8
 8003a66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a6a:	4641      	mov	r1, r8
 8003a6c:	008a      	lsls	r2, r1, #2
 8003a6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a72:	f7fc fc0d 	bl	8000290 <__aeabi_uldivmod>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	4b38      	ldr	r3, [pc, #224]	; (8003b60 <UART_SetConfig+0x4e4>)
 8003a7e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	2264      	movs	r2, #100	; 0x64
 8003a86:	fb02 f303 	mul.w	r3, r2, r3
 8003a8a:	1acb      	subs	r3, r1, r3
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	3332      	adds	r3, #50	; 0x32
 8003a90:	4a33      	ldr	r2, [pc, #204]	; (8003b60 <UART_SetConfig+0x4e4>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a9c:	441c      	add	r4, r3
 8003a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	673b      	str	r3, [r7, #112]	; 0x70
 8003aa6:	677a      	str	r2, [r7, #116]	; 0x74
 8003aa8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003aac:	4642      	mov	r2, r8
 8003aae:	464b      	mov	r3, r9
 8003ab0:	1891      	adds	r1, r2, r2
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	415b      	adcs	r3, r3
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003abc:	4641      	mov	r1, r8
 8003abe:	1851      	adds	r1, r2, r1
 8003ac0:	6039      	str	r1, [r7, #0]
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	414b      	adcs	r3, r1
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ad4:	4659      	mov	r1, fp
 8003ad6:	00cb      	lsls	r3, r1, #3
 8003ad8:	4651      	mov	r1, sl
 8003ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ade:	4651      	mov	r1, sl
 8003ae0:	00ca      	lsls	r2, r1, #3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	4642      	mov	r2, r8
 8003aea:	189b      	adds	r3, r3, r2
 8003aec:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aee:	464b      	mov	r3, r9
 8003af0:	460a      	mov	r2, r1
 8003af2:	eb42 0303 	adc.w	r3, r2, r3
 8003af6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	663b      	str	r3, [r7, #96]	; 0x60
 8003b02:	667a      	str	r2, [r7, #100]	; 0x64
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b10:	4649      	mov	r1, r9
 8003b12:	008b      	lsls	r3, r1, #2
 8003b14:	4641      	mov	r1, r8
 8003b16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b1a:	4641      	mov	r1, r8
 8003b1c:	008a      	lsls	r2, r1, #2
 8003b1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b22:	f7fc fbb5 	bl	8000290 <__aeabi_uldivmod>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <UART_SetConfig+0x4e4>)
 8003b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	2164      	movs	r1, #100	; 0x64
 8003b34:	fb01 f303 	mul.w	r3, r1, r3
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	3332      	adds	r3, #50	; 0x32
 8003b3e:	4a08      	ldr	r2, [pc, #32]	; (8003b60 <UART_SetConfig+0x4e4>)
 8003b40:	fba2 2303 	umull	r2, r3, r2, r3
 8003b44:	095b      	lsrs	r3, r3, #5
 8003b46:	f003 020f 	and.w	r2, r3, #15
 8003b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4422      	add	r2, r4
 8003b52:	609a      	str	r2, [r3, #8]
}
 8003b54:	bf00      	nop
 8003b56:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b60:	51eb851f 	.word	0x51eb851f

08003b64 <rand>:
 8003b64:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <rand+0x5c>)
 8003b66:	b510      	push	{r4, lr}
 8003b68:	681c      	ldr	r4, [r3, #0]
 8003b6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b6c:	b9b3      	cbnz	r3, 8003b9c <rand+0x38>
 8003b6e:	2018      	movs	r0, #24
 8003b70:	f000 fa42 	bl	8003ff8 <malloc>
 8003b74:	4602      	mov	r2, r0
 8003b76:	6320      	str	r0, [r4, #48]	; 0x30
 8003b78:	b920      	cbnz	r0, 8003b84 <rand+0x20>
 8003b7a:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <rand+0x60>)
 8003b7c:	4812      	ldr	r0, [pc, #72]	; (8003bc8 <rand+0x64>)
 8003b7e:	2152      	movs	r1, #82	; 0x52
 8003b80:	f000 f9d0 	bl	8003f24 <__assert_func>
 8003b84:	4911      	ldr	r1, [pc, #68]	; (8003bcc <rand+0x68>)
 8003b86:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <rand+0x6c>)
 8003b88:	e9c0 1300 	strd	r1, r3, [r0]
 8003b8c:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <rand+0x70>)
 8003b8e:	6083      	str	r3, [r0, #8]
 8003b90:	230b      	movs	r3, #11
 8003b92:	8183      	strh	r3, [r0, #12]
 8003b94:	2100      	movs	r1, #0
 8003b96:	2001      	movs	r0, #1
 8003b98:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003b9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003b9e:	480e      	ldr	r0, [pc, #56]	; (8003bd8 <rand+0x74>)
 8003ba0:	690b      	ldr	r3, [r1, #16]
 8003ba2:	694c      	ldr	r4, [r1, #20]
 8003ba4:	4a0d      	ldr	r2, [pc, #52]	; (8003bdc <rand+0x78>)
 8003ba6:	4358      	muls	r0, r3
 8003ba8:	fb02 0004 	mla	r0, r2, r4, r0
 8003bac:	fba3 3202 	umull	r3, r2, r3, r2
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	eb40 0002 	adc.w	r0, r0, r2
 8003bb6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003bba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003bbe:	bd10      	pop	{r4, pc}
 8003bc0:	20000064 	.word	0x20000064
 8003bc4:	08004fc0 	.word	0x08004fc0
 8003bc8:	08004fd7 	.word	0x08004fd7
 8003bcc:	abcd330e 	.word	0xabcd330e
 8003bd0:	e66d1234 	.word	0xe66d1234
 8003bd4:	0005deec 	.word	0x0005deec
 8003bd8:	5851f42d 	.word	0x5851f42d
 8003bdc:	4c957f2d 	.word	0x4c957f2d

08003be0 <std>:
 8003be0:	2300      	movs	r3, #0
 8003be2:	b510      	push	{r4, lr}
 8003be4:	4604      	mov	r4, r0
 8003be6:	e9c0 3300 	strd	r3, r3, [r0]
 8003bea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bee:	6083      	str	r3, [r0, #8]
 8003bf0:	8181      	strh	r1, [r0, #12]
 8003bf2:	6643      	str	r3, [r0, #100]	; 0x64
 8003bf4:	81c2      	strh	r2, [r0, #14]
 8003bf6:	6183      	str	r3, [r0, #24]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	2208      	movs	r2, #8
 8003bfc:	305c      	adds	r0, #92	; 0x5c
 8003bfe:	f000 f914 	bl	8003e2a <memset>
 8003c02:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <std+0x58>)
 8003c04:	6263      	str	r3, [r4, #36]	; 0x24
 8003c06:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <std+0x5c>)
 8003c08:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <std+0x60>)
 8003c0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c0e:	4b0d      	ldr	r3, [pc, #52]	; (8003c44 <std+0x64>)
 8003c10:	6323      	str	r3, [r4, #48]	; 0x30
 8003c12:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <std+0x68>)
 8003c14:	6224      	str	r4, [r4, #32]
 8003c16:	429c      	cmp	r4, r3
 8003c18:	d006      	beq.n	8003c28 <std+0x48>
 8003c1a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003c1e:	4294      	cmp	r4, r2
 8003c20:	d002      	beq.n	8003c28 <std+0x48>
 8003c22:	33d0      	adds	r3, #208	; 0xd0
 8003c24:	429c      	cmp	r4, r3
 8003c26:	d105      	bne.n	8003c34 <std+0x54>
 8003c28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c30:	f000 b974 	b.w	8003f1c <__retarget_lock_init_recursive>
 8003c34:	bd10      	pop	{r4, pc}
 8003c36:	bf00      	nop
 8003c38:	08003da5 	.word	0x08003da5
 8003c3c:	08003dc7 	.word	0x08003dc7
 8003c40:	08003dff 	.word	0x08003dff
 8003c44:	08003e23 	.word	0x08003e23
 8003c48:	200001a0 	.word	0x200001a0

08003c4c <stdio_exit_handler>:
 8003c4c:	4a02      	ldr	r2, [pc, #8]	; (8003c58 <stdio_exit_handler+0xc>)
 8003c4e:	4903      	ldr	r1, [pc, #12]	; (8003c5c <stdio_exit_handler+0x10>)
 8003c50:	4803      	ldr	r0, [pc, #12]	; (8003c60 <stdio_exit_handler+0x14>)
 8003c52:	f000 b869 	b.w	8003d28 <_fwalk_sglue>
 8003c56:	bf00      	nop
 8003c58:	2000000c 	.word	0x2000000c
 8003c5c:	0800483d 	.word	0x0800483d
 8003c60:	20000018 	.word	0x20000018

08003c64 <cleanup_stdio>:
 8003c64:	6841      	ldr	r1, [r0, #4]
 8003c66:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <cleanup_stdio+0x34>)
 8003c68:	4299      	cmp	r1, r3
 8003c6a:	b510      	push	{r4, lr}
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	d001      	beq.n	8003c74 <cleanup_stdio+0x10>
 8003c70:	f000 fde4 	bl	800483c <_fflush_r>
 8003c74:	68a1      	ldr	r1, [r4, #8]
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <cleanup_stdio+0x38>)
 8003c78:	4299      	cmp	r1, r3
 8003c7a:	d002      	beq.n	8003c82 <cleanup_stdio+0x1e>
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f000 fddd 	bl	800483c <_fflush_r>
 8003c82:	68e1      	ldr	r1, [r4, #12]
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <cleanup_stdio+0x3c>)
 8003c86:	4299      	cmp	r1, r3
 8003c88:	d004      	beq.n	8003c94 <cleanup_stdio+0x30>
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c90:	f000 bdd4 	b.w	800483c <_fflush_r>
 8003c94:	bd10      	pop	{r4, pc}
 8003c96:	bf00      	nop
 8003c98:	200001a0 	.word	0x200001a0
 8003c9c:	20000208 	.word	0x20000208
 8003ca0:	20000270 	.word	0x20000270

08003ca4 <global_stdio_init.part.0>:
 8003ca4:	b510      	push	{r4, lr}
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <global_stdio_init.part.0+0x30>)
 8003ca8:	4c0b      	ldr	r4, [pc, #44]	; (8003cd8 <global_stdio_init.part.0+0x34>)
 8003caa:	4a0c      	ldr	r2, [pc, #48]	; (8003cdc <global_stdio_init.part.0+0x38>)
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	4620      	mov	r0, r4
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2104      	movs	r1, #4
 8003cb4:	f7ff ff94 	bl	8003be0 <std>
 8003cb8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	2109      	movs	r1, #9
 8003cc0:	f7ff ff8e 	bl	8003be0 <std>
 8003cc4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003cc8:	2202      	movs	r2, #2
 8003cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cce:	2112      	movs	r1, #18
 8003cd0:	f7ff bf86 	b.w	8003be0 <std>
 8003cd4:	200002d8 	.word	0x200002d8
 8003cd8:	200001a0 	.word	0x200001a0
 8003cdc:	08003c4d 	.word	0x08003c4d

08003ce0 <__sfp_lock_acquire>:
 8003ce0:	4801      	ldr	r0, [pc, #4]	; (8003ce8 <__sfp_lock_acquire+0x8>)
 8003ce2:	f000 b91c 	b.w	8003f1e <__retarget_lock_acquire_recursive>
 8003ce6:	bf00      	nop
 8003ce8:	200002e1 	.word	0x200002e1

08003cec <__sfp_lock_release>:
 8003cec:	4801      	ldr	r0, [pc, #4]	; (8003cf4 <__sfp_lock_release+0x8>)
 8003cee:	f000 b917 	b.w	8003f20 <__retarget_lock_release_recursive>
 8003cf2:	bf00      	nop
 8003cf4:	200002e1 	.word	0x200002e1

08003cf8 <__sinit>:
 8003cf8:	b510      	push	{r4, lr}
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	f7ff fff0 	bl	8003ce0 <__sfp_lock_acquire>
 8003d00:	6a23      	ldr	r3, [r4, #32]
 8003d02:	b11b      	cbz	r3, 8003d0c <__sinit+0x14>
 8003d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d08:	f7ff bff0 	b.w	8003cec <__sfp_lock_release>
 8003d0c:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <__sinit+0x28>)
 8003d0e:	6223      	str	r3, [r4, #32]
 8003d10:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <__sinit+0x2c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f5      	bne.n	8003d04 <__sinit+0xc>
 8003d18:	f7ff ffc4 	bl	8003ca4 <global_stdio_init.part.0>
 8003d1c:	e7f2      	b.n	8003d04 <__sinit+0xc>
 8003d1e:	bf00      	nop
 8003d20:	08003c65 	.word	0x08003c65
 8003d24:	200002d8 	.word	0x200002d8

08003d28 <_fwalk_sglue>:
 8003d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d2c:	4607      	mov	r7, r0
 8003d2e:	4688      	mov	r8, r1
 8003d30:	4614      	mov	r4, r2
 8003d32:	2600      	movs	r6, #0
 8003d34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d38:	f1b9 0901 	subs.w	r9, r9, #1
 8003d3c:	d505      	bpl.n	8003d4a <_fwalk_sglue+0x22>
 8003d3e:	6824      	ldr	r4, [r4, #0]
 8003d40:	2c00      	cmp	r4, #0
 8003d42:	d1f7      	bne.n	8003d34 <_fwalk_sglue+0xc>
 8003d44:	4630      	mov	r0, r6
 8003d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d4a:	89ab      	ldrh	r3, [r5, #12]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d907      	bls.n	8003d60 <_fwalk_sglue+0x38>
 8003d50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d54:	3301      	adds	r3, #1
 8003d56:	d003      	beq.n	8003d60 <_fwalk_sglue+0x38>
 8003d58:	4629      	mov	r1, r5
 8003d5a:	4638      	mov	r0, r7
 8003d5c:	47c0      	blx	r8
 8003d5e:	4306      	orrs	r6, r0
 8003d60:	3568      	adds	r5, #104	; 0x68
 8003d62:	e7e9      	b.n	8003d38 <_fwalk_sglue+0x10>

08003d64 <siprintf>:
 8003d64:	b40e      	push	{r1, r2, r3}
 8003d66:	b500      	push	{lr}
 8003d68:	b09c      	sub	sp, #112	; 0x70
 8003d6a:	ab1d      	add	r3, sp, #116	; 0x74
 8003d6c:	9002      	str	r0, [sp, #8]
 8003d6e:	9006      	str	r0, [sp, #24]
 8003d70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d74:	4809      	ldr	r0, [pc, #36]	; (8003d9c <siprintf+0x38>)
 8003d76:	9107      	str	r1, [sp, #28]
 8003d78:	9104      	str	r1, [sp, #16]
 8003d7a:	4909      	ldr	r1, [pc, #36]	; (8003da0 <siprintf+0x3c>)
 8003d7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d80:	9105      	str	r1, [sp, #20]
 8003d82:	6800      	ldr	r0, [r0, #0]
 8003d84:	9301      	str	r3, [sp, #4]
 8003d86:	a902      	add	r1, sp, #8
 8003d88:	f000 fa44 	bl	8004214 <_svfiprintf_r>
 8003d8c:	9b02      	ldr	r3, [sp, #8]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	b01c      	add	sp, #112	; 0x70
 8003d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d98:	b003      	add	sp, #12
 8003d9a:	4770      	bx	lr
 8003d9c:	20000064 	.word	0x20000064
 8003da0:	ffff0208 	.word	0xffff0208

08003da4 <__sread>:
 8003da4:	b510      	push	{r4, lr}
 8003da6:	460c      	mov	r4, r1
 8003da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dac:	f000 f868 	bl	8003e80 <_read_r>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	bfab      	itete	ge
 8003db4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003db6:	89a3      	ldrhlt	r3, [r4, #12]
 8003db8:	181b      	addge	r3, r3, r0
 8003dba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003dbe:	bfac      	ite	ge
 8003dc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003dc2:	81a3      	strhlt	r3, [r4, #12]
 8003dc4:	bd10      	pop	{r4, pc}

08003dc6 <__swrite>:
 8003dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dca:	461f      	mov	r7, r3
 8003dcc:	898b      	ldrh	r3, [r1, #12]
 8003dce:	05db      	lsls	r3, r3, #23
 8003dd0:	4605      	mov	r5, r0
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	4616      	mov	r6, r2
 8003dd6:	d505      	bpl.n	8003de4 <__swrite+0x1e>
 8003dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ddc:	2302      	movs	r3, #2
 8003dde:	2200      	movs	r2, #0
 8003de0:	f000 f83c 	bl	8003e5c <_lseek_r>
 8003de4:	89a3      	ldrh	r3, [r4, #12]
 8003de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dee:	81a3      	strh	r3, [r4, #12]
 8003df0:	4632      	mov	r2, r6
 8003df2:	463b      	mov	r3, r7
 8003df4:	4628      	mov	r0, r5
 8003df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dfa:	f000 b853 	b.w	8003ea4 <_write_r>

08003dfe <__sseek>:
 8003dfe:	b510      	push	{r4, lr}
 8003e00:	460c      	mov	r4, r1
 8003e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e06:	f000 f829 	bl	8003e5c <_lseek_r>
 8003e0a:	1c43      	adds	r3, r0, #1
 8003e0c:	89a3      	ldrh	r3, [r4, #12]
 8003e0e:	bf15      	itete	ne
 8003e10:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e1a:	81a3      	strheq	r3, [r4, #12]
 8003e1c:	bf18      	it	ne
 8003e1e:	81a3      	strhne	r3, [r4, #12]
 8003e20:	bd10      	pop	{r4, pc}

08003e22 <__sclose>:
 8003e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e26:	f000 b809 	b.w	8003e3c <_close_r>

08003e2a <memset>:
 8003e2a:	4402      	add	r2, r0
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d100      	bne.n	8003e34 <memset+0xa>
 8003e32:	4770      	bx	lr
 8003e34:	f803 1b01 	strb.w	r1, [r3], #1
 8003e38:	e7f9      	b.n	8003e2e <memset+0x4>
	...

08003e3c <_close_r>:
 8003e3c:	b538      	push	{r3, r4, r5, lr}
 8003e3e:	4d06      	ldr	r5, [pc, #24]	; (8003e58 <_close_r+0x1c>)
 8003e40:	2300      	movs	r3, #0
 8003e42:	4604      	mov	r4, r0
 8003e44:	4608      	mov	r0, r1
 8003e46:	602b      	str	r3, [r5, #0]
 8003e48:	f7fd fbe1 	bl	800160e <_close>
 8003e4c:	1c43      	adds	r3, r0, #1
 8003e4e:	d102      	bne.n	8003e56 <_close_r+0x1a>
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	b103      	cbz	r3, 8003e56 <_close_r+0x1a>
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	bd38      	pop	{r3, r4, r5, pc}
 8003e58:	200002dc 	.word	0x200002dc

08003e5c <_lseek_r>:
 8003e5c:	b538      	push	{r3, r4, r5, lr}
 8003e5e:	4d07      	ldr	r5, [pc, #28]	; (8003e7c <_lseek_r+0x20>)
 8003e60:	4604      	mov	r4, r0
 8003e62:	4608      	mov	r0, r1
 8003e64:	4611      	mov	r1, r2
 8003e66:	2200      	movs	r2, #0
 8003e68:	602a      	str	r2, [r5, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f7fd fbf6 	bl	800165c <_lseek>
 8003e70:	1c43      	adds	r3, r0, #1
 8003e72:	d102      	bne.n	8003e7a <_lseek_r+0x1e>
 8003e74:	682b      	ldr	r3, [r5, #0]
 8003e76:	b103      	cbz	r3, 8003e7a <_lseek_r+0x1e>
 8003e78:	6023      	str	r3, [r4, #0]
 8003e7a:	bd38      	pop	{r3, r4, r5, pc}
 8003e7c:	200002dc 	.word	0x200002dc

08003e80 <_read_r>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	4d07      	ldr	r5, [pc, #28]	; (8003ea0 <_read_r+0x20>)
 8003e84:	4604      	mov	r4, r0
 8003e86:	4608      	mov	r0, r1
 8003e88:	4611      	mov	r1, r2
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	602a      	str	r2, [r5, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f7fd fb84 	bl	800159c <_read>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d102      	bne.n	8003e9e <_read_r+0x1e>
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	b103      	cbz	r3, 8003e9e <_read_r+0x1e>
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ea0:	200002dc 	.word	0x200002dc

08003ea4 <_write_r>:
 8003ea4:	b538      	push	{r3, r4, r5, lr}
 8003ea6:	4d07      	ldr	r5, [pc, #28]	; (8003ec4 <_write_r+0x20>)
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	4608      	mov	r0, r1
 8003eac:	4611      	mov	r1, r2
 8003eae:	2200      	movs	r2, #0
 8003eb0:	602a      	str	r2, [r5, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f7fd fb8f 	bl	80015d6 <_write>
 8003eb8:	1c43      	adds	r3, r0, #1
 8003eba:	d102      	bne.n	8003ec2 <_write_r+0x1e>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	b103      	cbz	r3, 8003ec2 <_write_r+0x1e>
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	bd38      	pop	{r3, r4, r5, pc}
 8003ec4:	200002dc 	.word	0x200002dc

08003ec8 <__errno>:
 8003ec8:	4b01      	ldr	r3, [pc, #4]	; (8003ed0 <__errno+0x8>)
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	20000064 	.word	0x20000064

08003ed4 <__libc_init_array>:
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	4d0d      	ldr	r5, [pc, #52]	; (8003f0c <__libc_init_array+0x38>)
 8003ed8:	4c0d      	ldr	r4, [pc, #52]	; (8003f10 <__libc_init_array+0x3c>)
 8003eda:	1b64      	subs	r4, r4, r5
 8003edc:	10a4      	asrs	r4, r4, #2
 8003ede:	2600      	movs	r6, #0
 8003ee0:	42a6      	cmp	r6, r4
 8003ee2:	d109      	bne.n	8003ef8 <__libc_init_array+0x24>
 8003ee4:	4d0b      	ldr	r5, [pc, #44]	; (8003f14 <__libc_init_array+0x40>)
 8003ee6:	4c0c      	ldr	r4, [pc, #48]	; (8003f18 <__libc_init_array+0x44>)
 8003ee8:	f000 fffa 	bl	8004ee0 <_init>
 8003eec:	1b64      	subs	r4, r4, r5
 8003eee:	10a4      	asrs	r4, r4, #2
 8003ef0:	2600      	movs	r6, #0
 8003ef2:	42a6      	cmp	r6, r4
 8003ef4:	d105      	bne.n	8003f02 <__libc_init_array+0x2e>
 8003ef6:	bd70      	pop	{r4, r5, r6, pc}
 8003ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003efc:	4798      	blx	r3
 8003efe:	3601      	adds	r6, #1
 8003f00:	e7ee      	b.n	8003ee0 <__libc_init_array+0xc>
 8003f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f06:	4798      	blx	r3
 8003f08:	3601      	adds	r6, #1
 8003f0a:	e7f2      	b.n	8003ef2 <__libc_init_array+0x1e>
 8003f0c:	080050a8 	.word	0x080050a8
 8003f10:	080050a8 	.word	0x080050a8
 8003f14:	080050a8 	.word	0x080050a8
 8003f18:	080050ac 	.word	0x080050ac

08003f1c <__retarget_lock_init_recursive>:
 8003f1c:	4770      	bx	lr

08003f1e <__retarget_lock_acquire_recursive>:
 8003f1e:	4770      	bx	lr

08003f20 <__retarget_lock_release_recursive>:
 8003f20:	4770      	bx	lr
	...

08003f24 <__assert_func>:
 8003f24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f26:	4614      	mov	r4, r2
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <__assert_func+0x2c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4605      	mov	r5, r0
 8003f30:	68d8      	ldr	r0, [r3, #12]
 8003f32:	b14c      	cbz	r4, 8003f48 <__assert_func+0x24>
 8003f34:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <__assert_func+0x30>)
 8003f36:	9100      	str	r1, [sp, #0]
 8003f38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003f3c:	4906      	ldr	r1, [pc, #24]	; (8003f58 <__assert_func+0x34>)
 8003f3e:	462b      	mov	r3, r5
 8003f40:	f000 fca4 	bl	800488c <fiprintf>
 8003f44:	f000 fcec 	bl	8004920 <abort>
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <__assert_func+0x38>)
 8003f4a:	461c      	mov	r4, r3
 8003f4c:	e7f3      	b.n	8003f36 <__assert_func+0x12>
 8003f4e:	bf00      	nop
 8003f50:	20000064 	.word	0x20000064
 8003f54:	0800502f 	.word	0x0800502f
 8003f58:	0800503c 	.word	0x0800503c
 8003f5c:	0800506a 	.word	0x0800506a

08003f60 <_free_r>:
 8003f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f62:	2900      	cmp	r1, #0
 8003f64:	d044      	beq.n	8003ff0 <_free_r+0x90>
 8003f66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f6a:	9001      	str	r0, [sp, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f1a1 0404 	sub.w	r4, r1, #4
 8003f72:	bfb8      	it	lt
 8003f74:	18e4      	addlt	r4, r4, r3
 8003f76:	f000 f8e7 	bl	8004148 <__malloc_lock>
 8003f7a:	4a1e      	ldr	r2, [pc, #120]	; (8003ff4 <_free_r+0x94>)
 8003f7c:	9801      	ldr	r0, [sp, #4]
 8003f7e:	6813      	ldr	r3, [r2, #0]
 8003f80:	b933      	cbnz	r3, 8003f90 <_free_r+0x30>
 8003f82:	6063      	str	r3, [r4, #4]
 8003f84:	6014      	str	r4, [r2, #0]
 8003f86:	b003      	add	sp, #12
 8003f88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f8c:	f000 b8e2 	b.w	8004154 <__malloc_unlock>
 8003f90:	42a3      	cmp	r3, r4
 8003f92:	d908      	bls.n	8003fa6 <_free_r+0x46>
 8003f94:	6825      	ldr	r5, [r4, #0]
 8003f96:	1961      	adds	r1, r4, r5
 8003f98:	428b      	cmp	r3, r1
 8003f9a:	bf01      	itttt	eq
 8003f9c:	6819      	ldreq	r1, [r3, #0]
 8003f9e:	685b      	ldreq	r3, [r3, #4]
 8003fa0:	1949      	addeq	r1, r1, r5
 8003fa2:	6021      	streq	r1, [r4, #0]
 8003fa4:	e7ed      	b.n	8003f82 <_free_r+0x22>
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	b10b      	cbz	r3, 8003fb0 <_free_r+0x50>
 8003fac:	42a3      	cmp	r3, r4
 8003fae:	d9fa      	bls.n	8003fa6 <_free_r+0x46>
 8003fb0:	6811      	ldr	r1, [r2, #0]
 8003fb2:	1855      	adds	r5, r2, r1
 8003fb4:	42a5      	cmp	r5, r4
 8003fb6:	d10b      	bne.n	8003fd0 <_free_r+0x70>
 8003fb8:	6824      	ldr	r4, [r4, #0]
 8003fba:	4421      	add	r1, r4
 8003fbc:	1854      	adds	r4, r2, r1
 8003fbe:	42a3      	cmp	r3, r4
 8003fc0:	6011      	str	r1, [r2, #0]
 8003fc2:	d1e0      	bne.n	8003f86 <_free_r+0x26>
 8003fc4:	681c      	ldr	r4, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	6053      	str	r3, [r2, #4]
 8003fca:	440c      	add	r4, r1
 8003fcc:	6014      	str	r4, [r2, #0]
 8003fce:	e7da      	b.n	8003f86 <_free_r+0x26>
 8003fd0:	d902      	bls.n	8003fd8 <_free_r+0x78>
 8003fd2:	230c      	movs	r3, #12
 8003fd4:	6003      	str	r3, [r0, #0]
 8003fd6:	e7d6      	b.n	8003f86 <_free_r+0x26>
 8003fd8:	6825      	ldr	r5, [r4, #0]
 8003fda:	1961      	adds	r1, r4, r5
 8003fdc:	428b      	cmp	r3, r1
 8003fde:	bf04      	itt	eq
 8003fe0:	6819      	ldreq	r1, [r3, #0]
 8003fe2:	685b      	ldreq	r3, [r3, #4]
 8003fe4:	6063      	str	r3, [r4, #4]
 8003fe6:	bf04      	itt	eq
 8003fe8:	1949      	addeq	r1, r1, r5
 8003fea:	6021      	streq	r1, [r4, #0]
 8003fec:	6054      	str	r4, [r2, #4]
 8003fee:	e7ca      	b.n	8003f86 <_free_r+0x26>
 8003ff0:	b003      	add	sp, #12
 8003ff2:	bd30      	pop	{r4, r5, pc}
 8003ff4:	200002e4 	.word	0x200002e4

08003ff8 <malloc>:
 8003ff8:	4b02      	ldr	r3, [pc, #8]	; (8004004 <malloc+0xc>)
 8003ffa:	4601      	mov	r1, r0
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	f000 b823 	b.w	8004048 <_malloc_r>
 8004002:	bf00      	nop
 8004004:	20000064 	.word	0x20000064

08004008 <sbrk_aligned>:
 8004008:	b570      	push	{r4, r5, r6, lr}
 800400a:	4e0e      	ldr	r6, [pc, #56]	; (8004044 <sbrk_aligned+0x3c>)
 800400c:	460c      	mov	r4, r1
 800400e:	6831      	ldr	r1, [r6, #0]
 8004010:	4605      	mov	r5, r0
 8004012:	b911      	cbnz	r1, 800401a <sbrk_aligned+0x12>
 8004014:	f000 fc66 	bl	80048e4 <_sbrk_r>
 8004018:	6030      	str	r0, [r6, #0]
 800401a:	4621      	mov	r1, r4
 800401c:	4628      	mov	r0, r5
 800401e:	f000 fc61 	bl	80048e4 <_sbrk_r>
 8004022:	1c43      	adds	r3, r0, #1
 8004024:	d00a      	beq.n	800403c <sbrk_aligned+0x34>
 8004026:	1cc4      	adds	r4, r0, #3
 8004028:	f024 0403 	bic.w	r4, r4, #3
 800402c:	42a0      	cmp	r0, r4
 800402e:	d007      	beq.n	8004040 <sbrk_aligned+0x38>
 8004030:	1a21      	subs	r1, r4, r0
 8004032:	4628      	mov	r0, r5
 8004034:	f000 fc56 	bl	80048e4 <_sbrk_r>
 8004038:	3001      	adds	r0, #1
 800403a:	d101      	bne.n	8004040 <sbrk_aligned+0x38>
 800403c:	f04f 34ff 	mov.w	r4, #4294967295
 8004040:	4620      	mov	r0, r4
 8004042:	bd70      	pop	{r4, r5, r6, pc}
 8004044:	200002e8 	.word	0x200002e8

08004048 <_malloc_r>:
 8004048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800404c:	1ccd      	adds	r5, r1, #3
 800404e:	f025 0503 	bic.w	r5, r5, #3
 8004052:	3508      	adds	r5, #8
 8004054:	2d0c      	cmp	r5, #12
 8004056:	bf38      	it	cc
 8004058:	250c      	movcc	r5, #12
 800405a:	2d00      	cmp	r5, #0
 800405c:	4607      	mov	r7, r0
 800405e:	db01      	blt.n	8004064 <_malloc_r+0x1c>
 8004060:	42a9      	cmp	r1, r5
 8004062:	d905      	bls.n	8004070 <_malloc_r+0x28>
 8004064:	230c      	movs	r3, #12
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	2600      	movs	r6, #0
 800406a:	4630      	mov	r0, r6
 800406c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004070:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004144 <_malloc_r+0xfc>
 8004074:	f000 f868 	bl	8004148 <__malloc_lock>
 8004078:	f8d8 3000 	ldr.w	r3, [r8]
 800407c:	461c      	mov	r4, r3
 800407e:	bb5c      	cbnz	r4, 80040d8 <_malloc_r+0x90>
 8004080:	4629      	mov	r1, r5
 8004082:	4638      	mov	r0, r7
 8004084:	f7ff ffc0 	bl	8004008 <sbrk_aligned>
 8004088:	1c43      	adds	r3, r0, #1
 800408a:	4604      	mov	r4, r0
 800408c:	d155      	bne.n	800413a <_malloc_r+0xf2>
 800408e:	f8d8 4000 	ldr.w	r4, [r8]
 8004092:	4626      	mov	r6, r4
 8004094:	2e00      	cmp	r6, #0
 8004096:	d145      	bne.n	8004124 <_malloc_r+0xdc>
 8004098:	2c00      	cmp	r4, #0
 800409a:	d048      	beq.n	800412e <_malloc_r+0xe6>
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	4631      	mov	r1, r6
 80040a0:	4638      	mov	r0, r7
 80040a2:	eb04 0903 	add.w	r9, r4, r3
 80040a6:	f000 fc1d 	bl	80048e4 <_sbrk_r>
 80040aa:	4581      	cmp	r9, r0
 80040ac:	d13f      	bne.n	800412e <_malloc_r+0xe6>
 80040ae:	6821      	ldr	r1, [r4, #0]
 80040b0:	1a6d      	subs	r5, r5, r1
 80040b2:	4629      	mov	r1, r5
 80040b4:	4638      	mov	r0, r7
 80040b6:	f7ff ffa7 	bl	8004008 <sbrk_aligned>
 80040ba:	3001      	adds	r0, #1
 80040bc:	d037      	beq.n	800412e <_malloc_r+0xe6>
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	442b      	add	r3, r5
 80040c2:	6023      	str	r3, [r4, #0]
 80040c4:	f8d8 3000 	ldr.w	r3, [r8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d038      	beq.n	800413e <_malloc_r+0xf6>
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	42a2      	cmp	r2, r4
 80040d0:	d12b      	bne.n	800412a <_malloc_r+0xe2>
 80040d2:	2200      	movs	r2, #0
 80040d4:	605a      	str	r2, [r3, #4]
 80040d6:	e00f      	b.n	80040f8 <_malloc_r+0xb0>
 80040d8:	6822      	ldr	r2, [r4, #0]
 80040da:	1b52      	subs	r2, r2, r5
 80040dc:	d41f      	bmi.n	800411e <_malloc_r+0xd6>
 80040de:	2a0b      	cmp	r2, #11
 80040e0:	d917      	bls.n	8004112 <_malloc_r+0xca>
 80040e2:	1961      	adds	r1, r4, r5
 80040e4:	42a3      	cmp	r3, r4
 80040e6:	6025      	str	r5, [r4, #0]
 80040e8:	bf18      	it	ne
 80040ea:	6059      	strne	r1, [r3, #4]
 80040ec:	6863      	ldr	r3, [r4, #4]
 80040ee:	bf08      	it	eq
 80040f0:	f8c8 1000 	streq.w	r1, [r8]
 80040f4:	5162      	str	r2, [r4, r5]
 80040f6:	604b      	str	r3, [r1, #4]
 80040f8:	4638      	mov	r0, r7
 80040fa:	f104 060b 	add.w	r6, r4, #11
 80040fe:	f000 f829 	bl	8004154 <__malloc_unlock>
 8004102:	f026 0607 	bic.w	r6, r6, #7
 8004106:	1d23      	adds	r3, r4, #4
 8004108:	1af2      	subs	r2, r6, r3
 800410a:	d0ae      	beq.n	800406a <_malloc_r+0x22>
 800410c:	1b9b      	subs	r3, r3, r6
 800410e:	50a3      	str	r3, [r4, r2]
 8004110:	e7ab      	b.n	800406a <_malloc_r+0x22>
 8004112:	42a3      	cmp	r3, r4
 8004114:	6862      	ldr	r2, [r4, #4]
 8004116:	d1dd      	bne.n	80040d4 <_malloc_r+0x8c>
 8004118:	f8c8 2000 	str.w	r2, [r8]
 800411c:	e7ec      	b.n	80040f8 <_malloc_r+0xb0>
 800411e:	4623      	mov	r3, r4
 8004120:	6864      	ldr	r4, [r4, #4]
 8004122:	e7ac      	b.n	800407e <_malloc_r+0x36>
 8004124:	4634      	mov	r4, r6
 8004126:	6876      	ldr	r6, [r6, #4]
 8004128:	e7b4      	b.n	8004094 <_malloc_r+0x4c>
 800412a:	4613      	mov	r3, r2
 800412c:	e7cc      	b.n	80040c8 <_malloc_r+0x80>
 800412e:	230c      	movs	r3, #12
 8004130:	603b      	str	r3, [r7, #0]
 8004132:	4638      	mov	r0, r7
 8004134:	f000 f80e 	bl	8004154 <__malloc_unlock>
 8004138:	e797      	b.n	800406a <_malloc_r+0x22>
 800413a:	6025      	str	r5, [r4, #0]
 800413c:	e7dc      	b.n	80040f8 <_malloc_r+0xb0>
 800413e:	605b      	str	r3, [r3, #4]
 8004140:	deff      	udf	#255	; 0xff
 8004142:	bf00      	nop
 8004144:	200002e4 	.word	0x200002e4

08004148 <__malloc_lock>:
 8004148:	4801      	ldr	r0, [pc, #4]	; (8004150 <__malloc_lock+0x8>)
 800414a:	f7ff bee8 	b.w	8003f1e <__retarget_lock_acquire_recursive>
 800414e:	bf00      	nop
 8004150:	200002e0 	.word	0x200002e0

08004154 <__malloc_unlock>:
 8004154:	4801      	ldr	r0, [pc, #4]	; (800415c <__malloc_unlock+0x8>)
 8004156:	f7ff bee3 	b.w	8003f20 <__retarget_lock_release_recursive>
 800415a:	bf00      	nop
 800415c:	200002e0 	.word	0x200002e0

08004160 <__ssputs_r>:
 8004160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004164:	688e      	ldr	r6, [r1, #8]
 8004166:	461f      	mov	r7, r3
 8004168:	42be      	cmp	r6, r7
 800416a:	680b      	ldr	r3, [r1, #0]
 800416c:	4682      	mov	sl, r0
 800416e:	460c      	mov	r4, r1
 8004170:	4690      	mov	r8, r2
 8004172:	d82c      	bhi.n	80041ce <__ssputs_r+0x6e>
 8004174:	898a      	ldrh	r2, [r1, #12]
 8004176:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800417a:	d026      	beq.n	80041ca <__ssputs_r+0x6a>
 800417c:	6965      	ldr	r5, [r4, #20]
 800417e:	6909      	ldr	r1, [r1, #16]
 8004180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004184:	eba3 0901 	sub.w	r9, r3, r1
 8004188:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800418c:	1c7b      	adds	r3, r7, #1
 800418e:	444b      	add	r3, r9
 8004190:	106d      	asrs	r5, r5, #1
 8004192:	429d      	cmp	r5, r3
 8004194:	bf38      	it	cc
 8004196:	461d      	movcc	r5, r3
 8004198:	0553      	lsls	r3, r2, #21
 800419a:	d527      	bpl.n	80041ec <__ssputs_r+0x8c>
 800419c:	4629      	mov	r1, r5
 800419e:	f7ff ff53 	bl	8004048 <_malloc_r>
 80041a2:	4606      	mov	r6, r0
 80041a4:	b360      	cbz	r0, 8004200 <__ssputs_r+0xa0>
 80041a6:	6921      	ldr	r1, [r4, #16]
 80041a8:	464a      	mov	r2, r9
 80041aa:	f000 fbab 	bl	8004904 <memcpy>
 80041ae:	89a3      	ldrh	r3, [r4, #12]
 80041b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b8:	81a3      	strh	r3, [r4, #12]
 80041ba:	6126      	str	r6, [r4, #16]
 80041bc:	6165      	str	r5, [r4, #20]
 80041be:	444e      	add	r6, r9
 80041c0:	eba5 0509 	sub.w	r5, r5, r9
 80041c4:	6026      	str	r6, [r4, #0]
 80041c6:	60a5      	str	r5, [r4, #8]
 80041c8:	463e      	mov	r6, r7
 80041ca:	42be      	cmp	r6, r7
 80041cc:	d900      	bls.n	80041d0 <__ssputs_r+0x70>
 80041ce:	463e      	mov	r6, r7
 80041d0:	6820      	ldr	r0, [r4, #0]
 80041d2:	4632      	mov	r2, r6
 80041d4:	4641      	mov	r1, r8
 80041d6:	f000 fb6b 	bl	80048b0 <memmove>
 80041da:	68a3      	ldr	r3, [r4, #8]
 80041dc:	1b9b      	subs	r3, r3, r6
 80041de:	60a3      	str	r3, [r4, #8]
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	4433      	add	r3, r6
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	2000      	movs	r0, #0
 80041e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ec:	462a      	mov	r2, r5
 80041ee:	f000 fb9e 	bl	800492e <_realloc_r>
 80041f2:	4606      	mov	r6, r0
 80041f4:	2800      	cmp	r0, #0
 80041f6:	d1e0      	bne.n	80041ba <__ssputs_r+0x5a>
 80041f8:	6921      	ldr	r1, [r4, #16]
 80041fa:	4650      	mov	r0, sl
 80041fc:	f7ff feb0 	bl	8003f60 <_free_r>
 8004200:	230c      	movs	r3, #12
 8004202:	f8ca 3000 	str.w	r3, [sl]
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800420c:	81a3      	strh	r3, [r4, #12]
 800420e:	f04f 30ff 	mov.w	r0, #4294967295
 8004212:	e7e9      	b.n	80041e8 <__ssputs_r+0x88>

08004214 <_svfiprintf_r>:
 8004214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004218:	4698      	mov	r8, r3
 800421a:	898b      	ldrh	r3, [r1, #12]
 800421c:	061b      	lsls	r3, r3, #24
 800421e:	b09d      	sub	sp, #116	; 0x74
 8004220:	4607      	mov	r7, r0
 8004222:	460d      	mov	r5, r1
 8004224:	4614      	mov	r4, r2
 8004226:	d50e      	bpl.n	8004246 <_svfiprintf_r+0x32>
 8004228:	690b      	ldr	r3, [r1, #16]
 800422a:	b963      	cbnz	r3, 8004246 <_svfiprintf_r+0x32>
 800422c:	2140      	movs	r1, #64	; 0x40
 800422e:	f7ff ff0b 	bl	8004048 <_malloc_r>
 8004232:	6028      	str	r0, [r5, #0]
 8004234:	6128      	str	r0, [r5, #16]
 8004236:	b920      	cbnz	r0, 8004242 <_svfiprintf_r+0x2e>
 8004238:	230c      	movs	r3, #12
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	f04f 30ff 	mov.w	r0, #4294967295
 8004240:	e0d0      	b.n	80043e4 <_svfiprintf_r+0x1d0>
 8004242:	2340      	movs	r3, #64	; 0x40
 8004244:	616b      	str	r3, [r5, #20]
 8004246:	2300      	movs	r3, #0
 8004248:	9309      	str	r3, [sp, #36]	; 0x24
 800424a:	2320      	movs	r3, #32
 800424c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004250:	f8cd 800c 	str.w	r8, [sp, #12]
 8004254:	2330      	movs	r3, #48	; 0x30
 8004256:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80043fc <_svfiprintf_r+0x1e8>
 800425a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800425e:	f04f 0901 	mov.w	r9, #1
 8004262:	4623      	mov	r3, r4
 8004264:	469a      	mov	sl, r3
 8004266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800426a:	b10a      	cbz	r2, 8004270 <_svfiprintf_r+0x5c>
 800426c:	2a25      	cmp	r2, #37	; 0x25
 800426e:	d1f9      	bne.n	8004264 <_svfiprintf_r+0x50>
 8004270:	ebba 0b04 	subs.w	fp, sl, r4
 8004274:	d00b      	beq.n	800428e <_svfiprintf_r+0x7a>
 8004276:	465b      	mov	r3, fp
 8004278:	4622      	mov	r2, r4
 800427a:	4629      	mov	r1, r5
 800427c:	4638      	mov	r0, r7
 800427e:	f7ff ff6f 	bl	8004160 <__ssputs_r>
 8004282:	3001      	adds	r0, #1
 8004284:	f000 80a9 	beq.w	80043da <_svfiprintf_r+0x1c6>
 8004288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800428a:	445a      	add	r2, fp
 800428c:	9209      	str	r2, [sp, #36]	; 0x24
 800428e:	f89a 3000 	ldrb.w	r3, [sl]
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 80a1 	beq.w	80043da <_svfiprintf_r+0x1c6>
 8004298:	2300      	movs	r3, #0
 800429a:	f04f 32ff 	mov.w	r2, #4294967295
 800429e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042a2:	f10a 0a01 	add.w	sl, sl, #1
 80042a6:	9304      	str	r3, [sp, #16]
 80042a8:	9307      	str	r3, [sp, #28]
 80042aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042ae:	931a      	str	r3, [sp, #104]	; 0x68
 80042b0:	4654      	mov	r4, sl
 80042b2:	2205      	movs	r2, #5
 80042b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042b8:	4850      	ldr	r0, [pc, #320]	; (80043fc <_svfiprintf_r+0x1e8>)
 80042ba:	f7fb ff99 	bl	80001f0 <memchr>
 80042be:	9a04      	ldr	r2, [sp, #16]
 80042c0:	b9d8      	cbnz	r0, 80042fa <_svfiprintf_r+0xe6>
 80042c2:	06d0      	lsls	r0, r2, #27
 80042c4:	bf44      	itt	mi
 80042c6:	2320      	movmi	r3, #32
 80042c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042cc:	0711      	lsls	r1, r2, #28
 80042ce:	bf44      	itt	mi
 80042d0:	232b      	movmi	r3, #43	; 0x2b
 80042d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042d6:	f89a 3000 	ldrb.w	r3, [sl]
 80042da:	2b2a      	cmp	r3, #42	; 0x2a
 80042dc:	d015      	beq.n	800430a <_svfiprintf_r+0xf6>
 80042de:	9a07      	ldr	r2, [sp, #28]
 80042e0:	4654      	mov	r4, sl
 80042e2:	2000      	movs	r0, #0
 80042e4:	f04f 0c0a 	mov.w	ip, #10
 80042e8:	4621      	mov	r1, r4
 80042ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042ee:	3b30      	subs	r3, #48	; 0x30
 80042f0:	2b09      	cmp	r3, #9
 80042f2:	d94d      	bls.n	8004390 <_svfiprintf_r+0x17c>
 80042f4:	b1b0      	cbz	r0, 8004324 <_svfiprintf_r+0x110>
 80042f6:	9207      	str	r2, [sp, #28]
 80042f8:	e014      	b.n	8004324 <_svfiprintf_r+0x110>
 80042fa:	eba0 0308 	sub.w	r3, r0, r8
 80042fe:	fa09 f303 	lsl.w	r3, r9, r3
 8004302:	4313      	orrs	r3, r2
 8004304:	9304      	str	r3, [sp, #16]
 8004306:	46a2      	mov	sl, r4
 8004308:	e7d2      	b.n	80042b0 <_svfiprintf_r+0x9c>
 800430a:	9b03      	ldr	r3, [sp, #12]
 800430c:	1d19      	adds	r1, r3, #4
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	9103      	str	r1, [sp, #12]
 8004312:	2b00      	cmp	r3, #0
 8004314:	bfbb      	ittet	lt
 8004316:	425b      	neglt	r3, r3
 8004318:	f042 0202 	orrlt.w	r2, r2, #2
 800431c:	9307      	strge	r3, [sp, #28]
 800431e:	9307      	strlt	r3, [sp, #28]
 8004320:	bfb8      	it	lt
 8004322:	9204      	strlt	r2, [sp, #16]
 8004324:	7823      	ldrb	r3, [r4, #0]
 8004326:	2b2e      	cmp	r3, #46	; 0x2e
 8004328:	d10c      	bne.n	8004344 <_svfiprintf_r+0x130>
 800432a:	7863      	ldrb	r3, [r4, #1]
 800432c:	2b2a      	cmp	r3, #42	; 0x2a
 800432e:	d134      	bne.n	800439a <_svfiprintf_r+0x186>
 8004330:	9b03      	ldr	r3, [sp, #12]
 8004332:	1d1a      	adds	r2, r3, #4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	9203      	str	r2, [sp, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	bfb8      	it	lt
 800433c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004340:	3402      	adds	r4, #2
 8004342:	9305      	str	r3, [sp, #20]
 8004344:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800440c <_svfiprintf_r+0x1f8>
 8004348:	7821      	ldrb	r1, [r4, #0]
 800434a:	2203      	movs	r2, #3
 800434c:	4650      	mov	r0, sl
 800434e:	f7fb ff4f 	bl	80001f0 <memchr>
 8004352:	b138      	cbz	r0, 8004364 <_svfiprintf_r+0x150>
 8004354:	9b04      	ldr	r3, [sp, #16]
 8004356:	eba0 000a 	sub.w	r0, r0, sl
 800435a:	2240      	movs	r2, #64	; 0x40
 800435c:	4082      	lsls	r2, r0
 800435e:	4313      	orrs	r3, r2
 8004360:	3401      	adds	r4, #1
 8004362:	9304      	str	r3, [sp, #16]
 8004364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004368:	4825      	ldr	r0, [pc, #148]	; (8004400 <_svfiprintf_r+0x1ec>)
 800436a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800436e:	2206      	movs	r2, #6
 8004370:	f7fb ff3e 	bl	80001f0 <memchr>
 8004374:	2800      	cmp	r0, #0
 8004376:	d038      	beq.n	80043ea <_svfiprintf_r+0x1d6>
 8004378:	4b22      	ldr	r3, [pc, #136]	; (8004404 <_svfiprintf_r+0x1f0>)
 800437a:	bb1b      	cbnz	r3, 80043c4 <_svfiprintf_r+0x1b0>
 800437c:	9b03      	ldr	r3, [sp, #12]
 800437e:	3307      	adds	r3, #7
 8004380:	f023 0307 	bic.w	r3, r3, #7
 8004384:	3308      	adds	r3, #8
 8004386:	9303      	str	r3, [sp, #12]
 8004388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800438a:	4433      	add	r3, r6
 800438c:	9309      	str	r3, [sp, #36]	; 0x24
 800438e:	e768      	b.n	8004262 <_svfiprintf_r+0x4e>
 8004390:	fb0c 3202 	mla	r2, ip, r2, r3
 8004394:	460c      	mov	r4, r1
 8004396:	2001      	movs	r0, #1
 8004398:	e7a6      	b.n	80042e8 <_svfiprintf_r+0xd4>
 800439a:	2300      	movs	r3, #0
 800439c:	3401      	adds	r4, #1
 800439e:	9305      	str	r3, [sp, #20]
 80043a0:	4619      	mov	r1, r3
 80043a2:	f04f 0c0a 	mov.w	ip, #10
 80043a6:	4620      	mov	r0, r4
 80043a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043ac:	3a30      	subs	r2, #48	; 0x30
 80043ae:	2a09      	cmp	r2, #9
 80043b0:	d903      	bls.n	80043ba <_svfiprintf_r+0x1a6>
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0c6      	beq.n	8004344 <_svfiprintf_r+0x130>
 80043b6:	9105      	str	r1, [sp, #20]
 80043b8:	e7c4      	b.n	8004344 <_svfiprintf_r+0x130>
 80043ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80043be:	4604      	mov	r4, r0
 80043c0:	2301      	movs	r3, #1
 80043c2:	e7f0      	b.n	80043a6 <_svfiprintf_r+0x192>
 80043c4:	ab03      	add	r3, sp, #12
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	462a      	mov	r2, r5
 80043ca:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <_svfiprintf_r+0x1f4>)
 80043cc:	a904      	add	r1, sp, #16
 80043ce:	4638      	mov	r0, r7
 80043d0:	f3af 8000 	nop.w
 80043d4:	1c42      	adds	r2, r0, #1
 80043d6:	4606      	mov	r6, r0
 80043d8:	d1d6      	bne.n	8004388 <_svfiprintf_r+0x174>
 80043da:	89ab      	ldrh	r3, [r5, #12]
 80043dc:	065b      	lsls	r3, r3, #25
 80043de:	f53f af2d 	bmi.w	800423c <_svfiprintf_r+0x28>
 80043e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043e4:	b01d      	add	sp, #116	; 0x74
 80043e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ea:	ab03      	add	r3, sp, #12
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	462a      	mov	r2, r5
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <_svfiprintf_r+0x1f4>)
 80043f2:	a904      	add	r1, sp, #16
 80043f4:	4638      	mov	r0, r7
 80043f6:	f000 f879 	bl	80044ec <_printf_i>
 80043fa:	e7eb      	b.n	80043d4 <_svfiprintf_r+0x1c0>
 80043fc:	0800506b 	.word	0x0800506b
 8004400:	08005075 	.word	0x08005075
 8004404:	00000000 	.word	0x00000000
 8004408:	08004161 	.word	0x08004161
 800440c:	08005071 	.word	0x08005071

08004410 <_printf_common>:
 8004410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004414:	4616      	mov	r6, r2
 8004416:	4699      	mov	r9, r3
 8004418:	688a      	ldr	r2, [r1, #8]
 800441a:	690b      	ldr	r3, [r1, #16]
 800441c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004420:	4293      	cmp	r3, r2
 8004422:	bfb8      	it	lt
 8004424:	4613      	movlt	r3, r2
 8004426:	6033      	str	r3, [r6, #0]
 8004428:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800442c:	4607      	mov	r7, r0
 800442e:	460c      	mov	r4, r1
 8004430:	b10a      	cbz	r2, 8004436 <_printf_common+0x26>
 8004432:	3301      	adds	r3, #1
 8004434:	6033      	str	r3, [r6, #0]
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	0699      	lsls	r1, r3, #26
 800443a:	bf42      	ittt	mi
 800443c:	6833      	ldrmi	r3, [r6, #0]
 800443e:	3302      	addmi	r3, #2
 8004440:	6033      	strmi	r3, [r6, #0]
 8004442:	6825      	ldr	r5, [r4, #0]
 8004444:	f015 0506 	ands.w	r5, r5, #6
 8004448:	d106      	bne.n	8004458 <_printf_common+0x48>
 800444a:	f104 0a19 	add.w	sl, r4, #25
 800444e:	68e3      	ldr	r3, [r4, #12]
 8004450:	6832      	ldr	r2, [r6, #0]
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	42ab      	cmp	r3, r5
 8004456:	dc26      	bgt.n	80044a6 <_printf_common+0x96>
 8004458:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800445c:	1e13      	subs	r3, r2, #0
 800445e:	6822      	ldr	r2, [r4, #0]
 8004460:	bf18      	it	ne
 8004462:	2301      	movne	r3, #1
 8004464:	0692      	lsls	r2, r2, #26
 8004466:	d42b      	bmi.n	80044c0 <_printf_common+0xb0>
 8004468:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800446c:	4649      	mov	r1, r9
 800446e:	4638      	mov	r0, r7
 8004470:	47c0      	blx	r8
 8004472:	3001      	adds	r0, #1
 8004474:	d01e      	beq.n	80044b4 <_printf_common+0xa4>
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	6922      	ldr	r2, [r4, #16]
 800447a:	f003 0306 	and.w	r3, r3, #6
 800447e:	2b04      	cmp	r3, #4
 8004480:	bf02      	ittt	eq
 8004482:	68e5      	ldreq	r5, [r4, #12]
 8004484:	6833      	ldreq	r3, [r6, #0]
 8004486:	1aed      	subeq	r5, r5, r3
 8004488:	68a3      	ldr	r3, [r4, #8]
 800448a:	bf0c      	ite	eq
 800448c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004490:	2500      	movne	r5, #0
 8004492:	4293      	cmp	r3, r2
 8004494:	bfc4      	itt	gt
 8004496:	1a9b      	subgt	r3, r3, r2
 8004498:	18ed      	addgt	r5, r5, r3
 800449a:	2600      	movs	r6, #0
 800449c:	341a      	adds	r4, #26
 800449e:	42b5      	cmp	r5, r6
 80044a0:	d11a      	bne.n	80044d8 <_printf_common+0xc8>
 80044a2:	2000      	movs	r0, #0
 80044a4:	e008      	b.n	80044b8 <_printf_common+0xa8>
 80044a6:	2301      	movs	r3, #1
 80044a8:	4652      	mov	r2, sl
 80044aa:	4649      	mov	r1, r9
 80044ac:	4638      	mov	r0, r7
 80044ae:	47c0      	blx	r8
 80044b0:	3001      	adds	r0, #1
 80044b2:	d103      	bne.n	80044bc <_printf_common+0xac>
 80044b4:	f04f 30ff 	mov.w	r0, #4294967295
 80044b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044bc:	3501      	adds	r5, #1
 80044be:	e7c6      	b.n	800444e <_printf_common+0x3e>
 80044c0:	18e1      	adds	r1, r4, r3
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	2030      	movs	r0, #48	; 0x30
 80044c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044ca:	4422      	add	r2, r4
 80044cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044d4:	3302      	adds	r3, #2
 80044d6:	e7c7      	b.n	8004468 <_printf_common+0x58>
 80044d8:	2301      	movs	r3, #1
 80044da:	4622      	mov	r2, r4
 80044dc:	4649      	mov	r1, r9
 80044de:	4638      	mov	r0, r7
 80044e0:	47c0      	blx	r8
 80044e2:	3001      	adds	r0, #1
 80044e4:	d0e6      	beq.n	80044b4 <_printf_common+0xa4>
 80044e6:	3601      	adds	r6, #1
 80044e8:	e7d9      	b.n	800449e <_printf_common+0x8e>
	...

080044ec <_printf_i>:
 80044ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044f0:	7e0f      	ldrb	r7, [r1, #24]
 80044f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044f4:	2f78      	cmp	r7, #120	; 0x78
 80044f6:	4691      	mov	r9, r2
 80044f8:	4680      	mov	r8, r0
 80044fa:	460c      	mov	r4, r1
 80044fc:	469a      	mov	sl, r3
 80044fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004502:	d807      	bhi.n	8004514 <_printf_i+0x28>
 8004504:	2f62      	cmp	r7, #98	; 0x62
 8004506:	d80a      	bhi.n	800451e <_printf_i+0x32>
 8004508:	2f00      	cmp	r7, #0
 800450a:	f000 80d4 	beq.w	80046b6 <_printf_i+0x1ca>
 800450e:	2f58      	cmp	r7, #88	; 0x58
 8004510:	f000 80c0 	beq.w	8004694 <_printf_i+0x1a8>
 8004514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004518:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800451c:	e03a      	b.n	8004594 <_printf_i+0xa8>
 800451e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004522:	2b15      	cmp	r3, #21
 8004524:	d8f6      	bhi.n	8004514 <_printf_i+0x28>
 8004526:	a101      	add	r1, pc, #4	; (adr r1, 800452c <_printf_i+0x40>)
 8004528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800452c:	08004585 	.word	0x08004585
 8004530:	08004599 	.word	0x08004599
 8004534:	08004515 	.word	0x08004515
 8004538:	08004515 	.word	0x08004515
 800453c:	08004515 	.word	0x08004515
 8004540:	08004515 	.word	0x08004515
 8004544:	08004599 	.word	0x08004599
 8004548:	08004515 	.word	0x08004515
 800454c:	08004515 	.word	0x08004515
 8004550:	08004515 	.word	0x08004515
 8004554:	08004515 	.word	0x08004515
 8004558:	0800469d 	.word	0x0800469d
 800455c:	080045c5 	.word	0x080045c5
 8004560:	08004657 	.word	0x08004657
 8004564:	08004515 	.word	0x08004515
 8004568:	08004515 	.word	0x08004515
 800456c:	080046bf 	.word	0x080046bf
 8004570:	08004515 	.word	0x08004515
 8004574:	080045c5 	.word	0x080045c5
 8004578:	08004515 	.word	0x08004515
 800457c:	08004515 	.word	0x08004515
 8004580:	0800465f 	.word	0x0800465f
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	1d1a      	adds	r2, r3, #4
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	602a      	str	r2, [r5, #0]
 800458c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004590:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004594:	2301      	movs	r3, #1
 8004596:	e09f      	b.n	80046d8 <_printf_i+0x1ec>
 8004598:	6820      	ldr	r0, [r4, #0]
 800459a:	682b      	ldr	r3, [r5, #0]
 800459c:	0607      	lsls	r7, r0, #24
 800459e:	f103 0104 	add.w	r1, r3, #4
 80045a2:	6029      	str	r1, [r5, #0]
 80045a4:	d501      	bpl.n	80045aa <_printf_i+0xbe>
 80045a6:	681e      	ldr	r6, [r3, #0]
 80045a8:	e003      	b.n	80045b2 <_printf_i+0xc6>
 80045aa:	0646      	lsls	r6, r0, #25
 80045ac:	d5fb      	bpl.n	80045a6 <_printf_i+0xba>
 80045ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80045b2:	2e00      	cmp	r6, #0
 80045b4:	da03      	bge.n	80045be <_printf_i+0xd2>
 80045b6:	232d      	movs	r3, #45	; 0x2d
 80045b8:	4276      	negs	r6, r6
 80045ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045be:	485a      	ldr	r0, [pc, #360]	; (8004728 <_printf_i+0x23c>)
 80045c0:	230a      	movs	r3, #10
 80045c2:	e012      	b.n	80045ea <_printf_i+0xfe>
 80045c4:	682b      	ldr	r3, [r5, #0]
 80045c6:	6820      	ldr	r0, [r4, #0]
 80045c8:	1d19      	adds	r1, r3, #4
 80045ca:	6029      	str	r1, [r5, #0]
 80045cc:	0605      	lsls	r5, r0, #24
 80045ce:	d501      	bpl.n	80045d4 <_printf_i+0xe8>
 80045d0:	681e      	ldr	r6, [r3, #0]
 80045d2:	e002      	b.n	80045da <_printf_i+0xee>
 80045d4:	0641      	lsls	r1, r0, #25
 80045d6:	d5fb      	bpl.n	80045d0 <_printf_i+0xe4>
 80045d8:	881e      	ldrh	r6, [r3, #0]
 80045da:	4853      	ldr	r0, [pc, #332]	; (8004728 <_printf_i+0x23c>)
 80045dc:	2f6f      	cmp	r7, #111	; 0x6f
 80045de:	bf0c      	ite	eq
 80045e0:	2308      	moveq	r3, #8
 80045e2:	230a      	movne	r3, #10
 80045e4:	2100      	movs	r1, #0
 80045e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045ea:	6865      	ldr	r5, [r4, #4]
 80045ec:	60a5      	str	r5, [r4, #8]
 80045ee:	2d00      	cmp	r5, #0
 80045f0:	bfa2      	ittt	ge
 80045f2:	6821      	ldrge	r1, [r4, #0]
 80045f4:	f021 0104 	bicge.w	r1, r1, #4
 80045f8:	6021      	strge	r1, [r4, #0]
 80045fa:	b90e      	cbnz	r6, 8004600 <_printf_i+0x114>
 80045fc:	2d00      	cmp	r5, #0
 80045fe:	d04b      	beq.n	8004698 <_printf_i+0x1ac>
 8004600:	4615      	mov	r5, r2
 8004602:	fbb6 f1f3 	udiv	r1, r6, r3
 8004606:	fb03 6711 	mls	r7, r3, r1, r6
 800460a:	5dc7      	ldrb	r7, [r0, r7]
 800460c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004610:	4637      	mov	r7, r6
 8004612:	42bb      	cmp	r3, r7
 8004614:	460e      	mov	r6, r1
 8004616:	d9f4      	bls.n	8004602 <_printf_i+0x116>
 8004618:	2b08      	cmp	r3, #8
 800461a:	d10b      	bne.n	8004634 <_printf_i+0x148>
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	07de      	lsls	r6, r3, #31
 8004620:	d508      	bpl.n	8004634 <_printf_i+0x148>
 8004622:	6923      	ldr	r3, [r4, #16]
 8004624:	6861      	ldr	r1, [r4, #4]
 8004626:	4299      	cmp	r1, r3
 8004628:	bfde      	ittt	le
 800462a:	2330      	movle	r3, #48	; 0x30
 800462c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004630:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004634:	1b52      	subs	r2, r2, r5
 8004636:	6122      	str	r2, [r4, #16]
 8004638:	f8cd a000 	str.w	sl, [sp]
 800463c:	464b      	mov	r3, r9
 800463e:	aa03      	add	r2, sp, #12
 8004640:	4621      	mov	r1, r4
 8004642:	4640      	mov	r0, r8
 8004644:	f7ff fee4 	bl	8004410 <_printf_common>
 8004648:	3001      	adds	r0, #1
 800464a:	d14a      	bne.n	80046e2 <_printf_i+0x1f6>
 800464c:	f04f 30ff 	mov.w	r0, #4294967295
 8004650:	b004      	add	sp, #16
 8004652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	f043 0320 	orr.w	r3, r3, #32
 800465c:	6023      	str	r3, [r4, #0]
 800465e:	4833      	ldr	r0, [pc, #204]	; (800472c <_printf_i+0x240>)
 8004660:	2778      	movs	r7, #120	; 0x78
 8004662:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	6829      	ldr	r1, [r5, #0]
 800466a:	061f      	lsls	r7, r3, #24
 800466c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004670:	d402      	bmi.n	8004678 <_printf_i+0x18c>
 8004672:	065f      	lsls	r7, r3, #25
 8004674:	bf48      	it	mi
 8004676:	b2b6      	uxthmi	r6, r6
 8004678:	07df      	lsls	r7, r3, #31
 800467a:	bf48      	it	mi
 800467c:	f043 0320 	orrmi.w	r3, r3, #32
 8004680:	6029      	str	r1, [r5, #0]
 8004682:	bf48      	it	mi
 8004684:	6023      	strmi	r3, [r4, #0]
 8004686:	b91e      	cbnz	r6, 8004690 <_printf_i+0x1a4>
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	f023 0320 	bic.w	r3, r3, #32
 800468e:	6023      	str	r3, [r4, #0]
 8004690:	2310      	movs	r3, #16
 8004692:	e7a7      	b.n	80045e4 <_printf_i+0xf8>
 8004694:	4824      	ldr	r0, [pc, #144]	; (8004728 <_printf_i+0x23c>)
 8004696:	e7e4      	b.n	8004662 <_printf_i+0x176>
 8004698:	4615      	mov	r5, r2
 800469a:	e7bd      	b.n	8004618 <_printf_i+0x12c>
 800469c:	682b      	ldr	r3, [r5, #0]
 800469e:	6826      	ldr	r6, [r4, #0]
 80046a0:	6961      	ldr	r1, [r4, #20]
 80046a2:	1d18      	adds	r0, r3, #4
 80046a4:	6028      	str	r0, [r5, #0]
 80046a6:	0635      	lsls	r5, r6, #24
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	d501      	bpl.n	80046b0 <_printf_i+0x1c4>
 80046ac:	6019      	str	r1, [r3, #0]
 80046ae:	e002      	b.n	80046b6 <_printf_i+0x1ca>
 80046b0:	0670      	lsls	r0, r6, #25
 80046b2:	d5fb      	bpl.n	80046ac <_printf_i+0x1c0>
 80046b4:	8019      	strh	r1, [r3, #0]
 80046b6:	2300      	movs	r3, #0
 80046b8:	6123      	str	r3, [r4, #16]
 80046ba:	4615      	mov	r5, r2
 80046bc:	e7bc      	b.n	8004638 <_printf_i+0x14c>
 80046be:	682b      	ldr	r3, [r5, #0]
 80046c0:	1d1a      	adds	r2, r3, #4
 80046c2:	602a      	str	r2, [r5, #0]
 80046c4:	681d      	ldr	r5, [r3, #0]
 80046c6:	6862      	ldr	r2, [r4, #4]
 80046c8:	2100      	movs	r1, #0
 80046ca:	4628      	mov	r0, r5
 80046cc:	f7fb fd90 	bl	80001f0 <memchr>
 80046d0:	b108      	cbz	r0, 80046d6 <_printf_i+0x1ea>
 80046d2:	1b40      	subs	r0, r0, r5
 80046d4:	6060      	str	r0, [r4, #4]
 80046d6:	6863      	ldr	r3, [r4, #4]
 80046d8:	6123      	str	r3, [r4, #16]
 80046da:	2300      	movs	r3, #0
 80046dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046e0:	e7aa      	b.n	8004638 <_printf_i+0x14c>
 80046e2:	6923      	ldr	r3, [r4, #16]
 80046e4:	462a      	mov	r2, r5
 80046e6:	4649      	mov	r1, r9
 80046e8:	4640      	mov	r0, r8
 80046ea:	47d0      	blx	sl
 80046ec:	3001      	adds	r0, #1
 80046ee:	d0ad      	beq.n	800464c <_printf_i+0x160>
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	079b      	lsls	r3, r3, #30
 80046f4:	d413      	bmi.n	800471e <_printf_i+0x232>
 80046f6:	68e0      	ldr	r0, [r4, #12]
 80046f8:	9b03      	ldr	r3, [sp, #12]
 80046fa:	4298      	cmp	r0, r3
 80046fc:	bfb8      	it	lt
 80046fe:	4618      	movlt	r0, r3
 8004700:	e7a6      	b.n	8004650 <_printf_i+0x164>
 8004702:	2301      	movs	r3, #1
 8004704:	4632      	mov	r2, r6
 8004706:	4649      	mov	r1, r9
 8004708:	4640      	mov	r0, r8
 800470a:	47d0      	blx	sl
 800470c:	3001      	adds	r0, #1
 800470e:	d09d      	beq.n	800464c <_printf_i+0x160>
 8004710:	3501      	adds	r5, #1
 8004712:	68e3      	ldr	r3, [r4, #12]
 8004714:	9903      	ldr	r1, [sp, #12]
 8004716:	1a5b      	subs	r3, r3, r1
 8004718:	42ab      	cmp	r3, r5
 800471a:	dcf2      	bgt.n	8004702 <_printf_i+0x216>
 800471c:	e7eb      	b.n	80046f6 <_printf_i+0x20a>
 800471e:	2500      	movs	r5, #0
 8004720:	f104 0619 	add.w	r6, r4, #25
 8004724:	e7f5      	b.n	8004712 <_printf_i+0x226>
 8004726:	bf00      	nop
 8004728:	0800507c 	.word	0x0800507c
 800472c:	0800508d 	.word	0x0800508d

08004730 <__sflush_r>:
 8004730:	898a      	ldrh	r2, [r1, #12]
 8004732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004736:	4605      	mov	r5, r0
 8004738:	0710      	lsls	r0, r2, #28
 800473a:	460c      	mov	r4, r1
 800473c:	d458      	bmi.n	80047f0 <__sflush_r+0xc0>
 800473e:	684b      	ldr	r3, [r1, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	dc05      	bgt.n	8004750 <__sflush_r+0x20>
 8004744:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	dc02      	bgt.n	8004750 <__sflush_r+0x20>
 800474a:	2000      	movs	r0, #0
 800474c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004750:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004752:	2e00      	cmp	r6, #0
 8004754:	d0f9      	beq.n	800474a <__sflush_r+0x1a>
 8004756:	2300      	movs	r3, #0
 8004758:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800475c:	682f      	ldr	r7, [r5, #0]
 800475e:	6a21      	ldr	r1, [r4, #32]
 8004760:	602b      	str	r3, [r5, #0]
 8004762:	d032      	beq.n	80047ca <__sflush_r+0x9a>
 8004764:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004766:	89a3      	ldrh	r3, [r4, #12]
 8004768:	075a      	lsls	r2, r3, #29
 800476a:	d505      	bpl.n	8004778 <__sflush_r+0x48>
 800476c:	6863      	ldr	r3, [r4, #4]
 800476e:	1ac0      	subs	r0, r0, r3
 8004770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004772:	b10b      	cbz	r3, 8004778 <__sflush_r+0x48>
 8004774:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004776:	1ac0      	subs	r0, r0, r3
 8004778:	2300      	movs	r3, #0
 800477a:	4602      	mov	r2, r0
 800477c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800477e:	6a21      	ldr	r1, [r4, #32]
 8004780:	4628      	mov	r0, r5
 8004782:	47b0      	blx	r6
 8004784:	1c43      	adds	r3, r0, #1
 8004786:	89a3      	ldrh	r3, [r4, #12]
 8004788:	d106      	bne.n	8004798 <__sflush_r+0x68>
 800478a:	6829      	ldr	r1, [r5, #0]
 800478c:	291d      	cmp	r1, #29
 800478e:	d82b      	bhi.n	80047e8 <__sflush_r+0xb8>
 8004790:	4a29      	ldr	r2, [pc, #164]	; (8004838 <__sflush_r+0x108>)
 8004792:	410a      	asrs	r2, r1
 8004794:	07d6      	lsls	r6, r2, #31
 8004796:	d427      	bmi.n	80047e8 <__sflush_r+0xb8>
 8004798:	2200      	movs	r2, #0
 800479a:	6062      	str	r2, [r4, #4]
 800479c:	04d9      	lsls	r1, r3, #19
 800479e:	6922      	ldr	r2, [r4, #16]
 80047a0:	6022      	str	r2, [r4, #0]
 80047a2:	d504      	bpl.n	80047ae <__sflush_r+0x7e>
 80047a4:	1c42      	adds	r2, r0, #1
 80047a6:	d101      	bne.n	80047ac <__sflush_r+0x7c>
 80047a8:	682b      	ldr	r3, [r5, #0]
 80047aa:	b903      	cbnz	r3, 80047ae <__sflush_r+0x7e>
 80047ac:	6560      	str	r0, [r4, #84]	; 0x54
 80047ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047b0:	602f      	str	r7, [r5, #0]
 80047b2:	2900      	cmp	r1, #0
 80047b4:	d0c9      	beq.n	800474a <__sflush_r+0x1a>
 80047b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047ba:	4299      	cmp	r1, r3
 80047bc:	d002      	beq.n	80047c4 <__sflush_r+0x94>
 80047be:	4628      	mov	r0, r5
 80047c0:	f7ff fbce 	bl	8003f60 <_free_r>
 80047c4:	2000      	movs	r0, #0
 80047c6:	6360      	str	r0, [r4, #52]	; 0x34
 80047c8:	e7c0      	b.n	800474c <__sflush_r+0x1c>
 80047ca:	2301      	movs	r3, #1
 80047cc:	4628      	mov	r0, r5
 80047ce:	47b0      	blx	r6
 80047d0:	1c41      	adds	r1, r0, #1
 80047d2:	d1c8      	bne.n	8004766 <__sflush_r+0x36>
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0c5      	beq.n	8004766 <__sflush_r+0x36>
 80047da:	2b1d      	cmp	r3, #29
 80047dc:	d001      	beq.n	80047e2 <__sflush_r+0xb2>
 80047de:	2b16      	cmp	r3, #22
 80047e0:	d101      	bne.n	80047e6 <__sflush_r+0xb6>
 80047e2:	602f      	str	r7, [r5, #0]
 80047e4:	e7b1      	b.n	800474a <__sflush_r+0x1a>
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ec:	81a3      	strh	r3, [r4, #12]
 80047ee:	e7ad      	b.n	800474c <__sflush_r+0x1c>
 80047f0:	690f      	ldr	r7, [r1, #16]
 80047f2:	2f00      	cmp	r7, #0
 80047f4:	d0a9      	beq.n	800474a <__sflush_r+0x1a>
 80047f6:	0793      	lsls	r3, r2, #30
 80047f8:	680e      	ldr	r6, [r1, #0]
 80047fa:	bf08      	it	eq
 80047fc:	694b      	ldreq	r3, [r1, #20]
 80047fe:	600f      	str	r7, [r1, #0]
 8004800:	bf18      	it	ne
 8004802:	2300      	movne	r3, #0
 8004804:	eba6 0807 	sub.w	r8, r6, r7
 8004808:	608b      	str	r3, [r1, #8]
 800480a:	f1b8 0f00 	cmp.w	r8, #0
 800480e:	dd9c      	ble.n	800474a <__sflush_r+0x1a>
 8004810:	6a21      	ldr	r1, [r4, #32]
 8004812:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004814:	4643      	mov	r3, r8
 8004816:	463a      	mov	r2, r7
 8004818:	4628      	mov	r0, r5
 800481a:	47b0      	blx	r6
 800481c:	2800      	cmp	r0, #0
 800481e:	dc06      	bgt.n	800482e <__sflush_r+0xfe>
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004826:	81a3      	strh	r3, [r4, #12]
 8004828:	f04f 30ff 	mov.w	r0, #4294967295
 800482c:	e78e      	b.n	800474c <__sflush_r+0x1c>
 800482e:	4407      	add	r7, r0
 8004830:	eba8 0800 	sub.w	r8, r8, r0
 8004834:	e7e9      	b.n	800480a <__sflush_r+0xda>
 8004836:	bf00      	nop
 8004838:	dfbffffe 	.word	0xdfbffffe

0800483c <_fflush_r>:
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	690b      	ldr	r3, [r1, #16]
 8004840:	4605      	mov	r5, r0
 8004842:	460c      	mov	r4, r1
 8004844:	b913      	cbnz	r3, 800484c <_fflush_r+0x10>
 8004846:	2500      	movs	r5, #0
 8004848:	4628      	mov	r0, r5
 800484a:	bd38      	pop	{r3, r4, r5, pc}
 800484c:	b118      	cbz	r0, 8004856 <_fflush_r+0x1a>
 800484e:	6a03      	ldr	r3, [r0, #32]
 8004850:	b90b      	cbnz	r3, 8004856 <_fflush_r+0x1a>
 8004852:	f7ff fa51 	bl	8003cf8 <__sinit>
 8004856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f3      	beq.n	8004846 <_fflush_r+0xa>
 800485e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004860:	07d0      	lsls	r0, r2, #31
 8004862:	d404      	bmi.n	800486e <_fflush_r+0x32>
 8004864:	0599      	lsls	r1, r3, #22
 8004866:	d402      	bmi.n	800486e <_fflush_r+0x32>
 8004868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800486a:	f7ff fb58 	bl	8003f1e <__retarget_lock_acquire_recursive>
 800486e:	4628      	mov	r0, r5
 8004870:	4621      	mov	r1, r4
 8004872:	f7ff ff5d 	bl	8004730 <__sflush_r>
 8004876:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004878:	07da      	lsls	r2, r3, #31
 800487a:	4605      	mov	r5, r0
 800487c:	d4e4      	bmi.n	8004848 <_fflush_r+0xc>
 800487e:	89a3      	ldrh	r3, [r4, #12]
 8004880:	059b      	lsls	r3, r3, #22
 8004882:	d4e1      	bmi.n	8004848 <_fflush_r+0xc>
 8004884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004886:	f7ff fb4b 	bl	8003f20 <__retarget_lock_release_recursive>
 800488a:	e7dd      	b.n	8004848 <_fflush_r+0xc>

0800488c <fiprintf>:
 800488c:	b40e      	push	{r1, r2, r3}
 800488e:	b503      	push	{r0, r1, lr}
 8004890:	4601      	mov	r1, r0
 8004892:	ab03      	add	r3, sp, #12
 8004894:	4805      	ldr	r0, [pc, #20]	; (80048ac <fiprintf+0x20>)
 8004896:	f853 2b04 	ldr.w	r2, [r3], #4
 800489a:	6800      	ldr	r0, [r0, #0]
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	f000 f89f 	bl	80049e0 <_vfiprintf_r>
 80048a2:	b002      	add	sp, #8
 80048a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80048a8:	b003      	add	sp, #12
 80048aa:	4770      	bx	lr
 80048ac:	20000064 	.word	0x20000064

080048b0 <memmove>:
 80048b0:	4288      	cmp	r0, r1
 80048b2:	b510      	push	{r4, lr}
 80048b4:	eb01 0402 	add.w	r4, r1, r2
 80048b8:	d902      	bls.n	80048c0 <memmove+0x10>
 80048ba:	4284      	cmp	r4, r0
 80048bc:	4623      	mov	r3, r4
 80048be:	d807      	bhi.n	80048d0 <memmove+0x20>
 80048c0:	1e43      	subs	r3, r0, #1
 80048c2:	42a1      	cmp	r1, r4
 80048c4:	d008      	beq.n	80048d8 <memmove+0x28>
 80048c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048ce:	e7f8      	b.n	80048c2 <memmove+0x12>
 80048d0:	4402      	add	r2, r0
 80048d2:	4601      	mov	r1, r0
 80048d4:	428a      	cmp	r2, r1
 80048d6:	d100      	bne.n	80048da <memmove+0x2a>
 80048d8:	bd10      	pop	{r4, pc}
 80048da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048e2:	e7f7      	b.n	80048d4 <memmove+0x24>

080048e4 <_sbrk_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	4d06      	ldr	r5, [pc, #24]	; (8004900 <_sbrk_r+0x1c>)
 80048e8:	2300      	movs	r3, #0
 80048ea:	4604      	mov	r4, r0
 80048ec:	4608      	mov	r0, r1
 80048ee:	602b      	str	r3, [r5, #0]
 80048f0:	f7fc fec2 	bl	8001678 <_sbrk>
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	d102      	bne.n	80048fe <_sbrk_r+0x1a>
 80048f8:	682b      	ldr	r3, [r5, #0]
 80048fa:	b103      	cbz	r3, 80048fe <_sbrk_r+0x1a>
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
 8004900:	200002dc 	.word	0x200002dc

08004904 <memcpy>:
 8004904:	440a      	add	r2, r1
 8004906:	4291      	cmp	r1, r2
 8004908:	f100 33ff 	add.w	r3, r0, #4294967295
 800490c:	d100      	bne.n	8004910 <memcpy+0xc>
 800490e:	4770      	bx	lr
 8004910:	b510      	push	{r4, lr}
 8004912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800491a:	4291      	cmp	r1, r2
 800491c:	d1f9      	bne.n	8004912 <memcpy+0xe>
 800491e:	bd10      	pop	{r4, pc}

08004920 <abort>:
 8004920:	b508      	push	{r3, lr}
 8004922:	2006      	movs	r0, #6
 8004924:	f000 fa34 	bl	8004d90 <raise>
 8004928:	2001      	movs	r0, #1
 800492a:	f7fc fe2d 	bl	8001588 <_exit>

0800492e <_realloc_r>:
 800492e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004932:	4680      	mov	r8, r0
 8004934:	4614      	mov	r4, r2
 8004936:	460e      	mov	r6, r1
 8004938:	b921      	cbnz	r1, 8004944 <_realloc_r+0x16>
 800493a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800493e:	4611      	mov	r1, r2
 8004940:	f7ff bb82 	b.w	8004048 <_malloc_r>
 8004944:	b92a      	cbnz	r2, 8004952 <_realloc_r+0x24>
 8004946:	f7ff fb0b 	bl	8003f60 <_free_r>
 800494a:	4625      	mov	r5, r4
 800494c:	4628      	mov	r0, r5
 800494e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004952:	f000 fa39 	bl	8004dc8 <_malloc_usable_size_r>
 8004956:	4284      	cmp	r4, r0
 8004958:	4607      	mov	r7, r0
 800495a:	d802      	bhi.n	8004962 <_realloc_r+0x34>
 800495c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004960:	d812      	bhi.n	8004988 <_realloc_r+0x5a>
 8004962:	4621      	mov	r1, r4
 8004964:	4640      	mov	r0, r8
 8004966:	f7ff fb6f 	bl	8004048 <_malloc_r>
 800496a:	4605      	mov	r5, r0
 800496c:	2800      	cmp	r0, #0
 800496e:	d0ed      	beq.n	800494c <_realloc_r+0x1e>
 8004970:	42bc      	cmp	r4, r7
 8004972:	4622      	mov	r2, r4
 8004974:	4631      	mov	r1, r6
 8004976:	bf28      	it	cs
 8004978:	463a      	movcs	r2, r7
 800497a:	f7ff ffc3 	bl	8004904 <memcpy>
 800497e:	4631      	mov	r1, r6
 8004980:	4640      	mov	r0, r8
 8004982:	f7ff faed 	bl	8003f60 <_free_r>
 8004986:	e7e1      	b.n	800494c <_realloc_r+0x1e>
 8004988:	4635      	mov	r5, r6
 800498a:	e7df      	b.n	800494c <_realloc_r+0x1e>

0800498c <__sfputc_r>:
 800498c:	6893      	ldr	r3, [r2, #8]
 800498e:	3b01      	subs	r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	b410      	push	{r4}
 8004994:	6093      	str	r3, [r2, #8]
 8004996:	da08      	bge.n	80049aa <__sfputc_r+0x1e>
 8004998:	6994      	ldr	r4, [r2, #24]
 800499a:	42a3      	cmp	r3, r4
 800499c:	db01      	blt.n	80049a2 <__sfputc_r+0x16>
 800499e:	290a      	cmp	r1, #10
 80049a0:	d103      	bne.n	80049aa <__sfputc_r+0x1e>
 80049a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049a6:	f000 b935 	b.w	8004c14 <__swbuf_r>
 80049aa:	6813      	ldr	r3, [r2, #0]
 80049ac:	1c58      	adds	r0, r3, #1
 80049ae:	6010      	str	r0, [r2, #0]
 80049b0:	7019      	strb	r1, [r3, #0]
 80049b2:	4608      	mov	r0, r1
 80049b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <__sfputs_r>:
 80049ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049bc:	4606      	mov	r6, r0
 80049be:	460f      	mov	r7, r1
 80049c0:	4614      	mov	r4, r2
 80049c2:	18d5      	adds	r5, r2, r3
 80049c4:	42ac      	cmp	r4, r5
 80049c6:	d101      	bne.n	80049cc <__sfputs_r+0x12>
 80049c8:	2000      	movs	r0, #0
 80049ca:	e007      	b.n	80049dc <__sfputs_r+0x22>
 80049cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049d0:	463a      	mov	r2, r7
 80049d2:	4630      	mov	r0, r6
 80049d4:	f7ff ffda 	bl	800498c <__sfputc_r>
 80049d8:	1c43      	adds	r3, r0, #1
 80049da:	d1f3      	bne.n	80049c4 <__sfputs_r+0xa>
 80049dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049e0 <_vfiprintf_r>:
 80049e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e4:	460d      	mov	r5, r1
 80049e6:	b09d      	sub	sp, #116	; 0x74
 80049e8:	4614      	mov	r4, r2
 80049ea:	4698      	mov	r8, r3
 80049ec:	4606      	mov	r6, r0
 80049ee:	b118      	cbz	r0, 80049f8 <_vfiprintf_r+0x18>
 80049f0:	6a03      	ldr	r3, [r0, #32]
 80049f2:	b90b      	cbnz	r3, 80049f8 <_vfiprintf_r+0x18>
 80049f4:	f7ff f980 	bl	8003cf8 <__sinit>
 80049f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049fa:	07d9      	lsls	r1, r3, #31
 80049fc:	d405      	bmi.n	8004a0a <_vfiprintf_r+0x2a>
 80049fe:	89ab      	ldrh	r3, [r5, #12]
 8004a00:	059a      	lsls	r2, r3, #22
 8004a02:	d402      	bmi.n	8004a0a <_vfiprintf_r+0x2a>
 8004a04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a06:	f7ff fa8a 	bl	8003f1e <__retarget_lock_acquire_recursive>
 8004a0a:	89ab      	ldrh	r3, [r5, #12]
 8004a0c:	071b      	lsls	r3, r3, #28
 8004a0e:	d501      	bpl.n	8004a14 <_vfiprintf_r+0x34>
 8004a10:	692b      	ldr	r3, [r5, #16]
 8004a12:	b99b      	cbnz	r3, 8004a3c <_vfiprintf_r+0x5c>
 8004a14:	4629      	mov	r1, r5
 8004a16:	4630      	mov	r0, r6
 8004a18:	f000 f93a 	bl	8004c90 <__swsetup_r>
 8004a1c:	b170      	cbz	r0, 8004a3c <_vfiprintf_r+0x5c>
 8004a1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a20:	07dc      	lsls	r4, r3, #31
 8004a22:	d504      	bpl.n	8004a2e <_vfiprintf_r+0x4e>
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295
 8004a28:	b01d      	add	sp, #116	; 0x74
 8004a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a2e:	89ab      	ldrh	r3, [r5, #12]
 8004a30:	0598      	lsls	r0, r3, #22
 8004a32:	d4f7      	bmi.n	8004a24 <_vfiprintf_r+0x44>
 8004a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a36:	f7ff fa73 	bl	8003f20 <__retarget_lock_release_recursive>
 8004a3a:	e7f3      	b.n	8004a24 <_vfiprintf_r+0x44>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a40:	2320      	movs	r3, #32
 8004a42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a46:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a4a:	2330      	movs	r3, #48	; 0x30
 8004a4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004c00 <_vfiprintf_r+0x220>
 8004a50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a54:	f04f 0901 	mov.w	r9, #1
 8004a58:	4623      	mov	r3, r4
 8004a5a:	469a      	mov	sl, r3
 8004a5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a60:	b10a      	cbz	r2, 8004a66 <_vfiprintf_r+0x86>
 8004a62:	2a25      	cmp	r2, #37	; 0x25
 8004a64:	d1f9      	bne.n	8004a5a <_vfiprintf_r+0x7a>
 8004a66:	ebba 0b04 	subs.w	fp, sl, r4
 8004a6a:	d00b      	beq.n	8004a84 <_vfiprintf_r+0xa4>
 8004a6c:	465b      	mov	r3, fp
 8004a6e:	4622      	mov	r2, r4
 8004a70:	4629      	mov	r1, r5
 8004a72:	4630      	mov	r0, r6
 8004a74:	f7ff ffa1 	bl	80049ba <__sfputs_r>
 8004a78:	3001      	adds	r0, #1
 8004a7a:	f000 80a9 	beq.w	8004bd0 <_vfiprintf_r+0x1f0>
 8004a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a80:	445a      	add	r2, fp
 8004a82:	9209      	str	r2, [sp, #36]	; 0x24
 8004a84:	f89a 3000 	ldrb.w	r3, [sl]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 80a1 	beq.w	8004bd0 <_vfiprintf_r+0x1f0>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f04f 32ff 	mov.w	r2, #4294967295
 8004a94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a98:	f10a 0a01 	add.w	sl, sl, #1
 8004a9c:	9304      	str	r3, [sp, #16]
 8004a9e:	9307      	str	r3, [sp, #28]
 8004aa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004aa4:	931a      	str	r3, [sp, #104]	; 0x68
 8004aa6:	4654      	mov	r4, sl
 8004aa8:	2205      	movs	r2, #5
 8004aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aae:	4854      	ldr	r0, [pc, #336]	; (8004c00 <_vfiprintf_r+0x220>)
 8004ab0:	f7fb fb9e 	bl	80001f0 <memchr>
 8004ab4:	9a04      	ldr	r2, [sp, #16]
 8004ab6:	b9d8      	cbnz	r0, 8004af0 <_vfiprintf_r+0x110>
 8004ab8:	06d1      	lsls	r1, r2, #27
 8004aba:	bf44      	itt	mi
 8004abc:	2320      	movmi	r3, #32
 8004abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ac2:	0713      	lsls	r3, r2, #28
 8004ac4:	bf44      	itt	mi
 8004ac6:	232b      	movmi	r3, #43	; 0x2b
 8004ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004acc:	f89a 3000 	ldrb.w	r3, [sl]
 8004ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ad2:	d015      	beq.n	8004b00 <_vfiprintf_r+0x120>
 8004ad4:	9a07      	ldr	r2, [sp, #28]
 8004ad6:	4654      	mov	r4, sl
 8004ad8:	2000      	movs	r0, #0
 8004ada:	f04f 0c0a 	mov.w	ip, #10
 8004ade:	4621      	mov	r1, r4
 8004ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ae4:	3b30      	subs	r3, #48	; 0x30
 8004ae6:	2b09      	cmp	r3, #9
 8004ae8:	d94d      	bls.n	8004b86 <_vfiprintf_r+0x1a6>
 8004aea:	b1b0      	cbz	r0, 8004b1a <_vfiprintf_r+0x13a>
 8004aec:	9207      	str	r2, [sp, #28]
 8004aee:	e014      	b.n	8004b1a <_vfiprintf_r+0x13a>
 8004af0:	eba0 0308 	sub.w	r3, r0, r8
 8004af4:	fa09 f303 	lsl.w	r3, r9, r3
 8004af8:	4313      	orrs	r3, r2
 8004afa:	9304      	str	r3, [sp, #16]
 8004afc:	46a2      	mov	sl, r4
 8004afe:	e7d2      	b.n	8004aa6 <_vfiprintf_r+0xc6>
 8004b00:	9b03      	ldr	r3, [sp, #12]
 8004b02:	1d19      	adds	r1, r3, #4
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	9103      	str	r1, [sp, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	bfbb      	ittet	lt
 8004b0c:	425b      	neglt	r3, r3
 8004b0e:	f042 0202 	orrlt.w	r2, r2, #2
 8004b12:	9307      	strge	r3, [sp, #28]
 8004b14:	9307      	strlt	r3, [sp, #28]
 8004b16:	bfb8      	it	lt
 8004b18:	9204      	strlt	r2, [sp, #16]
 8004b1a:	7823      	ldrb	r3, [r4, #0]
 8004b1c:	2b2e      	cmp	r3, #46	; 0x2e
 8004b1e:	d10c      	bne.n	8004b3a <_vfiprintf_r+0x15a>
 8004b20:	7863      	ldrb	r3, [r4, #1]
 8004b22:	2b2a      	cmp	r3, #42	; 0x2a
 8004b24:	d134      	bne.n	8004b90 <_vfiprintf_r+0x1b0>
 8004b26:	9b03      	ldr	r3, [sp, #12]
 8004b28:	1d1a      	adds	r2, r3, #4
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	9203      	str	r2, [sp, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	bfb8      	it	lt
 8004b32:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b36:	3402      	adds	r4, #2
 8004b38:	9305      	str	r3, [sp, #20]
 8004b3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004c10 <_vfiprintf_r+0x230>
 8004b3e:	7821      	ldrb	r1, [r4, #0]
 8004b40:	2203      	movs	r2, #3
 8004b42:	4650      	mov	r0, sl
 8004b44:	f7fb fb54 	bl	80001f0 <memchr>
 8004b48:	b138      	cbz	r0, 8004b5a <_vfiprintf_r+0x17a>
 8004b4a:	9b04      	ldr	r3, [sp, #16]
 8004b4c:	eba0 000a 	sub.w	r0, r0, sl
 8004b50:	2240      	movs	r2, #64	; 0x40
 8004b52:	4082      	lsls	r2, r0
 8004b54:	4313      	orrs	r3, r2
 8004b56:	3401      	adds	r4, #1
 8004b58:	9304      	str	r3, [sp, #16]
 8004b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b5e:	4829      	ldr	r0, [pc, #164]	; (8004c04 <_vfiprintf_r+0x224>)
 8004b60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b64:	2206      	movs	r2, #6
 8004b66:	f7fb fb43 	bl	80001f0 <memchr>
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	d03f      	beq.n	8004bee <_vfiprintf_r+0x20e>
 8004b6e:	4b26      	ldr	r3, [pc, #152]	; (8004c08 <_vfiprintf_r+0x228>)
 8004b70:	bb1b      	cbnz	r3, 8004bba <_vfiprintf_r+0x1da>
 8004b72:	9b03      	ldr	r3, [sp, #12]
 8004b74:	3307      	adds	r3, #7
 8004b76:	f023 0307 	bic.w	r3, r3, #7
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	9303      	str	r3, [sp, #12]
 8004b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b80:	443b      	add	r3, r7
 8004b82:	9309      	str	r3, [sp, #36]	; 0x24
 8004b84:	e768      	b.n	8004a58 <_vfiprintf_r+0x78>
 8004b86:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b8a:	460c      	mov	r4, r1
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	e7a6      	b.n	8004ade <_vfiprintf_r+0xfe>
 8004b90:	2300      	movs	r3, #0
 8004b92:	3401      	adds	r4, #1
 8004b94:	9305      	str	r3, [sp, #20]
 8004b96:	4619      	mov	r1, r3
 8004b98:	f04f 0c0a 	mov.w	ip, #10
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ba2:	3a30      	subs	r2, #48	; 0x30
 8004ba4:	2a09      	cmp	r2, #9
 8004ba6:	d903      	bls.n	8004bb0 <_vfiprintf_r+0x1d0>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0c6      	beq.n	8004b3a <_vfiprintf_r+0x15a>
 8004bac:	9105      	str	r1, [sp, #20]
 8004bae:	e7c4      	b.n	8004b3a <_vfiprintf_r+0x15a>
 8004bb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e7f0      	b.n	8004b9c <_vfiprintf_r+0x1bc>
 8004bba:	ab03      	add	r3, sp, #12
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	462a      	mov	r2, r5
 8004bc0:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <_vfiprintf_r+0x22c>)
 8004bc2:	a904      	add	r1, sp, #16
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	f3af 8000 	nop.w
 8004bca:	4607      	mov	r7, r0
 8004bcc:	1c78      	adds	r0, r7, #1
 8004bce:	d1d6      	bne.n	8004b7e <_vfiprintf_r+0x19e>
 8004bd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bd2:	07d9      	lsls	r1, r3, #31
 8004bd4:	d405      	bmi.n	8004be2 <_vfiprintf_r+0x202>
 8004bd6:	89ab      	ldrh	r3, [r5, #12]
 8004bd8:	059a      	lsls	r2, r3, #22
 8004bda:	d402      	bmi.n	8004be2 <_vfiprintf_r+0x202>
 8004bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bde:	f7ff f99f 	bl	8003f20 <__retarget_lock_release_recursive>
 8004be2:	89ab      	ldrh	r3, [r5, #12]
 8004be4:	065b      	lsls	r3, r3, #25
 8004be6:	f53f af1d 	bmi.w	8004a24 <_vfiprintf_r+0x44>
 8004bea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bec:	e71c      	b.n	8004a28 <_vfiprintf_r+0x48>
 8004bee:	ab03      	add	r3, sp, #12
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	462a      	mov	r2, r5
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <_vfiprintf_r+0x22c>)
 8004bf6:	a904      	add	r1, sp, #16
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	f7ff fc77 	bl	80044ec <_printf_i>
 8004bfe:	e7e4      	b.n	8004bca <_vfiprintf_r+0x1ea>
 8004c00:	0800506b 	.word	0x0800506b
 8004c04:	08005075 	.word	0x08005075
 8004c08:	00000000 	.word	0x00000000
 8004c0c:	080049bb 	.word	0x080049bb
 8004c10:	08005071 	.word	0x08005071

08004c14 <__swbuf_r>:
 8004c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c16:	460e      	mov	r6, r1
 8004c18:	4614      	mov	r4, r2
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	b118      	cbz	r0, 8004c26 <__swbuf_r+0x12>
 8004c1e:	6a03      	ldr	r3, [r0, #32]
 8004c20:	b90b      	cbnz	r3, 8004c26 <__swbuf_r+0x12>
 8004c22:	f7ff f869 	bl	8003cf8 <__sinit>
 8004c26:	69a3      	ldr	r3, [r4, #24]
 8004c28:	60a3      	str	r3, [r4, #8]
 8004c2a:	89a3      	ldrh	r3, [r4, #12]
 8004c2c:	071a      	lsls	r2, r3, #28
 8004c2e:	d525      	bpl.n	8004c7c <__swbuf_r+0x68>
 8004c30:	6923      	ldr	r3, [r4, #16]
 8004c32:	b31b      	cbz	r3, 8004c7c <__swbuf_r+0x68>
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	6922      	ldr	r2, [r4, #16]
 8004c38:	1a98      	subs	r0, r3, r2
 8004c3a:	6963      	ldr	r3, [r4, #20]
 8004c3c:	b2f6      	uxtb	r6, r6
 8004c3e:	4283      	cmp	r3, r0
 8004c40:	4637      	mov	r7, r6
 8004c42:	dc04      	bgt.n	8004c4e <__swbuf_r+0x3a>
 8004c44:	4621      	mov	r1, r4
 8004c46:	4628      	mov	r0, r5
 8004c48:	f7ff fdf8 	bl	800483c <_fflush_r>
 8004c4c:	b9e0      	cbnz	r0, 8004c88 <__swbuf_r+0x74>
 8004c4e:	68a3      	ldr	r3, [r4, #8]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	60a3      	str	r3, [r4, #8]
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	6022      	str	r2, [r4, #0]
 8004c5a:	701e      	strb	r6, [r3, #0]
 8004c5c:	6962      	ldr	r2, [r4, #20]
 8004c5e:	1c43      	adds	r3, r0, #1
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d004      	beq.n	8004c6e <__swbuf_r+0x5a>
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	07db      	lsls	r3, r3, #31
 8004c68:	d506      	bpl.n	8004c78 <__swbuf_r+0x64>
 8004c6a:	2e0a      	cmp	r6, #10
 8004c6c:	d104      	bne.n	8004c78 <__swbuf_r+0x64>
 8004c6e:	4621      	mov	r1, r4
 8004c70:	4628      	mov	r0, r5
 8004c72:	f7ff fde3 	bl	800483c <_fflush_r>
 8004c76:	b938      	cbnz	r0, 8004c88 <__swbuf_r+0x74>
 8004c78:	4638      	mov	r0, r7
 8004c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	4628      	mov	r0, r5
 8004c80:	f000 f806 	bl	8004c90 <__swsetup_r>
 8004c84:	2800      	cmp	r0, #0
 8004c86:	d0d5      	beq.n	8004c34 <__swbuf_r+0x20>
 8004c88:	f04f 37ff 	mov.w	r7, #4294967295
 8004c8c:	e7f4      	b.n	8004c78 <__swbuf_r+0x64>
	...

08004c90 <__swsetup_r>:
 8004c90:	b538      	push	{r3, r4, r5, lr}
 8004c92:	4b2a      	ldr	r3, [pc, #168]	; (8004d3c <__swsetup_r+0xac>)
 8004c94:	4605      	mov	r5, r0
 8004c96:	6818      	ldr	r0, [r3, #0]
 8004c98:	460c      	mov	r4, r1
 8004c9a:	b118      	cbz	r0, 8004ca4 <__swsetup_r+0x14>
 8004c9c:	6a03      	ldr	r3, [r0, #32]
 8004c9e:	b90b      	cbnz	r3, 8004ca4 <__swsetup_r+0x14>
 8004ca0:	f7ff f82a 	bl	8003cf8 <__sinit>
 8004ca4:	89a3      	ldrh	r3, [r4, #12]
 8004ca6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004caa:	0718      	lsls	r0, r3, #28
 8004cac:	d422      	bmi.n	8004cf4 <__swsetup_r+0x64>
 8004cae:	06d9      	lsls	r1, r3, #27
 8004cb0:	d407      	bmi.n	8004cc2 <__swsetup_r+0x32>
 8004cb2:	2309      	movs	r3, #9
 8004cb4:	602b      	str	r3, [r5, #0]
 8004cb6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cba:	81a3      	strh	r3, [r4, #12]
 8004cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc0:	e034      	b.n	8004d2c <__swsetup_r+0x9c>
 8004cc2:	0758      	lsls	r0, r3, #29
 8004cc4:	d512      	bpl.n	8004cec <__swsetup_r+0x5c>
 8004cc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cc8:	b141      	cbz	r1, 8004cdc <__swsetup_r+0x4c>
 8004cca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cce:	4299      	cmp	r1, r3
 8004cd0:	d002      	beq.n	8004cd8 <__swsetup_r+0x48>
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f7ff f944 	bl	8003f60 <_free_r>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	6363      	str	r3, [r4, #52]	; 0x34
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ce2:	81a3      	strh	r3, [r4, #12]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	6063      	str	r3, [r4, #4]
 8004ce8:	6923      	ldr	r3, [r4, #16]
 8004cea:	6023      	str	r3, [r4, #0]
 8004cec:	89a3      	ldrh	r3, [r4, #12]
 8004cee:	f043 0308 	orr.w	r3, r3, #8
 8004cf2:	81a3      	strh	r3, [r4, #12]
 8004cf4:	6923      	ldr	r3, [r4, #16]
 8004cf6:	b94b      	cbnz	r3, 8004d0c <__swsetup_r+0x7c>
 8004cf8:	89a3      	ldrh	r3, [r4, #12]
 8004cfa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d02:	d003      	beq.n	8004d0c <__swsetup_r+0x7c>
 8004d04:	4621      	mov	r1, r4
 8004d06:	4628      	mov	r0, r5
 8004d08:	f000 f88c 	bl	8004e24 <__smakebuf_r>
 8004d0c:	89a0      	ldrh	r0, [r4, #12]
 8004d0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d12:	f010 0301 	ands.w	r3, r0, #1
 8004d16:	d00a      	beq.n	8004d2e <__swsetup_r+0x9e>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60a3      	str	r3, [r4, #8]
 8004d1c:	6963      	ldr	r3, [r4, #20]
 8004d1e:	425b      	negs	r3, r3
 8004d20:	61a3      	str	r3, [r4, #24]
 8004d22:	6923      	ldr	r3, [r4, #16]
 8004d24:	b943      	cbnz	r3, 8004d38 <__swsetup_r+0xa8>
 8004d26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d2a:	d1c4      	bne.n	8004cb6 <__swsetup_r+0x26>
 8004d2c:	bd38      	pop	{r3, r4, r5, pc}
 8004d2e:	0781      	lsls	r1, r0, #30
 8004d30:	bf58      	it	pl
 8004d32:	6963      	ldrpl	r3, [r4, #20]
 8004d34:	60a3      	str	r3, [r4, #8]
 8004d36:	e7f4      	b.n	8004d22 <__swsetup_r+0x92>
 8004d38:	2000      	movs	r0, #0
 8004d3a:	e7f7      	b.n	8004d2c <__swsetup_r+0x9c>
 8004d3c:	20000064 	.word	0x20000064

08004d40 <_raise_r>:
 8004d40:	291f      	cmp	r1, #31
 8004d42:	b538      	push	{r3, r4, r5, lr}
 8004d44:	4604      	mov	r4, r0
 8004d46:	460d      	mov	r5, r1
 8004d48:	d904      	bls.n	8004d54 <_raise_r+0x14>
 8004d4a:	2316      	movs	r3, #22
 8004d4c:	6003      	str	r3, [r0, #0]
 8004d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d52:	bd38      	pop	{r3, r4, r5, pc}
 8004d54:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004d56:	b112      	cbz	r2, 8004d5e <_raise_r+0x1e>
 8004d58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004d5c:	b94b      	cbnz	r3, 8004d72 <_raise_r+0x32>
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f000 f830 	bl	8004dc4 <_getpid_r>
 8004d64:	462a      	mov	r2, r5
 8004d66:	4601      	mov	r1, r0
 8004d68:	4620      	mov	r0, r4
 8004d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d6e:	f000 b817 	b.w	8004da0 <_kill_r>
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d00a      	beq.n	8004d8c <_raise_r+0x4c>
 8004d76:	1c59      	adds	r1, r3, #1
 8004d78:	d103      	bne.n	8004d82 <_raise_r+0x42>
 8004d7a:	2316      	movs	r3, #22
 8004d7c:	6003      	str	r3, [r0, #0]
 8004d7e:	2001      	movs	r0, #1
 8004d80:	e7e7      	b.n	8004d52 <_raise_r+0x12>
 8004d82:	2400      	movs	r4, #0
 8004d84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004d88:	4628      	mov	r0, r5
 8004d8a:	4798      	blx	r3
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	e7e0      	b.n	8004d52 <_raise_r+0x12>

08004d90 <raise>:
 8004d90:	4b02      	ldr	r3, [pc, #8]	; (8004d9c <raise+0xc>)
 8004d92:	4601      	mov	r1, r0
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	f7ff bfd3 	b.w	8004d40 <_raise_r>
 8004d9a:	bf00      	nop
 8004d9c:	20000064 	.word	0x20000064

08004da0 <_kill_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	4d07      	ldr	r5, [pc, #28]	; (8004dc0 <_kill_r+0x20>)
 8004da4:	2300      	movs	r3, #0
 8004da6:	4604      	mov	r4, r0
 8004da8:	4608      	mov	r0, r1
 8004daa:	4611      	mov	r1, r2
 8004dac:	602b      	str	r3, [r5, #0]
 8004dae:	f7fc fbdb 	bl	8001568 <_kill>
 8004db2:	1c43      	adds	r3, r0, #1
 8004db4:	d102      	bne.n	8004dbc <_kill_r+0x1c>
 8004db6:	682b      	ldr	r3, [r5, #0]
 8004db8:	b103      	cbz	r3, 8004dbc <_kill_r+0x1c>
 8004dba:	6023      	str	r3, [r4, #0]
 8004dbc:	bd38      	pop	{r3, r4, r5, pc}
 8004dbe:	bf00      	nop
 8004dc0:	200002dc 	.word	0x200002dc

08004dc4 <_getpid_r>:
 8004dc4:	f7fc bbc8 	b.w	8001558 <_getpid>

08004dc8 <_malloc_usable_size_r>:
 8004dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dcc:	1f18      	subs	r0, r3, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bfbc      	itt	lt
 8004dd2:	580b      	ldrlt	r3, [r1, r0]
 8004dd4:	18c0      	addlt	r0, r0, r3
 8004dd6:	4770      	bx	lr

08004dd8 <__swhatbuf_r>:
 8004dd8:	b570      	push	{r4, r5, r6, lr}
 8004dda:	460c      	mov	r4, r1
 8004ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de0:	2900      	cmp	r1, #0
 8004de2:	b096      	sub	sp, #88	; 0x58
 8004de4:	4615      	mov	r5, r2
 8004de6:	461e      	mov	r6, r3
 8004de8:	da0d      	bge.n	8004e06 <__swhatbuf_r+0x2e>
 8004dea:	89a3      	ldrh	r3, [r4, #12]
 8004dec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004df0:	f04f 0100 	mov.w	r1, #0
 8004df4:	bf0c      	ite	eq
 8004df6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004dfa:	2340      	movne	r3, #64	; 0x40
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	6031      	str	r1, [r6, #0]
 8004e00:	602b      	str	r3, [r5, #0]
 8004e02:	b016      	add	sp, #88	; 0x58
 8004e04:	bd70      	pop	{r4, r5, r6, pc}
 8004e06:	466a      	mov	r2, sp
 8004e08:	f000 f848 	bl	8004e9c <_fstat_r>
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	dbec      	blt.n	8004dea <__swhatbuf_r+0x12>
 8004e10:	9901      	ldr	r1, [sp, #4]
 8004e12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004e16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004e1a:	4259      	negs	r1, r3
 8004e1c:	4159      	adcs	r1, r3
 8004e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e22:	e7eb      	b.n	8004dfc <__swhatbuf_r+0x24>

08004e24 <__smakebuf_r>:
 8004e24:	898b      	ldrh	r3, [r1, #12]
 8004e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e28:	079d      	lsls	r5, r3, #30
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	d507      	bpl.n	8004e40 <__smakebuf_r+0x1c>
 8004e30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	6123      	str	r3, [r4, #16]
 8004e38:	2301      	movs	r3, #1
 8004e3a:	6163      	str	r3, [r4, #20]
 8004e3c:	b002      	add	sp, #8
 8004e3e:	bd70      	pop	{r4, r5, r6, pc}
 8004e40:	ab01      	add	r3, sp, #4
 8004e42:	466a      	mov	r2, sp
 8004e44:	f7ff ffc8 	bl	8004dd8 <__swhatbuf_r>
 8004e48:	9900      	ldr	r1, [sp, #0]
 8004e4a:	4605      	mov	r5, r0
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	f7ff f8fb 	bl	8004048 <_malloc_r>
 8004e52:	b948      	cbnz	r0, 8004e68 <__smakebuf_r+0x44>
 8004e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e58:	059a      	lsls	r2, r3, #22
 8004e5a:	d4ef      	bmi.n	8004e3c <__smakebuf_r+0x18>
 8004e5c:	f023 0303 	bic.w	r3, r3, #3
 8004e60:	f043 0302 	orr.w	r3, r3, #2
 8004e64:	81a3      	strh	r3, [r4, #12]
 8004e66:	e7e3      	b.n	8004e30 <__smakebuf_r+0xc>
 8004e68:	89a3      	ldrh	r3, [r4, #12]
 8004e6a:	6020      	str	r0, [r4, #0]
 8004e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e70:	81a3      	strh	r3, [r4, #12]
 8004e72:	9b00      	ldr	r3, [sp, #0]
 8004e74:	6163      	str	r3, [r4, #20]
 8004e76:	9b01      	ldr	r3, [sp, #4]
 8004e78:	6120      	str	r0, [r4, #16]
 8004e7a:	b15b      	cbz	r3, 8004e94 <__smakebuf_r+0x70>
 8004e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e80:	4630      	mov	r0, r6
 8004e82:	f000 f81d 	bl	8004ec0 <_isatty_r>
 8004e86:	b128      	cbz	r0, 8004e94 <__smakebuf_r+0x70>
 8004e88:	89a3      	ldrh	r3, [r4, #12]
 8004e8a:	f023 0303 	bic.w	r3, r3, #3
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	81a3      	strh	r3, [r4, #12]
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	431d      	orrs	r5, r3
 8004e98:	81a5      	strh	r5, [r4, #12]
 8004e9a:	e7cf      	b.n	8004e3c <__smakebuf_r+0x18>

08004e9c <_fstat_r>:
 8004e9c:	b538      	push	{r3, r4, r5, lr}
 8004e9e:	4d07      	ldr	r5, [pc, #28]	; (8004ebc <_fstat_r+0x20>)
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	4608      	mov	r0, r1
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	602b      	str	r3, [r5, #0]
 8004eaa:	f7fc fbbc 	bl	8001626 <_fstat>
 8004eae:	1c43      	adds	r3, r0, #1
 8004eb0:	d102      	bne.n	8004eb8 <_fstat_r+0x1c>
 8004eb2:	682b      	ldr	r3, [r5, #0]
 8004eb4:	b103      	cbz	r3, 8004eb8 <_fstat_r+0x1c>
 8004eb6:	6023      	str	r3, [r4, #0]
 8004eb8:	bd38      	pop	{r3, r4, r5, pc}
 8004eba:	bf00      	nop
 8004ebc:	200002dc 	.word	0x200002dc

08004ec0 <_isatty_r>:
 8004ec0:	b538      	push	{r3, r4, r5, lr}
 8004ec2:	4d06      	ldr	r5, [pc, #24]	; (8004edc <_isatty_r+0x1c>)
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	4608      	mov	r0, r1
 8004eca:	602b      	str	r3, [r5, #0]
 8004ecc:	f7fc fbbb 	bl	8001646 <_isatty>
 8004ed0:	1c43      	adds	r3, r0, #1
 8004ed2:	d102      	bne.n	8004eda <_isatty_r+0x1a>
 8004ed4:	682b      	ldr	r3, [r5, #0]
 8004ed6:	b103      	cbz	r3, 8004eda <_isatty_r+0x1a>
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	bd38      	pop	{r3, r4, r5, pc}
 8004edc:	200002dc 	.word	0x200002dc

08004ee0 <_init>:
 8004ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee2:	bf00      	nop
 8004ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee6:	bc08      	pop	{r3}
 8004ee8:	469e      	mov	lr, r3
 8004eea:	4770      	bx	lr

08004eec <_fini>:
 8004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eee:	bf00      	nop
 8004ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef2:	bc08      	pop	{r3}
 8004ef4:	469e      	mov	lr, r3
 8004ef6:	4770      	bx	lr
