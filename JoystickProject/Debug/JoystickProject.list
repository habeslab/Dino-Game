
JoystickProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004614  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080047b4  080047b4  000147b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800493c  0800493c  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800493c  0800493c  0001493c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004944  08004944  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004944  08004944  00014944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004948  08004948  00014948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800494c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200000ec  08004a38  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08004a38  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000768a  00000000  00000000  0002015f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a70  00000000  00000000  000277e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000740  00000000  00000000  00029260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000553  00000000  00000000  000299a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ae6  00000000  00000000  00029ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009268  00000000  00000000  000419d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093109  00000000  00000000  0004ac41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026bc  00000000  00000000  000ddd4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e0408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ec 	.word	0x200000ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800479c 	.word	0x0800479c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	0800479c 	.word	0x0800479c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800058c:	b5b0      	push	{r4, r5, r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
 8000598:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800059a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800059e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80005a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80005a6:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80005a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005aa:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80005ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80005ae:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f80e 	bl	80005e2 <Lcd_init>

	return lcd;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	461d      	mov	r5, r3
 80005ca:	f107 0410 	add.w	r4, r7, #16
 80005ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005d6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80005da:	68f8      	ldr	r0, [r7, #12]
 80005dc:	3728      	adds	r7, #40	; 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bdb0      	pop	{r4, r5, r7, pc}

080005e2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	7d9b      	ldrb	r3, [r3, #22]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d10c      	bne.n	800060c <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80005f2:	2133      	movs	r1, #51	; 0x33
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 f88f 	bl	8000718 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80005fa:	2132      	movs	r1, #50	; 0x32
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f88b 	bl	8000718 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000602:	2128      	movs	r1, #40	; 0x28
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 f887 	bl	8000718 <lcd_write_command>
 800060a:	e003      	b.n	8000614 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 800060c:	2138      	movs	r1, #56	; 0x38
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 f882 	bl	8000718 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000614:	2101      	movs	r1, #1
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 f87e 	bl	8000718 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800061c:	210c      	movs	r1, #12
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f87a 	bl	8000718 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000624:	2106      	movs	r1, #6
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 f876 	bl	8000718 <lcd_write_command>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800063e:	2300      	movs	r3, #0
 8000640:	73fb      	strb	r3, [r7, #15]
 8000642:	e00a      	b.n	800065a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	4413      	add	r3, r2
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 f890 	bl	8000774 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	3301      	adds	r3, #1
 8000658:	73fb      	strb	r3, [r7, #15]
 800065a:	7bfc      	ldrb	r4, [r7, #15]
 800065c:	6838      	ldr	r0, [r7, #0]
 800065e:	f7ff fdbf 	bl	80001e0 <strlen>
 8000662:	4603      	mov	r3, r0
 8000664:	429c      	cmp	r4, r3
 8000666:	d3ed      	bcc.n	8000644 <Lcd_string+0x10>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bd90      	pop	{r4, r7, pc}
	...

08000674 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
 8000680:	4613      	mov	r3, r2
 8000682:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <Lcd_cursor+0x30>)
 8000688:	5cd2      	ldrb	r2, [r2, r3]
 800068a:	78bb      	ldrb	r3, [r7, #2]
 800068c:	4413      	add	r3, r2
 800068e:	b2db      	uxtb	r3, r3
 8000690:	3b80      	subs	r3, #128	; 0x80
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4619      	mov	r1, r3
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f000 f83e 	bl	8000718 <lcd_write_command>
	#endif
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	08004840 	.word	0x08004840

080006a8 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80006b0:	2101      	movs	r1, #1
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f000 f830 	bl	8000718 <lcd_write_command>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <Lcd_define_char>:

void Lcd_define_char(Lcd_HandleTypeDef * lcd, uint8_t code, uint8_t bitmap[]){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	460b      	mov	r3, r1
 80006ca:	607a      	str	r2, [r7, #4]
 80006cc:	72fb      	strb	r3, [r7, #11]
	code &= 0x7; // we only have 8 locations 0-7
 80006ce:	7afb      	ldrb	r3, [r7, #11]
 80006d0:	f003 0307 	and.w	r3, r3, #7
 80006d4:	72fb      	strb	r3, [r7, #11]
	lcd_write_command(lcd, SETCGRAM_ADDR | (code << 3));
 80006d6:	7afb      	ldrb	r3, [r7, #11]
 80006d8:	00db      	lsls	r3, r3, #3
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e0:	b25b      	sxtb	r3, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	4619      	mov	r1, r3
 80006e6:	68f8      	ldr	r0, [r7, #12]
 80006e8:	f000 f816 	bl	8000718 <lcd_write_command>
	for(uint8_t i=0;i<8;++i){
 80006ec:	2300      	movs	r3, #0
 80006ee:	75fb      	strb	r3, [r7, #23]
 80006f0:	e00a      	b.n	8000708 <Lcd_define_char+0x48>
		lcd_write_data(lcd, bitmap[i]);
 80006f2:	7dfb      	ldrb	r3, [r7, #23]
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	4413      	add	r3, r2
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	4619      	mov	r1, r3
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f000 f839 	bl	8000774 <lcd_write_data>
	for(uint8_t i=0;i<8;++i){
 8000702:	7dfb      	ldrb	r3, [r7, #23]
 8000704:	3301      	adds	r3, #1
 8000706:	75fb      	strb	r3, [r7, #23]
 8000708:	7dfb      	ldrb	r3, [r7, #23]
 800070a:	2b07      	cmp	r3, #7
 800070c:	d9f1      	bls.n	80006f2 <Lcd_define_char+0x32>
	}

}
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6898      	ldr	r0, [r3, #8]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	899b      	ldrh	r3, [r3, #12]
 800072c:	2200      	movs	r2, #0
 800072e:	4619      	mov	r1, r3
 8000730:	f002 f9f8 	bl	8002b24 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	7d9b      	ldrb	r3, [r3, #22]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d111      	bne.n	8000760 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	091b      	lsrs	r3, r3, #4
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2204      	movs	r2, #4
 8000744:	4619      	mov	r1, r3
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f000 f870 	bl	800082c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	f003 030f 	and.w	r3, r3, #15
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2204      	movs	r2, #4
 8000756:	4619      	mov	r1, r3
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 f867 	bl	800082c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800075e:	e005      	b.n	800076c <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	2208      	movs	r2, #8
 8000764:	4619      	mov	r1, r3
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f000 f860 	bl	800082c <lcd_write>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6898      	ldr	r0, [r3, #8]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	899b      	ldrh	r3, [r3, #12]
 8000788:	2201      	movs	r2, #1
 800078a:	4619      	mov	r1, r3
 800078c:	f002 f9ca 	bl	8002b24 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7d9b      	ldrb	r3, [r3, #22]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d111      	bne.n	80007bc <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000798:	78fb      	ldrb	r3, [r7, #3]
 800079a:	091b      	lsrs	r3, r3, #4
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2204      	movs	r2, #4
 80007a0:	4619      	mov	r1, r3
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f842 	bl	800082c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	f003 030f 	and.w	r3, r3, #15
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2204      	movs	r2, #4
 80007b2:	4619      	mov	r1, r3
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f839 	bl	800082c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80007ba:	e005      	b.n	80007c8 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	2208      	movs	r2, #8
 80007c0:	4619      	mov	r1, r3
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 f832 	bl	800082c <lcd_write>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <Lcd_write_data_nostatic>:

}


void Lcd_write_data_nostatic(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6898      	ldr	r0, [r3, #8]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	899b      	ldrh	r3, [r3, #12]
 80007e4:	2201      	movs	r2, #1
 80007e6:	4619      	mov	r1, r3
 80007e8:	f002 f99c 	bl	8002b24 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7d9b      	ldrb	r3, [r3, #22]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d111      	bne.n	8000818 <Lcd_write_data_nostatic+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	091b      	lsrs	r3, r3, #4
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2204      	movs	r2, #4
 80007fc:	4619      	mov	r1, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f814 	bl	800082c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	f003 030f 	and.w	r3, r3, #15
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2204      	movs	r2, #4
 800080e:	4619      	mov	r1, r3
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f000 f80b 	bl	800082c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000816:	e005      	b.n	8000824 <Lcd_write_data_nostatic+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000818:	78fb      	ldrb	r3, [r7, #3]
 800081a:	2208      	movs	r2, #8
 800081c:	4619      	mov	r1, r3
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 f804 	bl	800082c <lcd_write>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	70fb      	strb	r3, [r7, #3]
 8000838:	4613      	mov	r3, r2
 800083a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 800083c:	2300      	movs	r3, #0
 800083e:	73fb      	strb	r3, [r7, #15]
 8000840:	e019      	b.n	8000876 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	6818      	ldr	r0, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	685a      	ldr	r2, [r3, #4]
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	8819      	ldrh	r1, [r3, #0]
 800085a:	78fa      	ldrb	r2, [r7, #3]
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	fa42 f303 	asr.w	r3, r2, r3
 8000862:	b2db      	uxtb	r3, r3
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	461a      	mov	r2, r3
 800086c:	f002 f95a 	bl	8002b24 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	3301      	adds	r3, #1
 8000874:	73fb      	strb	r3, [r7, #15]
 8000876:	7bfa      	ldrb	r2, [r7, #15]
 8000878:	78bb      	ldrb	r3, [r7, #2]
 800087a:	429a      	cmp	r2, r3
 800087c:	d3e1      	bcc.n	8000842 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6918      	ldr	r0, [r3, #16]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	8a9b      	ldrh	r3, [r3, #20]
 8000886:	2201      	movs	r2, #1
 8000888:	4619      	mov	r1, r3
 800088a:	f002 f94b 	bl	8002b24 <HAL_GPIO_WritePin>
	DELAY(1);
 800088e:	2001      	movs	r0, #1
 8000890:	f000 ff1e 	bl	80016d0 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6918      	ldr	r0, [r3, #16]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	8a9b      	ldrh	r3, [r3, #20]
 800089c:	2200      	movs	r2, #0
 800089e:	4619      	mov	r1, r3
 80008a0:	f002 f940 	bl	8002b24 <HAL_GPIO_WritePin>
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <main>:
void set_dino_char();




int main(void) {
 80008ac:	b5b0      	push	{r4, r5, r7, lr}
 80008ae:	b096      	sub	sp, #88	; 0x58
 80008b0:	af04      	add	r7, sp, #16
	HAL_Init();
 80008b2:	f000 fe9b 	bl	80015ec <HAL_Init>
	SystemClock_Config();
 80008b6:	f000 fb47 	bl	8000f48 <SystemClock_Config>
	MX_GPIO_Init();
 80008ba:	f000 fc25 	bl	8001108 <MX_GPIO_Init>
	MX_DMA_Init();
 80008be:	f000 fc03 	bl	80010c8 <MX_DMA_Init>
	MX_ADC1_Init();
 80008c2:	f000 fba1 	bl	8001008 <MX_ADC1_Init>
	// Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
	Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 80008c6:	4b56      	ldr	r3, [pc, #344]	; (8000a20 <main+0x174>)
 80008c8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80008cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
	Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_6};
 80008d2:	4a54      	ldr	r2, [pc, #336]	; (8000a24 <main+0x178>)
 80008d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008dc:	e883 0003 	stmia.w	r3, {r0, r1}
	// Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
	lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 80008e0:	4c51      	ldr	r4, [pc, #324]	; (8000a28 <main+0x17c>)
 80008e2:	4638      	mov	r0, r7
 80008e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008e8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80008ec:	2300      	movs	r3, #0
 80008ee:	9303      	str	r3, [sp, #12]
 80008f0:	2310      	movs	r3, #16
 80008f2:	9302      	str	r3, [sp, #8]
 80008f4:	4b4d      	ldr	r3, [pc, #308]	; (8000a2c <main+0x180>)
 80008f6:	9301      	str	r3, [sp, #4]
 80008f8:	2320      	movs	r3, #32
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	4b4b      	ldr	r3, [pc, #300]	; (8000a2c <main+0x180>)
 80008fe:	f7ff fe45 	bl	800058c <Lcd_create>
 8000902:	4625      	mov	r5, r4
 8000904:	463c      	mov	r4, r7
 8000906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800090a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800090e:	e885 0003 	stmia.w	r5, {r0, r1}
	Lcd_init(&lcd);
 8000912:	4845      	ldr	r0, [pc, #276]	; (8000a28 <main+0x17c>)
 8000914:	f7ff fe65 	bl	80005e2 <Lcd_init>
	// Avvia l'ADC in modalità DMA
	HAL_ADC_Start_DMA(&hadc1, VR, 2);
 8000918:	2202      	movs	r2, #2
 800091a:	4945      	ldr	r1, [pc, #276]	; (8000a30 <main+0x184>)
 800091c:	4845      	ldr	r0, [pc, #276]	; (8000a34 <main+0x188>)
 800091e:	f000 ff3f 	bl	80017a0 <HAL_ADC_Start_DMA>

	// Inizializza il gioco
	set_dino_char();
 8000922:	f000 fa89 	bl	8000e38 <set_dino_char>
	Lcd_cursor(&lcd, 0,0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	483f      	ldr	r0, [pc, #252]	; (8000a28 <main+0x17c>)
 800092c:	f7ff fea2 	bl	8000674 <Lcd_cursor>
	Lcd_string(&lcd, "Benvenuto in");
 8000930:	4941      	ldr	r1, [pc, #260]	; (8000a38 <main+0x18c>)
 8000932:	483d      	ldr	r0, [pc, #244]	; (8000a28 <main+0x17c>)
 8000934:	f7ff fe7e 	bl	8000634 <Lcd_string>
	Lcd_cursor(&lcd, 1,0);
 8000938:	2200      	movs	r2, #0
 800093a:	2101      	movs	r1, #1
 800093c:	483a      	ldr	r0, [pc, #232]	; (8000a28 <main+0x17c>)
 800093e:	f7ff fe99 	bl	8000674 <Lcd_cursor>
	Lcd_string(&lcd, "dino game");
 8000942:	493e      	ldr	r1, [pc, #248]	; (8000a3c <main+0x190>)
 8000944:	4838      	ldr	r0, [pc, #224]	; (8000a28 <main+0x17c>)
 8000946:	f7ff fe75 	bl	8000634 <Lcd_string>
	HAL_Delay(600);
 800094a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800094e:	f000 febf 	bl	80016d0 <HAL_Delay>
	Lcd_clear(&lcd);
 8000952:	4835      	ldr	r0, [pc, #212]	; (8000a28 <main+0x17c>)
 8000954:	f7ff fea8 	bl	80006a8 <Lcd_clear>


	while (1) {
		int dino_difficulty = 200; // Lower the harder. It gets harder over time
 8000958:	23c8      	movs	r3, #200	; 0xc8
 800095a:	647b      	str	r3, [r7, #68]	; 0x44
		int max_dino_difficulty = 30;
 800095c:	231e      	movs	r3, #30
 800095e:	643b      	str	r3, [r7, #64]	; 0x40
		dino_game();
 8000960:	f000 f8ac 	bl	8000abc <dino_game>
		score += 1;
 8000964:	4b36      	ldr	r3, [pc, #216]	; (8000a40 <main+0x194>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	4a35      	ldr	r2, [pc, #212]	; (8000a40 <main+0x194>)
 800096c:	6013      	str	r3, [r2, #0]
		if (dino_dead) {
 800096e:	4b35      	ldr	r3, [pc, #212]	; (8000a44 <main+0x198>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d048      	beq.n	8000a08 <main+0x15c>
			Lcd_clear(&lcd);
 8000976:	482c      	ldr	r0, [pc, #176]	; (8000a28 <main+0x17c>)
 8000978:	f7ff fe96 	bl	80006a8 <Lcd_clear>
			Lcd_cursor(&lcd, 1, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	2101      	movs	r1, #1
 8000980:	4829      	ldr	r0, [pc, #164]	; (8000a28 <main+0x17c>)
 8000982:	f7ff fe77 	bl	8000674 <Lcd_cursor>
			Lcd_write_data_nostatic(&lcd, 1);
 8000986:	2101      	movs	r1, #1
 8000988:	4827      	ldr	r0, [pc, #156]	; (8000a28 <main+0x17c>)
 800098a:	f7ff ff21 	bl	80007d0 <Lcd_write_data_nostatic>
			HAL_Delay(100);
 800098e:	2064      	movs	r0, #100	; 0x64
 8000990:	f000 fe9e 	bl	80016d0 <HAL_Delay>
			Lcd_clear(&lcd);
 8000994:	4824      	ldr	r0, [pc, #144]	; (8000a28 <main+0x17c>)
 8000996:	f7ff fe87 	bl	80006a8 <Lcd_clear>
			HAL_Delay(100);
 800099a:	2064      	movs	r0, #100	; 0x64
 800099c:	f000 fe98 	bl	80016d0 <HAL_Delay>
			Lcd_cursor(&lcd, 1, 1);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2101      	movs	r1, #1
 80009a4:	4820      	ldr	r0, [pc, #128]	; (8000a28 <main+0x17c>)
 80009a6:	f7ff fe65 	bl	8000674 <Lcd_cursor>
			Lcd_write_data_nostatic(&lcd, 1);
 80009aa:	2101      	movs	r1, #1
 80009ac:	481e      	ldr	r0, [pc, #120]	; (8000a28 <main+0x17c>)
 80009ae:	f7ff ff0f 	bl	80007d0 <Lcd_write_data_nostatic>
			HAL_Delay(100);
 80009b2:	2064      	movs	r0, #100	; 0x64
 80009b4:	f000 fe8c 	bl	80016d0 <HAL_Delay>
			Lcd_clear(&lcd);
 80009b8:	481b      	ldr	r0, [pc, #108]	; (8000a28 <main+0x17c>)
 80009ba:	f7ff fe75 	bl	80006a8 <Lcd_clear>
			HAL_Delay(100);
 80009be:	2064      	movs	r0, #100	; 0x64
 80009c0:	f000 fe86 	bl	80016d0 <HAL_Delay>
			Lcd_cursor(&lcd, 1, 1);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2101      	movs	r1, #1
 80009c8:	4817      	ldr	r0, [pc, #92]	; (8000a28 <main+0x17c>)
 80009ca:	f7ff fe53 	bl	8000674 <Lcd_cursor>
			Lcd_write_data_nostatic(&lcd, 1);
 80009ce:	2101      	movs	r1, #1
 80009d0:	4815      	ldr	r0, [pc, #84]	; (8000a28 <main+0x17c>)
 80009d2:	f7ff fefd 	bl	80007d0 <Lcd_write_data_nostatic>
			HAL_Delay(100);
 80009d6:	2064      	movs	r0, #100	; 0x64
 80009d8:	f000 fe7a 	bl	80016d0 <HAL_Delay>
			Lcd_clear(&lcd);
 80009dc:	4812      	ldr	r0, [pc, #72]	; (8000a28 <main+0x17c>)
 80009de:	f7ff fe63 	bl	80006a8 <Lcd_clear>
			char score_str[16];
			sprintf(score_str, "Score: %d", score);
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <main+0x194>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	4917      	ldr	r1, [pc, #92]	; (8000a48 <main+0x19c>)
 80009ec:	4618      	mov	r0, r3
 80009ee:	f002 fe17 	bl	8003620 <siprintf>
			Lcd_string(&lcd, score_str);
 80009f2:	f107 0318 	add.w	r3, r7, #24
 80009f6:	4619      	mov	r1, r3
 80009f8:	480b      	ldr	r0, [pc, #44]	; (8000a28 <main+0x17c>)
 80009fa:	f7ff fe1b 	bl	8000634 <Lcd_string>
			while (1) {
				HAL_Delay(1000);
 80009fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a02:	f000 fe65 	bl	80016d0 <HAL_Delay>
 8000a06:	e7fa      	b.n	80009fe <main+0x152>
			}
		}
		HAL_Delay(dino_difficulty);
 8000a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 fe60 	bl	80016d0 <HAL_Delay>
		if (dino_difficulty > max_dino_difficulty) {
 8000a10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a14:	429a      	cmp	r2, r3
 8000a16:	dd9f      	ble.n	8000958 <main+0xac>
			dino_difficulty -= 2;
 8000a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a1a:	3b02      	subs	r3, #2
 8000a1c:	647b      	str	r3, [r7, #68]	; 0x44
	while (1) {
 8000a1e:	e79b      	b.n	8000958 <main+0xac>
 8000a20:	080047dc 	.word	0x080047dc
 8000a24:	080047ec 	.word	0x080047ec
 8000a28:	200001b0 	.word	0x200001b0
 8000a2c:	40020400 	.word	0x40020400
 8000a30:	200001c8 	.word	0x200001c8
 8000a34:	20000108 	.word	0x20000108
 8000a38:	080047b4 	.word	0x080047b4
 8000a3c:	080047c4 	.word	0x080047c4
 8000a40:	200001dc 	.word	0x200001dc
 8000a44:	200001e8 	.word	0x200001e8
 8000a48:	080047d0 	.word	0x080047d0

08000a4c <read_joystick>:
		}
	}
}

void read_joystick() {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	// I valori dell'ADC vengono aggiornati dal DMA, quindi possiamo leggerli direttamente

    HAL_ADC_Start_DMA(&hadc1, VR, 2);
 8000a50:	2202      	movs	r2, #2
 8000a52:	490e      	ldr	r1, [pc, #56]	; (8000a8c <read_joystick+0x40>)
 8000a54:	480e      	ldr	r0, [pc, #56]	; (8000a90 <read_joystick+0x44>)
 8000a56:	f000 fea3 	bl	80017a0 <HAL_ADC_Start_DMA>
	joy_X = VR[0];
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <read_joystick+0x40>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <read_joystick+0x48>)
 8000a60:	6013      	str	r3, [r2, #0]
	joy_Y = VR[1];
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <read_joystick+0x40>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <read_joystick+0x4c>)
 8000a68:	6013      	str	r3, [r2, #0]
	joy_SW = HAL_GPIO_ReadPin(GPIOA, joy_SW_pin);
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <read_joystick+0x50>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	4619      	mov	r1, r3
 8000a72:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <read_joystick+0x54>)
 8000a74:	f002 f83e 	bl	8002af4 <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	bf14      	ite	ne
 8000a7e:	2301      	movne	r3, #1
 8000a80:	2300      	moveq	r3, #0
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <read_joystick+0x58>)
 8000a86:	701a      	strb	r2, [r3, #0]

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	200001c8 	.word	0x200001c8
 8000a90:	20000108 	.word	0x20000108
 8000a94:	200001d0 	.word	0x200001d0
 8000a98:	200001d4 	.word	0x200001d4
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	200001d8 	.word	0x200001d8

08000aa8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == hadc1.Instance) {
		// Trasferimento completato, i valori in VR[0] e VR[1] sono aggiornati
		// Potresti voler eseguire ulteriori operazioni qui, se necessario
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <dino_game>:
        Lcd_define_char(&lcd, i, blank);
    }

}

void dino_game() {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
	read_joystick();
 8000ac2:	f7ff ffc3 	bl	8000a4c <read_joystick>
	bool btnDown = (joy_X < 300);
 8000ac6:	4b60      	ldr	r3, [pc, #384]	; (8000c48 <dino_game+0x18c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f240 122b 	movw	r2, #299	; 0x12b
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	bf94      	ite	ls
 8000ad2:	2301      	movls	r3, #1
 8000ad4:	2300      	movhi	r3, #0
 8000ad6:	71fb      	strb	r3, [r7, #7]
	bool btnUp = (joy_X > 700);
 8000ad8:	4b5b      	ldr	r3, [pc, #364]	; (8000c48 <dino_game+0x18c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000ae0:	bf8c      	ite	hi
 8000ae2:	2301      	movhi	r3, #1
 8000ae4:	2300      	movls	r3, #0
 8000ae6:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < 2; i++) {
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	e01a      	b.n	8000b24 <dino_game+0x68>
		for (int j = 0; j < 15; j++) {
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	e011      	b.n	8000b18 <dino_game+0x5c>
			mat[i][j] = mat[i][j + 1];
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	3301      	adds	r3, #1
 8000af8:	4954      	ldr	r1, [pc, #336]	; (8000c4c <dino_game+0x190>)
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	0112      	lsls	r2, r2, #4
 8000afe:	4413      	add	r3, r2
 8000b00:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000b04:	4851      	ldr	r0, [pc, #324]	; (8000c4c <dino_game+0x190>)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	0119      	lsls	r1, r3, #4
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	440b      	add	r3, r1
 8000b0e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for (int j = 0; j < 15; j++) {
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	3301      	adds	r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	2b0e      	cmp	r3, #14
 8000b1c:	ddea      	ble.n	8000af4 <dino_game+0x38>
	for (int i = 0; i < 2; i++) {
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3301      	adds	r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	dde1      	ble.n	8000aee <dino_game+0x32>
		}
	}
	if (mat[1][0] == 5 || mat[1][0] == 7) {
 8000b2a:	4b48      	ldr	r3, [pc, #288]	; (8000c4c <dino_game+0x190>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	2b05      	cmp	r3, #5
 8000b30:	d003      	beq.n	8000b3a <dino_game+0x7e>
 8000b32:	4b46      	ldr	r3, [pc, #280]	; (8000c4c <dino_game+0x190>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	2b07      	cmp	r3, #7
 8000b38:	d104      	bne.n	8000b44 <dino_game+0x88>
		dino_object_count -= 1;
 8000b3a:	4b45      	ldr	r3, [pc, #276]	; (8000c50 <dino_game+0x194>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	4a43      	ldr	r2, [pc, #268]	; (8000c50 <dino_game+0x194>)
 8000b42:	6013      	str	r3, [r2, #0]
	}
	mat[0][15] = 8;
 8000b44:	4b41      	ldr	r3, [pc, #260]	; (8000c4c <dino_game+0x190>)
 8000b46:	2208      	movs	r2, #8
 8000b48:	63da      	str	r2, [r3, #60]	; 0x3c
	mat[1][15] = 8;
 8000b4a:	4b40      	ldr	r3, [pc, #256]	; (8000c4c <dino_game+0x190>)
 8000b4c:	2208      	movs	r2, #8
 8000b4e:	67da      	str	r2, [r3, #124]	; 0x7c
	dino_generate_obstacles();
 8000b50:	f000 f8ca 	bl	8000ce8 <dino_generate_obstacles>
	draw_dino_background();
 8000b54:	f000 f886 	bl	8000c64 <draw_dino_background>

	if (btnDown == false && dino_jump_time == 0) {
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f083 0301 	eor.w	r3, r3, #1
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d017      	beq.n	8000b94 <dino_game+0xd8>
 8000b64:	4b3b      	ldr	r3, [pc, #236]	; (8000c54 <dino_game+0x198>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d113      	bne.n	8000b94 <dino_game+0xd8>
		Lcd_cursor(&lcd, 1, 1);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2101      	movs	r1, #1
 8000b70:	4839      	ldr	r0, [pc, #228]	; (8000c58 <dino_game+0x19c>)
 8000b72:	f7ff fd7f 	bl	8000674 <Lcd_cursor>
		if (mat[1][1] == 7 || mat[1][1] == 5) {
 8000b76:	4b35      	ldr	r3, [pc, #212]	; (8000c4c <dino_game+0x190>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	2b07      	cmp	r3, #7
 8000b7c:	d003      	beq.n	8000b86 <dino_game+0xca>
 8000b7e:	4b33      	ldr	r3, [pc, #204]	; (8000c4c <dino_game+0x190>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	2b05      	cmp	r3, #5
 8000b84:	d102      	bne.n	8000b8c <dino_game+0xd0>
			dino_dead = true;
 8000b86:	4b35      	ldr	r3, [pc, #212]	; (8000c5c <dino_game+0x1a0>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
		}
		Lcd_write_data_nostatic(&lcd, 1);
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	4832      	ldr	r0, [pc, #200]	; (8000c58 <dino_game+0x19c>)
 8000b90:	f7ff fe1e 	bl	80007d0 <Lcd_write_data_nostatic>
	}
	if (btnDown == false && dino_jump_time != 0) {
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	f083 0301 	eor.w	r3, r3, #1
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d013      	beq.n	8000bc8 <dino_game+0x10c>
 8000ba0:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <dino_game+0x198>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d00f      	beq.n	8000bc8 <dino_game+0x10c>

		Lcd_cursor(&lcd, 1, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2101      	movs	r1, #1
 8000bac:	482a      	ldr	r0, [pc, #168]	; (8000c58 <dino_game+0x19c>)
 8000bae:	f7ff fd61 	bl	8000674 <Lcd_cursor>
		if (mat[1][0] == 6) {
 8000bb2:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <dino_game+0x190>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d102      	bne.n	8000bc0 <dino_game+0x104>
			dino_dead = true;
 8000bba:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <dino_game+0x1a0>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
		}
		Lcd_write_data_nostatic(&lcd, 2);
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	4825      	ldr	r0, [pc, #148]	; (8000c58 <dino_game+0x19c>)
 8000bc4:	f7ff fe04 	bl	80007d0 <Lcd_write_data_nostatic>
	}
	if (btnUp == true && dino_jump_time == 0) {
 8000bc8:	79bb      	ldrb	r3, [r7, #6]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d006      	beq.n	8000bdc <dino_game+0x120>
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <dino_game+0x198>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d102      	bne.n	8000bdc <dino_game+0x120>
		dino_jump_time = dino_jump_duration;
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <dino_game+0x198>)
 8000bda:	601a      	str	r2, [r3, #0]
	}
	if (btnDown == true) {
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d012      	beq.n	8000c08 <dino_game+0x14c>
		Lcd_cursor(&lcd, 1, 1);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2101      	movs	r1, #1
 8000be6:	481c      	ldr	r0, [pc, #112]	; (8000c58 <dino_game+0x19c>)
 8000be8:	f7ff fd44 	bl	8000674 <Lcd_cursor>
		if (mat[1][1] == 5) {
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <dino_game+0x190>)
 8000bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf0:	2b05      	cmp	r3, #5
 8000bf2:	d102      	bne.n	8000bfa <dino_game+0x13e>
			dino_dead = true;
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <dino_game+0x1a0>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	701a      	strb	r2, [r3, #0]
		}

		Lcd_write_data_nostatic(&lcd, 3); // Adjust to write the custom character
 8000bfa:	2103      	movs	r1, #3
 8000bfc:	4816      	ldr	r0, [pc, #88]	; (8000c58 <dino_game+0x19c>)
 8000bfe:	f7ff fde7 	bl	80007d0 <Lcd_write_data_nostatic>
		dino_jump_time = 0;
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <dino_game+0x198>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
	}
	Lcd_cursor(&lcd, 15, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	4812      	ldr	r0, [pc, #72]	; (8000c58 <dino_game+0x19c>)
 8000c0e:	f7ff fd31 	bl	8000674 <Lcd_cursor>
	Lcd_write_data_nostatic(&lcd, 0);
 8000c12:	2100      	movs	r1, #0
 8000c14:	4810      	ldr	r0, [pc, #64]	; (8000c58 <dino_game+0x19c>)
 8000c16:	f7ff fddb 	bl	80007d0 <Lcd_write_data_nostatic>
	dino_jump_time = (dino_jump_time > 0) ? dino_jump_time - 1 : 0;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <dino_game+0x198>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	bfb8      	it	lt
 8000c22:	2301      	movlt	r3, #1
 8000c24:	3b01      	subs	r3, #1
 8000c26:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <dino_game+0x198>)
 8000c28:	6013      	str	r3, [r2, #0]
	animation_tick = (animation_tick == 0) ? 1 : 0;
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <dino_game+0x1a4>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	bf0c      	ite	eq
 8000c32:	2301      	moveq	r3, #1
 8000c34:	2300      	movne	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <dino_game+0x1a4>)
 8000c3c:	701a      	strb	r2, [r3, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200001d0 	.word	0x200001d0
 8000c4c:	20000004 	.word	0x20000004
 8000c50:	200001e0 	.word	0x200001e0
 8000c54:	200001f0 	.word	0x200001f0
 8000c58:	200001b0 	.word	0x200001b0
 8000c5c:	200001e8 	.word	0x200001e8
 8000c60:	200001f4 	.word	0x200001f4

08000c64 <draw_dino_background>:
			mat[i][j] = 8;
		}
	}
}

void draw_dino_background() {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; i++) {
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	e02d      	b.n	8000ccc <draw_dino_background+0x68>
		for (int j = 0; j < 16; j++) {
 8000c70:	2300      	movs	r3, #0
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	e024      	b.n	8000cc0 <draw_dino_background+0x5c>
			Lcd_cursor(&lcd, i, j);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4816      	ldr	r0, [pc, #88]	; (8000cdc <draw_dino_background+0x78>)
 8000c82:	f7ff fcf7 	bl	8000674 <Lcd_cursor>
			if (mat[i][j] == 8) {
 8000c86:	4916      	ldr	r1, [pc, #88]	; (8000ce0 <draw_dino_background+0x7c>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	011a      	lsls	r2, r3, #4
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c94:	2b08      	cmp	r3, #8
 8000c96:	d104      	bne.n	8000ca2 <draw_dino_background+0x3e>
				Lcd_string(&lcd, " ");
 8000c98:	4912      	ldr	r1, [pc, #72]	; (8000ce4 <draw_dino_background+0x80>)
 8000c9a:	4810      	ldr	r0, [pc, #64]	; (8000cdc <draw_dino_background+0x78>)
 8000c9c:	f7ff fcca 	bl	8000634 <Lcd_string>
 8000ca0:	e00b      	b.n	8000cba <draw_dino_background+0x56>
			} else {
				Lcd_write_data_nostatic(&lcd, mat[i][j]);
 8000ca2:	490f      	ldr	r1, [pc, #60]	; (8000ce0 <draw_dino_background+0x7c>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	011a      	lsls	r2, r3, #4
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4809      	ldr	r0, [pc, #36]	; (8000cdc <draw_dino_background+0x78>)
 8000cb6:	f7ff fd8b 	bl	80007d0 <Lcd_write_data_nostatic>
		for (int j = 0; j < 16; j++) {
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	2b0f      	cmp	r3, #15
 8000cc4:	ddd7      	ble.n	8000c76 <draw_dino_background+0x12>
	for (int i = 0; i < 2; i++) {
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	ddce      	ble.n	8000c70 <draw_dino_background+0xc>
			}
		}
	}
}
 8000cd2:	bf00      	nop
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200001b0 	.word	0x200001b0
 8000ce0:	20000004 	.word	0x20000004
 8000ce4:	080047fc 	.word	0x080047fc

08000ce8 <dino_generate_obstacles>:

void dino_generate_obstacles() {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
	bool cactus_spawn = false;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	73fb      	strb	r3, [r7, #15]
	bool bird_spawn = false;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	73bb      	strb	r3, [r7, #14]
	if (dino_cactus_appeared >= 3 && dino_bird_appeared >= 3) {
 8000cf6:	4b4b      	ldr	r3, [pc, #300]	; (8000e24 <dino_generate_obstacles+0x13c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	dd05      	ble.n	8000d0a <dino_generate_obstacles+0x22>
 8000cfe:	4b4a      	ldr	r3, [pc, #296]	; (8000e28 <dino_generate_obstacles+0x140>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	dd01      	ble.n	8000d0a <dino_generate_obstacles+0x22>
		cactus_spawn = true;
 8000d06:	2301      	movs	r3, #1
 8000d08:	73fb      	strb	r3, [r7, #15]
	}
	if (dino_cactus_appeared >= 3 && dino_bird_appeared >= 3) {
 8000d0a:	4b46      	ldr	r3, [pc, #280]	; (8000e24 <dino_generate_obstacles+0x13c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	dd05      	ble.n	8000d1e <dino_generate_obstacles+0x36>
 8000d12:	4b45      	ldr	r3, [pc, #276]	; (8000e28 <dino_generate_obstacles+0x140>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	dd01      	ble.n	8000d1e <dino_generate_obstacles+0x36>
		bird_spawn = true;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	73bb      	strb	r3, [r7, #14]
	}

	int randint = rand() % 10 + 1;
 8000d1e:	f002 fb7f 	bl	8003420 <rand>
 8000d22:	4601      	mov	r1, r0
 8000d24:	4b41      	ldr	r3, [pc, #260]	; (8000e2c <dino_generate_obstacles+0x144>)
 8000d26:	fb83 2301 	smull	r2, r3, r3, r1
 8000d2a:	109a      	asrs	r2, r3, #2
 8000d2c:	17cb      	asrs	r3, r1, #31
 8000d2e:	1ad2      	subs	r2, r2, r3
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	1aca      	subs	r2, r1, r3
 8000d3a:	1c53      	adds	r3, r2, #1
 8000d3c:	60bb      	str	r3, [r7, #8]
	if (randint < 4 && dino_object_count < dino_object_max) {
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	dc61      	bgt.n	8000e08 <dino_generate_obstacles+0x120>
 8000d44:	4b3a      	ldr	r3, [pc, #232]	; (8000e30 <dino_generate_obstacles+0x148>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2204      	movs	r2, #4
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	da5c      	bge.n	8000e08 <dino_generate_obstacles+0x120>
		if (bird_spawn && cactus_spawn) {
 8000d4e:	7bbb      	ldrb	r3, [r7, #14]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d02c      	beq.n	8000dae <dino_generate_obstacles+0xc6>
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d029      	beq.n	8000dae <dino_generate_obstacles+0xc6>
			int randint = rand() % 10 + 1;
 8000d5a:	f002 fb61 	bl	8003420 <rand>
 8000d5e:	4601      	mov	r1, r0
 8000d60:	4b32      	ldr	r3, [pc, #200]	; (8000e2c <dino_generate_obstacles+0x144>)
 8000d62:	fb83 2301 	smull	r2, r3, r3, r1
 8000d66:	109a      	asrs	r2, r3, #2
 8000d68:	17cb      	asrs	r3, r1, #31
 8000d6a:	1ad2      	subs	r2, r2, r3
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	1aca      	subs	r2, r1, r3
 8000d76:	1c53      	adds	r3, r2, #1
 8000d78:	607b      	str	r3, [r7, #4]
			if (randint < 5) {
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	dc0a      	bgt.n	8000d96 <dino_generate_obstacles+0xae>
				mat[0][15] = 6;
 8000d80:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <dino_generate_obstacles+0x14c>)
 8000d82:	2206      	movs	r2, #6
 8000d84:	63da      	str	r2, [r3, #60]	; 0x3c
				mat[1][15] = 7;
 8000d86:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <dino_generate_obstacles+0x14c>)
 8000d88:	2207      	movs	r2, #7
 8000d8a:	67da      	str	r2, [r3, #124]	; 0x7c
				dino_bird_appeared = -1;
 8000d8c:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <dino_generate_obstacles+0x140>)
 8000d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	e006      	b.n	8000da4 <dino_generate_obstacles+0xbc>
			} else {
				mat[1][15] = 5;
 8000d96:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <dino_generate_obstacles+0x14c>)
 8000d98:	2205      	movs	r2, #5
 8000d9a:	67da      	str	r2, [r3, #124]	; 0x7c
				dino_cactus_appeared = -1;
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <dino_generate_obstacles+0x13c>)
 8000d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000da2:	601a      	str	r2, [r3, #0]
			}
			dino_object_count += 1;
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <dino_generate_obstacles+0x148>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <dino_generate_obstacles+0x148>)
 8000dac:	6013      	str	r3, [r2, #0]
		}
		if (bird_spawn && !cactus_spawn) {
 8000dae:	7bbb      	ldrb	r3, [r7, #14]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d014      	beq.n	8000dde <dino_generate_obstacles+0xf6>
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	f083 0301 	eor.w	r3, r3, #1
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d00e      	beq.n	8000dde <dino_generate_obstacles+0xf6>
			mat[0][15] = 6;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <dino_generate_obstacles+0x14c>)
 8000dc2:	2206      	movs	r2, #6
 8000dc4:	63da      	str	r2, [r3, #60]	; 0x3c
			mat[1][15] = 7;
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <dino_generate_obstacles+0x14c>)
 8000dc8:	2207      	movs	r2, #7
 8000dca:	67da      	str	r2, [r3, #124]	; 0x7c
			dino_bird_appeared = -1;
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <dino_generate_obstacles+0x140>)
 8000dce:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd2:	601a      	str	r2, [r3, #0]
			dino_object_count += 1;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <dino_generate_obstacles+0x148>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	4a15      	ldr	r2, [pc, #84]	; (8000e30 <dino_generate_obstacles+0x148>)
 8000ddc:	6013      	str	r3, [r2, #0]
		}
		if (!bird_spawn && cactus_spawn) {
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
 8000de0:	f083 0301 	eor.w	r3, r3, #1
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00e      	beq.n	8000e08 <dino_generate_obstacles+0x120>
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d00b      	beq.n	8000e08 <dino_generate_obstacles+0x120>
			mat[1][15] = 5;
 8000df0:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <dino_generate_obstacles+0x14c>)
 8000df2:	2205      	movs	r2, #5
 8000df4:	67da      	str	r2, [r3, #124]	; 0x7c
			dino_cactus_appeared = -1;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <dino_generate_obstacles+0x13c>)
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	601a      	str	r2, [r3, #0]
			dino_object_count += 1;
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <dino_generate_obstacles+0x148>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <dino_generate_obstacles+0x148>)
 8000e06:	6013      	str	r3, [r2, #0]
		}
	}
	dino_bird_appeared += 1;
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <dino_generate_obstacles+0x140>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <dino_generate_obstacles+0x140>)
 8000e10:	6013      	str	r3, [r2, #0]
	dino_cactus_appeared += 1;
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <dino_generate_obstacles+0x13c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	3301      	adds	r3, #1
 8000e18:	4a02      	ldr	r2, [pc, #8]	; (8000e24 <dino_generate_obstacles+0x13c>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200001e4 	.word	0x200001e4
 8000e28:	200001ec 	.word	0x200001ec
 8000e2c:	66666667 	.word	0x66666667
 8000e30:	200001e0 	.word	0x200001e0
 8000e34:	20000004 	.word	0x20000004

08000e38 <set_dino_char>:

void set_dino_char() {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b090      	sub	sp, #64	; 0x40
 8000e3c:	af00      	add	r7, sp, #0
	// array di caratteri personalizzati su LCD
	uint8_t sun[8] = {
 8000e3e:	4a39      	ldr	r2, [pc, #228]	; (8000f24 <set_dino_char+0xec>)
 8000e40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e48:	e883 0003 	stmia.w	r3, {r0, r1}
			0x1F,
			0x1F,
			0x1C,
			0x00
	};
	uint8_t dino_run1[8] = {
 8000e4c:	4a36      	ldr	r2, [pc, #216]	; (8000f28 <set_dino_char+0xf0>)
 8000e4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e56:	e883 0003 	stmia.w	r3, {r0, r1}
			0x17,
			0x1E,
			0x0E,
			0x1B
	};
	uint8_t dino_run2[8] = {
 8000e5a:	4a34      	ldr	r2, [pc, #208]	; (8000f2c <set_dino_char+0xf4>)
 8000e5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e64:	e883 0003 	stmia.w	r3, {r0, r1}
			0x17,
			0x1E,
			0x0F,
			0x0C
	};
	uint8_t cactus[8] = {
 8000e68:	4a31      	ldr	r2, [pc, #196]	; (8000f30 <set_dino_char+0xf8>)
 8000e6a:	f107 0320 	add.w	r3, r7, #32
 8000e6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e72:	e883 0003 	stmia.w	r3, {r0, r1}
			0x17,
			0x1C,
			0x04,
			0x04
	};
	uint8_t dino_duck1[8] = {
 8000e76:	4a2f      	ldr	r2, [pc, #188]	; (8000f34 <set_dino_char+0xfc>)
 8000e78:	f107 0318 	add.w	r3, r7, #24
 8000e7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e80:	e883 0003 	stmia.w	r3, {r0, r1}
			0x17,
			0x1E,
			0x0F,
			0x08
	};
	uint8_t dino_duck2[8] = {
 8000e84:	4a2c      	ldr	r2, [pc, #176]	; (8000f38 <set_dino_char+0x100>)
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e8e:	e883 0003 	stmia.w	r3, {r0, r1}
			0x17,
			0x1E,
			0x0E,
			0x12
	};
	uint8_t bird_top[8] = {
 8000e92:	4a2a      	ldr	r2, [pc, #168]	; (8000f3c <set_dino_char+0x104>)
 8000e94:	f107 0308 	add.w	r3, r7, #8
 8000e98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e9c:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00,
			0x07,
			0x0E,
			0x1C
	};
	uint8_t bird_bottom[8] = {
 8000ea0:	4a27      	ldr	r2, [pc, #156]	; (8000f40 <set_dino_char+0x108>)
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ea8:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00,
			0x00,
			0x00,
			0x00
	};
	Lcd_define_char(&lcd, 0, sun);
 8000eac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4823      	ldr	r0, [pc, #140]	; (8000f44 <set_dino_char+0x10c>)
 8000eb6:	f7ff fc03 	bl	80006c0 <Lcd_define_char>
	Lcd_define_char(&lcd, 1, dino_run1);
 8000eba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	4820      	ldr	r0, [pc, #128]	; (8000f44 <set_dino_char+0x10c>)
 8000ec4:	f7ff fbfc 	bl	80006c0 <Lcd_define_char>
	Lcd_define_char(&lcd, 2, dino_run2);
 8000ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ecc:	461a      	mov	r2, r3
 8000ece:	2102      	movs	r1, #2
 8000ed0:	481c      	ldr	r0, [pc, #112]	; (8000f44 <set_dino_char+0x10c>)
 8000ed2:	f7ff fbf5 	bl	80006c0 <Lcd_define_char>
	Lcd_define_char(&lcd, 3, dino_duck1);
 8000ed6:	f107 0318 	add.w	r3, r7, #24
 8000eda:	461a      	mov	r2, r3
 8000edc:	2103      	movs	r1, #3
 8000ede:	4819      	ldr	r0, [pc, #100]	; (8000f44 <set_dino_char+0x10c>)
 8000ee0:	f7ff fbee 	bl	80006c0 <Lcd_define_char>
	Lcd_define_char(&lcd, 4, dino_duck2);
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	461a      	mov	r2, r3
 8000eea:	2104      	movs	r1, #4
 8000eec:	4815      	ldr	r0, [pc, #84]	; (8000f44 <set_dino_char+0x10c>)
 8000eee:	f7ff fbe7 	bl	80006c0 <Lcd_define_char>
	Lcd_define_char(&lcd, 5, cactus);
 8000ef2:	f107 0320 	add.w	r3, r7, #32
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	2105      	movs	r1, #5
 8000efa:	4812      	ldr	r0, [pc, #72]	; (8000f44 <set_dino_char+0x10c>)
 8000efc:	f7ff fbe0 	bl	80006c0 <Lcd_define_char>
	Lcd_define_char(&lcd, 6, bird_top);
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	461a      	mov	r2, r3
 8000f06:	2106      	movs	r1, #6
 8000f08:	480e      	ldr	r0, [pc, #56]	; (8000f44 <set_dino_char+0x10c>)
 8000f0a:	f7ff fbd9 	bl	80006c0 <Lcd_define_char>
	Lcd_define_char(&lcd, 7, bird_bottom);
 8000f0e:	463b      	mov	r3, r7
 8000f10:	461a      	mov	r2, r3
 8000f12:	2107      	movs	r1, #7
 8000f14:	480b      	ldr	r0, [pc, #44]	; (8000f44 <set_dino_char+0x10c>)
 8000f16:	f7ff fbd3 	bl	80006c0 <Lcd_define_char>
	// configurazione dei caratteri su LCD
}
 8000f1a:	bf00      	nop
 8000f1c:	3740      	adds	r7, #64	; 0x40
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	08004800 	.word	0x08004800
 8000f28:	08004808 	.word	0x08004808
 8000f2c:	08004810 	.word	0x08004810
 8000f30:	08004818 	.word	0x08004818
 8000f34:	08004820 	.word	0x08004820
 8000f38:	08004828 	.word	0x08004828
 8000f3c:	08004830 	.word	0x08004830
 8000f40:	08004838 	.word	0x08004838
 8000f44:	200001b0 	.word	0x200001b0

08000f48 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b094      	sub	sp, #80	; 0x50
 8000f4c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	2230      	movs	r2, #48	; 0x30
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f002 fbc5 	bl	80036e6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	4b23      	ldr	r3, [pc, #140]	; (8001000 <SystemClock_Config+0xb8>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	4a22      	ldr	r2, [pc, #136]	; (8001000 <SystemClock_Config+0xb8>)
 8000f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <SystemClock_Config+0xb8>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <SystemClock_Config+0xbc>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f94:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <SystemClock_Config+0xbc>)
 8000f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <SystemClock_Config+0xbc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fac:	2301      	movs	r3, #1
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb8:	f107 0320 	add.w	r3, r7, #32
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f001 fdcb 	bl	8002b58 <HAL_RCC_OscConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0x84>
	{
		Error_Handler();
 8000fc8:	f000 f934 	bl	8001234 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fcc:	230f      	movs	r3, #15
 8000fce:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fdc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 f82d 	bl	8003048 <HAL_RCC_ClockConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0xb0>
	{
		Error_Handler();
 8000ff4:	f000 f91e 	bl	8001234 <Error_Handler>
	}
}
 8000ff8:	bf00      	nop
 8000ffa:	3750      	adds	r7, #80	; 0x50
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40023800 	.word	0x40023800
 8001004:	40007000 	.word	0x40007000

08001008 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800100e:	463b      	mov	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800101a:	4b28      	ldr	r3, [pc, #160]	; (80010bc <MX_ADC1_Init+0xb4>)
 800101c:	4a28      	ldr	r2, [pc, #160]	; (80010c0 <MX_ADC1_Init+0xb8>)
 800101e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001020:	4b26      	ldr	r3, [pc, #152]	; (80010bc <MX_ADC1_Init+0xb4>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001026:	4b25      	ldr	r3, [pc, #148]	; (80010bc <MX_ADC1_Init+0xb4>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800102c:	4b23      	ldr	r3, [pc, #140]	; (80010bc <MX_ADC1_Init+0xb4>)
 800102e:	2201      	movs	r2, #1
 8001030:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001032:	4b22      	ldr	r3, [pc, #136]	; (80010bc <MX_ADC1_Init+0xb4>)
 8001034:	2201      	movs	r2, #1
 8001036:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001038:	4b20      	ldr	r3, [pc, #128]	; (80010bc <MX_ADC1_Init+0xb4>)
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <MX_ADC1_Init+0xb4>)
 8001042:	2200      	movs	r2, #0
 8001044:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <MX_ADC1_Init+0xb4>)
 8001048:	4a1e      	ldr	r2, [pc, #120]	; (80010c4 <MX_ADC1_Init+0xbc>)
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <MX_ADC1_Init+0xb4>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <MX_ADC1_Init+0xb4>)
 8001054:	2202      	movs	r2, #2
 8001056:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <MX_ADC1_Init+0xb4>)
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MX_ADC1_Init+0xb4>)
 8001062:	2201      	movs	r2, #1
 8001064:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001066:	4815      	ldr	r0, [pc, #84]	; (80010bc <MX_ADC1_Init+0xb4>)
 8001068:	f000 fb56 	bl	8001718 <HAL_ADC_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 8001072:	f000 f8df 	bl	8001234 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8001076:	230a      	movs	r3, #10
 8001078:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800107a:	2301      	movs	r3, #1
 800107c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800107e:	2307      	movs	r3, #7
 8001080:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001082:	463b      	mov	r3, r7
 8001084:	4619      	mov	r1, r3
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <MX_ADC1_Init+0xb4>)
 8001088:	f000 fc8e 	bl	80019a8 <HAL_ADC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 8001092:	f000 f8cf 	bl	8001234 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8001096:	230b      	movs	r3, #11
 8001098:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 800109a:	2302      	movs	r3, #2
 800109c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <MX_ADC1_Init+0xb4>)
 80010a4:	f000 fc80 	bl	80019a8 <HAL_ADC_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC1_Init+0xaa>
	{
		Error_Handler();
 80010ae:	f000 f8c1 	bl	8001234 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000108 	.word	0x20000108
 80010c0:	40012000 	.word	0x40012000
 80010c4:	0f000001 	.word	0x0f000001

080010c8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_DMA_Init+0x3c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <MX_DMA_Init+0x3c>)
 80010d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_DMA_Init+0x3c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	2038      	movs	r0, #56	; 0x38
 80010f0:	f000 ffd5 	bl	800209e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010f4:	2038      	movs	r0, #56	; 0x38
 80010f6:	f000 ffee 	bl	80020d6 <HAL_NVIC_EnableIRQ>

}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800

08001108 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	4b40      	ldr	r3, [pc, #256]	; (8001224 <MX_GPIO_Init+0x11c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a3f      	ldr	r2, [pc, #252]	; (8001224 <MX_GPIO_Init+0x11c>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b3d      	ldr	r3, [pc, #244]	; (8001224 <MX_GPIO_Init+0x11c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b39      	ldr	r3, [pc, #228]	; (8001224 <MX_GPIO_Init+0x11c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a38      	ldr	r2, [pc, #224]	; (8001224 <MX_GPIO_Init+0x11c>)
 8001144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b36      	ldr	r3, [pc, #216]	; (8001224 <MX_GPIO_Init+0x11c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	4b32      	ldr	r3, [pc, #200]	; (8001224 <MX_GPIO_Init+0x11c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a31      	ldr	r2, [pc, #196]	; (8001224 <MX_GPIO_Init+0x11c>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <MX_GPIO_Init+0x11c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <MX_GPIO_Init+0x11c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a2a      	ldr	r2, [pc, #168]	; (8001224 <MX_GPIO_Init+0x11c>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b28      	ldr	r3, [pc, #160]	; (8001224 <MX_GPIO_Init+0x11c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	21e0      	movs	r1, #224	; 0xe0
 8001192:	4825      	ldr	r0, [pc, #148]	; (8001228 <MX_GPIO_Init+0x120>)
 8001194:	f001 fcc6 	bl	8002b24 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	4823      	ldr	r0, [pc, #140]	; (800122c <MX_GPIO_Init+0x124>)
 800119e:	f001 fcc1 	bl	8002b24 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2170      	movs	r1, #112	; 0x70
 80011a6:	4822      	ldr	r0, [pc, #136]	; (8001230 <MX_GPIO_Init+0x128>)
 80011a8:	f001 fcbc 	bl	8002b24 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80011ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	481a      	ldr	r0, [pc, #104]	; (800122c <MX_GPIO_Init+0x124>)
 80011c4:	f001 fb12 	bl	80027ec <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA6 PA7 */
	GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 80011c8:	23e0      	movs	r3, #224	; 0xe0
 80011ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4812      	ldr	r0, [pc, #72]	; (8001228 <MX_GPIO_Init+0x120>)
 80011e0:	f001 fb04 	bl	80027ec <HAL_GPIO_Init>

	/*Configure GPIO pin : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	480c      	ldr	r0, [pc, #48]	; (800122c <MX_GPIO_Init+0x124>)
 80011fc:	f001 faf6 	bl	80027ec <HAL_GPIO_Init>

	/*Configure GPIO pins : PB4 PB5 PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001200:	2370      	movs	r3, #112	; 0x70
 8001202:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <MX_GPIO_Init+0x128>)
 8001218:	f001 fae8 	bl	80027ec <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020800 	.word	0x40020800
 8001230:	40020400 	.word	0x40020400

08001234 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800123c:	e7fe      	b.n	800123c <Error_Handler+0x8>
	...

08001240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_MspInit+0x4c>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	4a0f      	ldr	r2, [pc, #60]	; (800128c <HAL_MspInit+0x4c>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001254:	6453      	str	r3, [r2, #68]	; 0x44
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_MspInit+0x4c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_MspInit+0x4c>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a08      	ldr	r2, [pc, #32]	; (800128c <HAL_MspInit+0x4c>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_MspInit+0x4c>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800127e:	2007      	movs	r0, #7
 8001280:	f000 ff02 	bl	8002088 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800

08001290 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a2f      	ldr	r2, [pc, #188]	; (800136c <HAL_ADC_MspInit+0xdc>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d157      	bne.n	8001362 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <HAL_ADC_MspInit+0xe0>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a2d      	ldr	r2, [pc, #180]	; (8001370 <HAL_ADC_MspInit+0xe0>)
 80012bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <HAL_ADC_MspInit+0xe0>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b27      	ldr	r3, [pc, #156]	; (8001370 <HAL_ADC_MspInit+0xe0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a26      	ldr	r2, [pc, #152]	; (8001370 <HAL_ADC_MspInit+0xe0>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b24      	ldr	r3, [pc, #144]	; (8001370 <HAL_ADC_MspInit+0xe0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012ea:	2303      	movs	r3, #3
 80012ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ee:	2303      	movs	r3, #3
 80012f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	481d      	ldr	r0, [pc, #116]	; (8001374 <HAL_ADC_MspInit+0xe4>)
 80012fe:	f001 fa75 	bl	80027ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <HAL_ADC_MspInit+0xe8>)
 8001304:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_ADC_MspInit+0xec>)
 8001306:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_ADC_MspInit+0xe8>)
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HAL_ADC_MspInit+0xe8>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001314:	4b18      	ldr	r3, [pc, #96]	; (8001378 <HAL_ADC_MspInit+0xe8>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <HAL_ADC_MspInit+0xe8>)
 800131c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001320:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_ADC_MspInit+0xe8>)
 8001324:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001328:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <HAL_ADC_MspInit+0xe8>)
 800132c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001330:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_ADC_MspInit+0xe8>)
 8001334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001338:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_ADC_MspInit+0xe8>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_ADC_MspInit+0xe8>)
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001346:	480c      	ldr	r0, [pc, #48]	; (8001378 <HAL_ADC_MspInit+0xe8>)
 8001348:	f000 fee0 	bl	800210c <HAL_DMA_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001352:	f7ff ff6f 	bl	8001234 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_ADC_MspInit+0xe8>)
 800135a:	639a      	str	r2, [r3, #56]	; 0x38
 800135c:	4a06      	ldr	r2, [pc, #24]	; (8001378 <HAL_ADC_MspInit+0xe8>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001362:	bf00      	nop
 8001364:	3728      	adds	r7, #40	; 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40012000 	.word	0x40012000
 8001370:	40023800 	.word	0x40023800
 8001374:	40020800 	.word	0x40020800
 8001378:	20000150 	.word	0x20000150
 800137c:	40026410 	.word	0x40026410

08001380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001384:	e7fe      	b.n	8001384 <NMI_Handler+0x4>

08001386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <HardFault_Handler+0x4>

0800138c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <MemManage_Handler+0x4>

08001392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <BusFault_Handler+0x4>

08001398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <UsageFault_Handler+0x4>

0800139e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013cc:	f000 f960 	bl	8001690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <DMA2_Stream0_IRQHandler+0x10>)
 80013da:	f000 ff9d 	bl	8002318 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000150 	.word	0x20000150

080013e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return 1;
 80013ec:	2301      	movs	r3, #1
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <_kill>:

int _kill(int pid, int sig)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001402:	f002 f9bf 	bl	8003784 <__errno>
 8001406:	4603      	mov	r3, r0
 8001408:	2216      	movs	r2, #22
 800140a:	601a      	str	r2, [r3, #0]
  return -1;
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_exit>:

void _exit (int status)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001420:	f04f 31ff 	mov.w	r1, #4294967295
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ffe7 	bl	80013f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800142a:	e7fe      	b.n	800142a <_exit+0x12>

0800142c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e00a      	b.n	8001454 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800143e:	f3af 8000 	nop.w
 8001442:	4601      	mov	r1, r0
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	60ba      	str	r2, [r7, #8]
 800144a:	b2ca      	uxtb	r2, r1
 800144c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	dbf0      	blt.n	800143e <_read+0x12>
  }

  return len;
 800145c:	687b      	ldr	r3, [r7, #4]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	e009      	b.n	800148c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	60ba      	str	r2, [r7, #8]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3301      	adds	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	429a      	cmp	r2, r3
 8001492:	dbf1      	blt.n	8001478 <_write+0x12>
  }
  return len;
 8001494:	687b      	ldr	r3, [r7, #4]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <_close>:

int _close(int file)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c6:	605a      	str	r2, [r3, #4]
  return 0;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_isatty>:

int _isatty(int file)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001510:	4a14      	ldr	r2, [pc, #80]	; (8001564 <_sbrk+0x5c>)
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <_sbrk+0x60>)
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d102      	bne.n	800152a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <_sbrk+0x64>)
 8001526:	4a12      	ldr	r2, [pc, #72]	; (8001570 <_sbrk+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	429a      	cmp	r2, r3
 8001536:	d207      	bcs.n	8001548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001538:	f002 f924 	bl	8003784 <__errno>
 800153c:	4603      	mov	r3, r0
 800153e:	220c      	movs	r2, #12
 8001540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	e009      	b.n	800155c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <_sbrk+0x64>)
 8001558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155a:	68fb      	ldr	r3, [r7, #12]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20018000 	.word	0x20018000
 8001568:	00000400 	.word	0x00000400
 800156c:	200001f8 	.word	0x200001f8
 8001570:	20000350 	.word	0x20000350

08001574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <SystemInit+0x20>)
 800157a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <SystemInit+0x20>)
 8001580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
	}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800159c:	f7ff ffea 	bl	8001574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015a2:	490d      	ldr	r1, [pc, #52]	; (80015d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b8:	4c0a      	ldr	r4, [pc, #40]	; (80015e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80015c6:	f002 f8e3 	bl	8003790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ca:	f7ff f96f 	bl	80008ac <main>
  bx  lr    
 80015ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d8:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80015dc:	0800494c 	.word	0x0800494c
  ldr r2, =_sbss
 80015e0:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 80015e4:	2000034c 	.word	0x2000034c

080015e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e8:	e7fe      	b.n	80015e8 <ADC_IRQHandler>
	...

080015ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0d      	ldr	r2, [pc, #52]	; (800162c <HAL_Init+0x40>)
 80015f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0a      	ldr	r2, [pc, #40]	; (800162c <HAL_Init+0x40>)
 8001602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001606:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a07      	ldr	r2, [pc, #28]	; (800162c <HAL_Init+0x40>)
 800160e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001612:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001614:	2003      	movs	r0, #3
 8001616:	f000 fd37 	bl	8002088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161a:	2000      	movs	r0, #0
 800161c:	f000 f808 	bl	8001630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001620:	f7ff fe0e 	bl	8001240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023c00 	.word	0x40023c00

08001630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_InitTick+0x54>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_InitTick+0x58>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001646:	fbb3 f3f1 	udiv	r3, r3, r1
 800164a:	fbb2 f3f3 	udiv	r3, r2, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fd4f 	bl	80020f2 <HAL_SYSTICK_Config>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e00e      	b.n	800167c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b0f      	cmp	r3, #15
 8001662:	d80a      	bhi.n	800167a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001664:	2200      	movs	r2, #0
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f000 fd17 	bl	800209e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001670:	4a06      	ldr	r2, [pc, #24]	; (800168c <HAL_InitTick+0x5c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e000      	b.n	800167c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000084 	.word	0x20000084
 8001688:	2000008c 	.word	0x2000008c
 800168c:	20000088 	.word	0x20000088

08001690 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_IncTick+0x20>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_IncTick+0x24>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <HAL_IncTick+0x24>)
 80016a2:	6013      	str	r3, [r2, #0]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	2000008c 	.word	0x2000008c
 80016b4:	200001fc 	.word	0x200001fc

080016b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return uwTick;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <HAL_GetTick+0x14>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	200001fc 	.word	0x200001fc

080016d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d8:	f7ff ffee 	bl	80016b8 <HAL_GetTick>
 80016dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e8:	d005      	beq.n	80016f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_Delay+0x44>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4413      	add	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016f6:	bf00      	nop
 80016f8:	f7ff ffde 	bl	80016b8 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	429a      	cmp	r2, r3
 8001706:	d8f7      	bhi.n	80016f8 <HAL_Delay+0x28>
  {
  }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	2000008c 	.word	0x2000008c

08001718 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e033      	b.n	8001796 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	2b00      	cmp	r3, #0
 8001734:	d109      	bne.n	800174a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fdaa 	bl	8001290 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	2b00      	cmp	r3, #0
 8001754:	d118      	bne.n	8001788 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800175e:	f023 0302 	bic.w	r3, r3, #2
 8001762:	f043 0202 	orr.w	r2, r3, #2
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 fa3e 	bl	8001bec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f023 0303 	bic.w	r3, r3, #3
 800177e:	f043 0201 	orr.w	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	641a      	str	r2, [r3, #64]	; 0x40
 8001786:	e001      	b.n	800178c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_ADC_Start_DMA+0x1e>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e0ce      	b.n	800195c <HAL_ADC_Start_DMA+0x1bc>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d018      	beq.n	8001806 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0201 	orr.w	r2, r2, #1
 80017e2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017e4:	4b5f      	ldr	r3, [pc, #380]	; (8001964 <HAL_ADC_Start_DMA+0x1c4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a5f      	ldr	r2, [pc, #380]	; (8001968 <HAL_ADC_Start_DMA+0x1c8>)
 80017ea:	fba2 2303 	umull	r2, r3, r2, r3
 80017ee:	0c9a      	lsrs	r2, r3, #18
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80017f8:	e002      	b.n	8001800 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f9      	bne.n	80017fa <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001814:	d107      	bne.n	8001826 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001824:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b01      	cmp	r3, #1
 8001832:	f040 8086 	bne.w	8001942 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800183e:	f023 0301 	bic.w	r3, r3, #1
 8001842:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001854:	2b00      	cmp	r3, #0
 8001856:	d007      	beq.n	8001868 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001860:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001874:	d106      	bne.n	8001884 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	f023 0206 	bic.w	r2, r3, #6
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	645a      	str	r2, [r3, #68]	; 0x44
 8001882:	e002      	b.n	800188a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001892:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_ADC_Start_DMA+0x1cc>)
 8001894:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189a:	4a35      	ldr	r2, [pc, #212]	; (8001970 <HAL_ADC_Start_DMA+0x1d0>)
 800189c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a2:	4a34      	ldr	r2, [pc, #208]	; (8001974 <HAL_ADC_Start_DMA+0x1d4>)
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018aa:	4a33      	ldr	r2, [pc, #204]	; (8001978 <HAL_ADC_Start_DMA+0x1d8>)
 80018ac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018b6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80018c6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018d6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	334c      	adds	r3, #76	; 0x4c
 80018e2:	4619      	mov	r1, r3
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f000 fcbe 	bl	8002268 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10f      	bne.n	8001918 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d129      	bne.n	800195a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	e020      	b.n	800195a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a17      	ldr	r2, [pc, #92]	; (800197c <HAL_ADC_Start_DMA+0x1dc>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d11b      	bne.n	800195a <HAL_ADC_Start_DMA+0x1ba>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d114      	bne.n	800195a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	e00b      	b.n	800195a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f043 0210 	orr.w	r2, r3, #16
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f043 0201 	orr.w	r2, r3, #1
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000084 	.word	0x20000084
 8001968:	431bde83 	.word	0x431bde83
 800196c:	40012300 	.word	0x40012300
 8001970:	08001de5 	.word	0x08001de5
 8001974:	08001e9f 	.word	0x08001e9f
 8001978:	08001ebb 	.word	0x08001ebb
 800197c:	40012000 	.word	0x40012000

08001980 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x1c>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e105      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x228>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b09      	cmp	r3, #9
 80019d2:	d925      	bls.n	8001a20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68d9      	ldr	r1, [r3, #12]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	461a      	mov	r2, r3
 80019e2:	4613      	mov	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4413      	add	r3, r2
 80019e8:	3b1e      	subs	r3, #30
 80019ea:	2207      	movs	r2, #7
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43da      	mvns	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	400a      	ands	r2, r1
 80019f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68d9      	ldr	r1, [r3, #12]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4403      	add	r3, r0
 8001a12:	3b1e      	subs	r3, #30
 8001a14:	409a      	lsls	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	e022      	b.n	8001a66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6919      	ldr	r1, [r3, #16]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	2207      	movs	r2, #7
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	400a      	ands	r2, r1
 8001a42:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6919      	ldr	r1, [r3, #16]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	4603      	mov	r3, r0
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4403      	add	r3, r0
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d824      	bhi.n	8001ab8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3b05      	subs	r3, #5
 8001a80:	221f      	movs	r2, #31
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	400a      	ands	r2, r1
 8001a8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3b05      	subs	r3, #5
 8001aaa:	fa00 f203 	lsl.w	r2, r0, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ab6:	e04c      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b0c      	cmp	r3, #12
 8001abe:	d824      	bhi.n	8001b0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	3b23      	subs	r3, #35	; 0x23
 8001ad2:	221f      	movs	r2, #31
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43da      	mvns	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	400a      	ands	r2, r1
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	3b23      	subs	r3, #35	; 0x23
 8001afc:	fa00 f203 	lsl.w	r2, r0, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	631a      	str	r2, [r3, #48]	; 0x30
 8001b08:	e023      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	3b41      	subs	r3, #65	; 0x41
 8001b1c:	221f      	movs	r2, #31
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	400a      	ands	r2, r1
 8001b2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	4618      	mov	r0, r3
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	3b41      	subs	r3, #65	; 0x41
 8001b46:	fa00 f203 	lsl.w	r2, r0, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b52:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <HAL_ADC_ConfigChannel+0x234>)
 8001b54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a21      	ldr	r2, [pc, #132]	; (8001be0 <HAL_ADC_ConfigChannel+0x238>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d109      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x1cc>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b12      	cmp	r3, #18
 8001b66:	d105      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <HAL_ADC_ConfigChannel+0x238>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d123      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x21e>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b10      	cmp	r3, #16
 8001b84:	d003      	beq.n	8001b8e <HAL_ADC_ConfigChannel+0x1e6>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b11      	cmp	r3, #17
 8001b8c:	d11b      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b10      	cmp	r3, #16
 8001ba0:	d111      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <HAL_ADC_ConfigChannel+0x23c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <HAL_ADC_ConfigChannel+0x240>)
 8001ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bac:	0c9a      	lsrs	r2, r3, #18
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001bb8:	e002      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f9      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	40012300 	.word	0x40012300
 8001be0:	40012000 	.word	0x40012000
 8001be4:	20000084 	.word	0x20000084
 8001be8:	431bde83 	.word	0x431bde83

08001bec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bf4:	4b79      	ldr	r3, [pc, #484]	; (8001ddc <ADC_Init+0x1f0>)
 8001bf6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6859      	ldr	r1, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	021a      	lsls	r2, r3, #8
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6899      	ldr	r1, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	4a58      	ldr	r2, [pc, #352]	; (8001de0 <ADC_Init+0x1f4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d022      	beq.n	8001cca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6899      	ldr	r1, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6899      	ldr	r1, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	e00f      	b.n	8001cea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ce8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0202 	bic.w	r2, r2, #2
 8001cf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6899      	ldr	r1, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7e1b      	ldrb	r3, [r3, #24]
 8001d04:	005a      	lsls	r2, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01b      	beq.n	8001d50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d26:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6859      	ldr	r1, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	3b01      	subs	r3, #1
 8001d44:	035a      	lsls	r2, r3, #13
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	e007      	b.n	8001d60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d5e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	051a      	lsls	r2, r3, #20
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6899      	ldr	r1, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001da2:	025a      	lsls	r2, r3, #9
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6899      	ldr	r1, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	029a      	lsls	r2, r3, #10
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	609a      	str	r2, [r3, #8]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	40012300 	.word	0x40012300
 8001de0:	0f000001 	.word	0x0f000001

08001de4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d13c      	bne.n	8001e78 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d12b      	bne.n	8001e70 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d127      	bne.n	8001e70 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e26:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d006      	beq.n	8001e3c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d119      	bne.n	8001e70 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0220 	bic.w	r2, r2, #32
 8001e4a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	f043 0201 	orr.w	r2, r3, #1
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7fe fe19 	bl	8000aa8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e76:	e00e      	b.n	8001e96 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f003 0310 	and.w	r3, r3, #16
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f7ff fd85 	bl	8001994 <HAL_ADC_ErrorCallback>
}
 8001e8a:	e004      	b.n	8001e96 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	4798      	blx	r3
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eaa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f7ff fd67 	bl	8001980 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2240      	movs	r2, #64	; 0x40
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f043 0204 	orr.w	r2, r3, #4
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f7ff fd5a 	bl	8001994 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ee0:	bf00      	nop
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f04:	4013      	ands	r3, r2
 8001f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1a:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	60d3      	str	r3, [r2, #12]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <__NVIC_GetPriorityGrouping+0x18>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	f003 0307 	and.w	r3, r3, #7
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	db0b      	blt.n	8001f76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	f003 021f 	and.w	r2, r3, #31
 8001f64:	4907      	ldr	r1, [pc, #28]	; (8001f84 <__NVIC_EnableIRQ+0x38>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000e100 	.word	0xe000e100

08001f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	db0a      	blt.n	8001fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	490c      	ldr	r1, [pc, #48]	; (8001fd4 <__NVIC_SetPriority+0x4c>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	0112      	lsls	r2, r2, #4
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	440b      	add	r3, r1
 8001fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb0:	e00a      	b.n	8001fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4908      	ldr	r1, [pc, #32]	; (8001fd8 <__NVIC_SetPriority+0x50>)
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	3b04      	subs	r3, #4
 8001fc0:	0112      	lsls	r2, r2, #4
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	761a      	strb	r2, [r3, #24]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000e100 	.word	0xe000e100
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	; 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f1c3 0307 	rsb	r3, r3, #7
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	bf28      	it	cs
 8001ffa:	2304      	movcs	r3, #4
 8001ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3304      	adds	r3, #4
 8002002:	2b06      	cmp	r3, #6
 8002004:	d902      	bls.n	800200c <NVIC_EncodePriority+0x30>
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3b03      	subs	r3, #3
 800200a:	e000      	b.n	800200e <NVIC_EncodePriority+0x32>
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	f04f 32ff 	mov.w	r2, #4294967295
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43da      	mvns	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	401a      	ands	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002024:	f04f 31ff 	mov.w	r1, #4294967295
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	43d9      	mvns	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	4313      	orrs	r3, r2
         );
}
 8002036:	4618      	mov	r0, r3
 8002038:	3724      	adds	r7, #36	; 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002054:	d301      	bcc.n	800205a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002056:	2301      	movs	r3, #1
 8002058:	e00f      	b.n	800207a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205a:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <SysTick_Config+0x40>)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002062:	210f      	movs	r1, #15
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	f7ff ff8e 	bl	8001f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <SysTick_Config+0x40>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <SysTick_Config+0x40>)
 8002074:	2207      	movs	r2, #7
 8002076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	e000e010 	.word	0xe000e010

08002088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ff29 	bl	8001ee8 <__NVIC_SetPriorityGrouping>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800209e:	b580      	push	{r7, lr}
 80020a0:	b086      	sub	sp, #24
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b0:	f7ff ff3e 	bl	8001f30 <__NVIC_GetPriorityGrouping>
 80020b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	6978      	ldr	r0, [r7, #20]
 80020bc:	f7ff ff8e 	bl	8001fdc <NVIC_EncodePriority>
 80020c0:	4602      	mov	r2, r0
 80020c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff5d 	bl	8001f88 <__NVIC_SetPriority>
}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff31 	bl	8001f4c <__NVIC_EnableIRQ>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff ffa2 	bl	8002044 <SysTick_Config>
 8002100:	4603      	mov	r3, r0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002118:	f7ff face 	bl	80016b8 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e099      	b.n	800225c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2202      	movs	r2, #2
 800212c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002148:	e00f      	b.n	800216a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800214a:	f7ff fab5 	bl	80016b8 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b05      	cmp	r3, #5
 8002156:	d908      	bls.n	800216a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2220      	movs	r2, #32
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2203      	movs	r2, #3
 8002162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e078      	b.n	800225c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1e8      	bne.n	800214a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	4b38      	ldr	r3, [pc, #224]	; (8002264 <HAL_DMA_Init+0x158>)
 8002184:	4013      	ands	r3, r2
 8002186:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002196:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d107      	bne.n	80021d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	4313      	orrs	r3, r2
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f023 0307 	bic.w	r3, r3, #7
 80021ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d117      	bne.n	800222e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00e      	beq.n	800222e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 fa6f 	bl	80026f4 <DMA_CheckFifoParam>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2240      	movs	r2, #64	; 0x40
 8002220:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800222a:	2301      	movs	r3, #1
 800222c:	e016      	b.n	800225c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fa26 	bl	8002688 <DMA_CalcBaseAndBitshift>
 800223c:	4603      	mov	r3, r0
 800223e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002244:	223f      	movs	r2, #63	; 0x3f
 8002246:	409a      	lsls	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	f010803f 	.word	0xf010803f

08002268 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_DMA_Start_IT+0x26>
 800228a:	2302      	movs	r3, #2
 800228c:	e040      	b.n	8002310 <HAL_DMA_Start_IT+0xa8>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d12f      	bne.n	8002302 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2202      	movs	r2, #2
 80022a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f9b8 	bl	800262c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c0:	223f      	movs	r2, #63	; 0x3f
 80022c2:	409a      	lsls	r2, r3
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0216 	orr.w	r2, r2, #22
 80022d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0208 	orr.w	r2, r2, #8
 80022ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	e005      	b.n	800230e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800230a:	2302      	movs	r3, #2
 800230c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800230e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002324:	4b8e      	ldr	r3, [pc, #568]	; (8002560 <HAL_DMA_IRQHandler+0x248>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a8e      	ldr	r2, [pc, #568]	; (8002564 <HAL_DMA_IRQHandler+0x24c>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	0a9b      	lsrs	r3, r3, #10
 8002330:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002342:	2208      	movs	r2, #8
 8002344:	409a      	lsls	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4013      	ands	r3, r2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d01a      	beq.n	8002384 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d013      	beq.n	8002384 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0204 	bic.w	r2, r2, #4
 800236a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	2208      	movs	r2, #8
 8002372:	409a      	lsls	r2, r3
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237c:	f043 0201 	orr.w	r2, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002388:	2201      	movs	r2, #1
 800238a:	409a      	lsls	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4013      	ands	r3, r2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d012      	beq.n	80023ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00b      	beq.n	80023ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a6:	2201      	movs	r2, #1
 80023a8:	409a      	lsls	r2, r3
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b2:	f043 0202 	orr.w	r2, r3, #2
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023be:	2204      	movs	r2, #4
 80023c0:	409a      	lsls	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d012      	beq.n	80023f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00b      	beq.n	80023f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	2204      	movs	r2, #4
 80023de:	409a      	lsls	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e8:	f043 0204 	orr.w	r2, r3, #4
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f4:	2210      	movs	r2, #16
 80023f6:	409a      	lsls	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d043      	beq.n	8002488 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d03c      	beq.n	8002488 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002412:	2210      	movs	r2, #16
 8002414:	409a      	lsls	r2, r3
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d018      	beq.n	800245a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d108      	bne.n	8002448 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d024      	beq.n	8002488 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	4798      	blx	r3
 8002446:	e01f      	b.n	8002488 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01b      	beq.n	8002488 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	4798      	blx	r3
 8002458:	e016      	b.n	8002488 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002464:	2b00      	cmp	r3, #0
 8002466:	d107      	bne.n	8002478 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0208 	bic.w	r2, r2, #8
 8002476:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248c:	2220      	movs	r2, #32
 800248e:	409a      	lsls	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 808f 	beq.w	80025b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8087 	beq.w	80025b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	2220      	movs	r2, #32
 80024b0:	409a      	lsls	r2, r3
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b05      	cmp	r3, #5
 80024c0:	d136      	bne.n	8002530 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0216 	bic.w	r2, r2, #22
 80024d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d103      	bne.n	80024f2 <HAL_DMA_IRQHandler+0x1da>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d007      	beq.n	8002502 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0208 	bic.w	r2, r2, #8
 8002500:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002506:	223f      	movs	r2, #63	; 0x3f
 8002508:	409a      	lsls	r2, r3
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002522:	2b00      	cmp	r3, #0
 8002524:	d07e      	beq.n	8002624 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	4798      	blx	r3
        }
        return;
 800252e:	e079      	b.n	8002624 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d01d      	beq.n	800257a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10d      	bne.n	8002568 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002550:	2b00      	cmp	r3, #0
 8002552:	d031      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	4798      	blx	r3
 800255c:	e02c      	b.n	80025b8 <HAL_DMA_IRQHandler+0x2a0>
 800255e:	bf00      	nop
 8002560:	20000084 	.word	0x20000084
 8002564:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d023      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
 8002578:	e01e      	b.n	80025b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10f      	bne.n	80025a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0210 	bic.w	r2, r2, #16
 8002596:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d032      	beq.n	8002626 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d022      	beq.n	8002612 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2205      	movs	r2, #5
 80025d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	3301      	adds	r3, #1
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d307      	bcc.n	8002600 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f2      	bne.n	80025e4 <HAL_DMA_IRQHandler+0x2cc>
 80025fe:	e000      	b.n	8002602 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002600:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	4798      	blx	r3
 8002622:	e000      	b.n	8002626 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002624:	bf00      	nop
    }
  }
}
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002648:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2b40      	cmp	r3, #64	; 0x40
 8002658:	d108      	bne.n	800266c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800266a:	e007      	b.n	800267c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	60da      	str	r2, [r3, #12]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	3b10      	subs	r3, #16
 8002698:	4a14      	ldr	r2, [pc, #80]	; (80026ec <DMA_CalcBaseAndBitshift+0x64>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026a2:	4a13      	ldr	r2, [pc, #76]	; (80026f0 <DMA_CalcBaseAndBitshift+0x68>)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4413      	add	r3, r2
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d909      	bls.n	80026ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026be:	f023 0303 	bic.w	r3, r3, #3
 80026c2:	1d1a      	adds	r2, r3, #4
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	659a      	str	r2, [r3, #88]	; 0x58
 80026c8:	e007      	b.n	80026da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026d2:	f023 0303 	bic.w	r3, r3, #3
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	aaaaaaab 	.word	0xaaaaaaab
 80026f0:	08004854 	.word	0x08004854

080026f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d11f      	bne.n	800274e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b03      	cmp	r3, #3
 8002712:	d856      	bhi.n	80027c2 <DMA_CheckFifoParam+0xce>
 8002714:	a201      	add	r2, pc, #4	; (adr r2, 800271c <DMA_CheckFifoParam+0x28>)
 8002716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271a:	bf00      	nop
 800271c:	0800272d 	.word	0x0800272d
 8002720:	0800273f 	.word	0x0800273f
 8002724:	0800272d 	.word	0x0800272d
 8002728:	080027c3 	.word	0x080027c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d046      	beq.n	80027c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800273c:	e043      	b.n	80027c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002742:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002746:	d140      	bne.n	80027ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800274c:	e03d      	b.n	80027ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002756:	d121      	bne.n	800279c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b03      	cmp	r3, #3
 800275c:	d837      	bhi.n	80027ce <DMA_CheckFifoParam+0xda>
 800275e:	a201      	add	r2, pc, #4	; (adr r2, 8002764 <DMA_CheckFifoParam+0x70>)
 8002760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002764:	08002775 	.word	0x08002775
 8002768:	0800277b 	.word	0x0800277b
 800276c:	08002775 	.word	0x08002775
 8002770:	0800278d 	.word	0x0800278d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
      break;
 8002778:	e030      	b.n	80027dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d025      	beq.n	80027d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800278a:	e022      	b.n	80027d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002794:	d11f      	bne.n	80027d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800279a:	e01c      	b.n	80027d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d903      	bls.n	80027aa <DMA_CheckFifoParam+0xb6>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d003      	beq.n	80027b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027a8:	e018      	b.n	80027dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
      break;
 80027ae:	e015      	b.n	80027dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00e      	beq.n	80027da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
      break;
 80027c0:	e00b      	b.n	80027da <DMA_CheckFifoParam+0xe6>
      break;
 80027c2:	bf00      	nop
 80027c4:	e00a      	b.n	80027dc <DMA_CheckFifoParam+0xe8>
      break;
 80027c6:	bf00      	nop
 80027c8:	e008      	b.n	80027dc <DMA_CheckFifoParam+0xe8>
      break;
 80027ca:	bf00      	nop
 80027cc:	e006      	b.n	80027dc <DMA_CheckFifoParam+0xe8>
      break;
 80027ce:	bf00      	nop
 80027d0:	e004      	b.n	80027dc <DMA_CheckFifoParam+0xe8>
      break;
 80027d2:	bf00      	nop
 80027d4:	e002      	b.n	80027dc <DMA_CheckFifoParam+0xe8>
      break;   
 80027d6:	bf00      	nop
 80027d8:	e000      	b.n	80027dc <DMA_CheckFifoParam+0xe8>
      break;
 80027da:	bf00      	nop
    }
  } 
  
  return status; 
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop

080027ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	; 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	e159      	b.n	8002abc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002808:	2201      	movs	r2, #1
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	429a      	cmp	r2, r3
 8002822:	f040 8148 	bne.w	8002ab6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	2b01      	cmp	r3, #1
 8002830:	d005      	beq.n	800283e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283a:	2b02      	cmp	r3, #2
 800283c:	d130      	bne.n	80028a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	2203      	movs	r2, #3
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002874:	2201      	movs	r2, #1
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 0201 	and.w	r2, r3, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d017      	beq.n	80028dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	2203      	movs	r2, #3
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d123      	bne.n	8002930 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	08da      	lsrs	r2, r3, #3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3208      	adds	r2, #8
 80028f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	220f      	movs	r2, #15
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	08da      	lsrs	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3208      	adds	r2, #8
 800292a:	69b9      	ldr	r1, [r7, #24]
 800292c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0203 	and.w	r2, r3, #3
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80a2 	beq.w	8002ab6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	4b57      	ldr	r3, [pc, #348]	; (8002ad4 <HAL_GPIO_Init+0x2e8>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	4a56      	ldr	r2, [pc, #344]	; (8002ad4 <HAL_GPIO_Init+0x2e8>)
 800297c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002980:	6453      	str	r3, [r2, #68]	; 0x44
 8002982:	4b54      	ldr	r3, [pc, #336]	; (8002ad4 <HAL_GPIO_Init+0x2e8>)
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800298e:	4a52      	ldr	r2, [pc, #328]	; (8002ad8 <HAL_GPIO_Init+0x2ec>)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	3302      	adds	r3, #2
 8002996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	220f      	movs	r2, #15
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a49      	ldr	r2, [pc, #292]	; (8002adc <HAL_GPIO_Init+0x2f0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d019      	beq.n	80029ee <HAL_GPIO_Init+0x202>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a48      	ldr	r2, [pc, #288]	; (8002ae0 <HAL_GPIO_Init+0x2f4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_GPIO_Init+0x1fe>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a47      	ldr	r2, [pc, #284]	; (8002ae4 <HAL_GPIO_Init+0x2f8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00d      	beq.n	80029e6 <HAL_GPIO_Init+0x1fa>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a46      	ldr	r2, [pc, #280]	; (8002ae8 <HAL_GPIO_Init+0x2fc>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d007      	beq.n	80029e2 <HAL_GPIO_Init+0x1f6>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a45      	ldr	r2, [pc, #276]	; (8002aec <HAL_GPIO_Init+0x300>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_GPIO_Init+0x1f2>
 80029da:	2304      	movs	r3, #4
 80029dc:	e008      	b.n	80029f0 <HAL_GPIO_Init+0x204>
 80029de:	2307      	movs	r3, #7
 80029e0:	e006      	b.n	80029f0 <HAL_GPIO_Init+0x204>
 80029e2:	2303      	movs	r3, #3
 80029e4:	e004      	b.n	80029f0 <HAL_GPIO_Init+0x204>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e002      	b.n	80029f0 <HAL_GPIO_Init+0x204>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_GPIO_Init+0x204>
 80029ee:	2300      	movs	r3, #0
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	f002 0203 	and.w	r2, r2, #3
 80029f6:	0092      	lsls	r2, r2, #2
 80029f8:	4093      	lsls	r3, r2
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a00:	4935      	ldr	r1, [pc, #212]	; (8002ad8 <HAL_GPIO_Init+0x2ec>)
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3302      	adds	r3, #2
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a0e:	4b38      	ldr	r3, [pc, #224]	; (8002af0 <HAL_GPIO_Init+0x304>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a32:	4a2f      	ldr	r2, [pc, #188]	; (8002af0 <HAL_GPIO_Init+0x304>)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a38:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <HAL_GPIO_Init+0x304>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a5c:	4a24      	ldr	r2, [pc, #144]	; (8002af0 <HAL_GPIO_Init+0x304>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a62:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <HAL_GPIO_Init+0x304>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a86:	4a1a      	ldr	r2, [pc, #104]	; (8002af0 <HAL_GPIO_Init+0x304>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a8c:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <HAL_GPIO_Init+0x304>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ab0:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <HAL_GPIO_Init+0x304>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	2b0f      	cmp	r3, #15
 8002ac0:	f67f aea2 	bls.w	8002808 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	3724      	adds	r7, #36	; 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40013800 	.word	0x40013800
 8002adc:	40020000 	.word	0x40020000
 8002ae0:	40020400 	.word	0x40020400
 8002ae4:	40020800 	.word	0x40020800
 8002ae8:	40020c00 	.word	0x40020c00
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40013c00 	.word	0x40013c00

08002af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	887b      	ldrh	r3, [r7, #2]
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
 8002b10:	e001      	b.n	8002b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	807b      	strh	r3, [r7, #2]
 8002b30:	4613      	mov	r3, r2
 8002b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b34:	787b      	ldrb	r3, [r7, #1]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b3a:	887a      	ldrh	r2, [r7, #2]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b40:	e003      	b.n	8002b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b42:	887b      	ldrh	r3, [r7, #2]
 8002b44:	041a      	lsls	r2, r3, #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	619a      	str	r2, [r3, #24]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e267      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d075      	beq.n	8002c62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b76:	4b88      	ldr	r3, [pc, #544]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d00c      	beq.n	8002b9c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b82:	4b85      	ldr	r3, [pc, #532]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d112      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8e:	4b82      	ldr	r3, [pc, #520]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	4b7e      	ldr	r3, [pc, #504]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d05b      	beq.n	8002c60 <HAL_RCC_OscConfig+0x108>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d157      	bne.n	8002c60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e242      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bbc:	d106      	bne.n	8002bcc <HAL_RCC_OscConfig+0x74>
 8002bbe:	4b76      	ldr	r3, [pc, #472]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a75      	ldr	r2, [pc, #468]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	e01d      	b.n	8002c08 <HAL_RCC_OscConfig+0xb0>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x98>
 8002bd6:	4b70      	ldr	r3, [pc, #448]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a6f      	ldr	r2, [pc, #444]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	4b6d      	ldr	r3, [pc, #436]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6c      	ldr	r2, [pc, #432]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e00b      	b.n	8002c08 <HAL_RCC_OscConfig+0xb0>
 8002bf0:	4b69      	ldr	r3, [pc, #420]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a68      	ldr	r2, [pc, #416]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	4b66      	ldr	r3, [pc, #408]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a65      	ldr	r2, [pc, #404]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d013      	beq.n	8002c38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fe fd52 	bl	80016b8 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c18:	f7fe fd4e 	bl	80016b8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e207      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2a:	4b5b      	ldr	r3, [pc, #364]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0xc0>
 8002c36:	e014      	b.n	8002c62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7fe fd3e 	bl	80016b8 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c40:	f7fe fd3a 	bl	80016b8 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e1f3      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c52:	4b51      	ldr	r3, [pc, #324]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0xe8>
 8002c5e:	e000      	b.n	8002c62 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d063      	beq.n	8002d36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c6e:	4b4a      	ldr	r3, [pc, #296]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7a:	4b47      	ldr	r3, [pc, #284]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d11c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c86:	4b44      	ldr	r3, [pc, #272]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d116      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c92:	4b41      	ldr	r3, [pc, #260]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_RCC_OscConfig+0x152>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d001      	beq.n	8002caa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e1c7      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002caa:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4937      	ldr	r1, [pc, #220]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cbe:	e03a      	b.n	8002d36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d020      	beq.n	8002d0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc8:	4b34      	ldr	r3, [pc, #208]	; (8002d9c <HAL_RCC_OscConfig+0x244>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cce:	f7fe fcf3 	bl	80016b8 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd6:	f7fe fcef 	bl	80016b8 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e1a8      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce8:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf4:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4925      	ldr	r1, [pc, #148]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	600b      	str	r3, [r1, #0]
 8002d08:	e015      	b.n	8002d36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0a:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <HAL_RCC_OscConfig+0x244>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7fe fcd2 	bl	80016b8 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d18:	f7fe fcce 	bl	80016b8 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e187      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2a:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d036      	beq.n	8002db0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d016      	beq.n	8002d78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4a:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <HAL_RCC_OscConfig+0x248>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d50:	f7fe fcb2 	bl	80016b8 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d58:	f7fe fcae 	bl	80016b8 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e167      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x200>
 8002d76:	e01b      	b.n	8002db0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d78:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <HAL_RCC_OscConfig+0x248>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7e:	f7fe fc9b 	bl	80016b8 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d84:	e00e      	b.n	8002da4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d86:	f7fe fc97 	bl	80016b8 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d907      	bls.n	8002da4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e150      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	42470000 	.word	0x42470000
 8002da0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da4:	4b88      	ldr	r3, [pc, #544]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1ea      	bne.n	8002d86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8097 	beq.w	8002eec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc2:	4b81      	ldr	r3, [pc, #516]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10f      	bne.n	8002dee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	4b7d      	ldr	r3, [pc, #500]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	4a7c      	ldr	r2, [pc, #496]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dde:	4b7a      	ldr	r3, [pc, #488]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dee:	4b77      	ldr	r3, [pc, #476]	; (8002fcc <HAL_RCC_OscConfig+0x474>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d118      	bne.n	8002e2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfa:	4b74      	ldr	r3, [pc, #464]	; (8002fcc <HAL_RCC_OscConfig+0x474>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a73      	ldr	r2, [pc, #460]	; (8002fcc <HAL_RCC_OscConfig+0x474>)
 8002e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e06:	f7fe fc57 	bl	80016b8 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0e:	f7fe fc53 	bl	80016b8 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e10c      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e20:	4b6a      	ldr	r3, [pc, #424]	; (8002fcc <HAL_RCC_OscConfig+0x474>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d106      	bne.n	8002e42 <HAL_RCC_OscConfig+0x2ea>
 8002e34:	4b64      	ldr	r3, [pc, #400]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	4a63      	ldr	r2, [pc, #396]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e40:	e01c      	b.n	8002e7c <HAL_RCC_OscConfig+0x324>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x30c>
 8002e4a:	4b5f      	ldr	r3, [pc, #380]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	4a5e      	ldr	r2, [pc, #376]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e50:	f043 0304 	orr.w	r3, r3, #4
 8002e54:	6713      	str	r3, [r2, #112]	; 0x70
 8002e56:	4b5c      	ldr	r3, [pc, #368]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	4a5b      	ldr	r2, [pc, #364]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	6713      	str	r3, [r2, #112]	; 0x70
 8002e62:	e00b      	b.n	8002e7c <HAL_RCC_OscConfig+0x324>
 8002e64:	4b58      	ldr	r3, [pc, #352]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4a57      	ldr	r2, [pc, #348]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e6a:	f023 0301 	bic.w	r3, r3, #1
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e70:	4b55      	ldr	r3, [pc, #340]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	4a54      	ldr	r2, [pc, #336]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e76:	f023 0304 	bic.w	r3, r3, #4
 8002e7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d015      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fe fc18 	bl	80016b8 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8c:	f7fe fc14 	bl	80016b8 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e0cb      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea2:	4b49      	ldr	r3, [pc, #292]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0ee      	beq.n	8002e8c <HAL_RCC_OscConfig+0x334>
 8002eae:	e014      	b.n	8002eda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb0:	f7fe fc02 	bl	80016b8 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb6:	e00a      	b.n	8002ece <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7fe fbfe 	bl	80016b8 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e0b5      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ece:	4b3e      	ldr	r3, [pc, #248]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1ee      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eda:	7dfb      	ldrb	r3, [r7, #23]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d105      	bne.n	8002eec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee0:	4b39      	ldr	r3, [pc, #228]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	4a38      	ldr	r2, [pc, #224]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 80a1 	beq.w	8003038 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ef6:	4b34      	ldr	r3, [pc, #208]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d05c      	beq.n	8002fbc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d141      	bne.n	8002f8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0a:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <HAL_RCC_OscConfig+0x478>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fe fbd2 	bl	80016b8 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f18:	f7fe fbce 	bl	80016b8 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e087      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	4b27      	ldr	r3, [pc, #156]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69da      	ldr	r2, [r3, #28]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	019b      	lsls	r3, r3, #6
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	085b      	lsrs	r3, r3, #1
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	041b      	lsls	r3, r3, #16
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	061b      	lsls	r3, r3, #24
 8002f5a:	491b      	ldr	r1, [pc, #108]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f60:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <HAL_RCC_OscConfig+0x478>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f66:	f7fe fba7 	bl	80016b8 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6e:	f7fe fba3 	bl	80016b8 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e05c      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f80:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x416>
 8002f8c:	e054      	b.n	8003038 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <HAL_RCC_OscConfig+0x478>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fe fb90 	bl	80016b8 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9c:	f7fe fb8c 	bl	80016b8 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e045      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x444>
 8002fba:	e03d      	b.n	8003038 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e038      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40007000 	.word	0x40007000
 8002fd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_RCC_OscConfig+0x4ec>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d028      	beq.n	8003034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d121      	bne.n	8003034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d11a      	bne.n	8003034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003004:	4013      	ands	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800300a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800300c:	4293      	cmp	r3, r2
 800300e:	d111      	bne.n	8003034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301a:	085b      	lsrs	r3, r3, #1
 800301c:	3b01      	subs	r3, #1
 800301e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d107      	bne.n	8003034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d001      	beq.n	8003038 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800

08003048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0cc      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800305c:	4b68      	ldr	r3, [pc, #416]	; (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d90c      	bls.n	8003084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b65      	ldr	r3, [pc, #404]	; (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b63      	ldr	r3, [pc, #396]	; (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0b8      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d020      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800309c:	4b59      	ldr	r3, [pc, #356]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4a58      	ldr	r2, [pc, #352]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b4:	4b53      	ldr	r3, [pc, #332]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4a52      	ldr	r2, [pc, #328]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c0:	4b50      	ldr	r3, [pc, #320]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	494d      	ldr	r1, [pc, #308]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d044      	beq.n	8003168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d107      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	4b47      	ldr	r3, [pc, #284]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d119      	bne.n	8003126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e07f      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d003      	beq.n	8003106 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003102:	2b03      	cmp	r3, #3
 8003104:	d107      	bne.n	8003116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003106:	4b3f      	ldr	r3, [pc, #252]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e06f      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003116:	4b3b      	ldr	r3, [pc, #236]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e067      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003126:	4b37      	ldr	r3, [pc, #220]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f023 0203 	bic.w	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4934      	ldr	r1, [pc, #208]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	4313      	orrs	r3, r2
 8003136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003138:	f7fe fabe 	bl	80016b8 <HAL_GetTick>
 800313c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313e:	e00a      	b.n	8003156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003140:	f7fe faba 	bl	80016b8 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	; 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e04f      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003156:	4b2b      	ldr	r3, [pc, #172]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 020c 	and.w	r2, r3, #12
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	429a      	cmp	r2, r3
 8003166:	d1eb      	bne.n	8003140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003168:	4b25      	ldr	r3, [pc, #148]	; (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d20c      	bcs.n	8003190 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	4b22      	ldr	r3, [pc, #136]	; (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800317e:	4b20      	ldr	r3, [pc, #128]	; (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d001      	beq.n	8003190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e032      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800319c:	4b19      	ldr	r3, [pc, #100]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4916      	ldr	r1, [pc, #88]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ba:	4b12      	ldr	r3, [pc, #72]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	490e      	ldr	r1, [pc, #56]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ce:	f000 f821 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 80031d2:	4602      	mov	r2, r0
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	490a      	ldr	r1, [pc, #40]	; (8003208 <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	5ccb      	ldrb	r3, [r1, r3]
 80031e2:	fa22 f303 	lsr.w	r3, r2, r3
 80031e6:	4a09      	ldr	r2, [pc, #36]	; (800320c <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031ea:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_RCC_ClockConfig+0x1c8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe fa1e 	bl	8001630 <HAL_InitTick>

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40023c00 	.word	0x40023c00
 8003204:	40023800 	.word	0x40023800
 8003208:	08004844 	.word	0x08004844
 800320c:	20000084 	.word	0x20000084
 8003210:	20000088 	.word	0x20000088

08003214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003218:	b094      	sub	sp, #80	; 0x50
 800321a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800322c:	4b79      	ldr	r3, [pc, #484]	; (8003414 <HAL_RCC_GetSysClockFreq+0x200>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 030c 	and.w	r3, r3, #12
 8003234:	2b08      	cmp	r3, #8
 8003236:	d00d      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0x40>
 8003238:	2b08      	cmp	r3, #8
 800323a:	f200 80e1 	bhi.w	8003400 <HAL_RCC_GetSysClockFreq+0x1ec>
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_RCC_GetSysClockFreq+0x34>
 8003242:	2b04      	cmp	r3, #4
 8003244:	d003      	beq.n	800324e <HAL_RCC_GetSysClockFreq+0x3a>
 8003246:	e0db      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003248:	4b73      	ldr	r3, [pc, #460]	; (8003418 <HAL_RCC_GetSysClockFreq+0x204>)
 800324a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800324c:	e0db      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800324e:	4b73      	ldr	r3, [pc, #460]	; (800341c <HAL_RCC_GetSysClockFreq+0x208>)
 8003250:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003252:	e0d8      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003254:	4b6f      	ldr	r3, [pc, #444]	; (8003414 <HAL_RCC_GetSysClockFreq+0x200>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800325c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800325e:	4b6d      	ldr	r3, [pc, #436]	; (8003414 <HAL_RCC_GetSysClockFreq+0x200>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d063      	beq.n	8003332 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800326a:	4b6a      	ldr	r3, [pc, #424]	; (8003414 <HAL_RCC_GetSysClockFreq+0x200>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	099b      	lsrs	r3, r3, #6
 8003270:	2200      	movs	r2, #0
 8003272:	63bb      	str	r3, [r7, #56]	; 0x38
 8003274:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800327c:	633b      	str	r3, [r7, #48]	; 0x30
 800327e:	2300      	movs	r3, #0
 8003280:	637b      	str	r3, [r7, #52]	; 0x34
 8003282:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003286:	4622      	mov	r2, r4
 8003288:	462b      	mov	r3, r5
 800328a:	f04f 0000 	mov.w	r0, #0
 800328e:	f04f 0100 	mov.w	r1, #0
 8003292:	0159      	lsls	r1, r3, #5
 8003294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003298:	0150      	lsls	r0, r2, #5
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4621      	mov	r1, r4
 80032a0:	1a51      	subs	r1, r2, r1
 80032a2:	6139      	str	r1, [r7, #16]
 80032a4:	4629      	mov	r1, r5
 80032a6:	eb63 0301 	sbc.w	r3, r3, r1
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032b8:	4659      	mov	r1, fp
 80032ba:	018b      	lsls	r3, r1, #6
 80032bc:	4651      	mov	r1, sl
 80032be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032c2:	4651      	mov	r1, sl
 80032c4:	018a      	lsls	r2, r1, #6
 80032c6:	4651      	mov	r1, sl
 80032c8:	ebb2 0801 	subs.w	r8, r2, r1
 80032cc:	4659      	mov	r1, fp
 80032ce:	eb63 0901 	sbc.w	r9, r3, r1
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032e6:	4690      	mov	r8, r2
 80032e8:	4699      	mov	r9, r3
 80032ea:	4623      	mov	r3, r4
 80032ec:	eb18 0303 	adds.w	r3, r8, r3
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	462b      	mov	r3, r5
 80032f4:	eb49 0303 	adc.w	r3, r9, r3
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003306:	4629      	mov	r1, r5
 8003308:	024b      	lsls	r3, r1, #9
 800330a:	4621      	mov	r1, r4
 800330c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003310:	4621      	mov	r1, r4
 8003312:	024a      	lsls	r2, r1, #9
 8003314:	4610      	mov	r0, r2
 8003316:	4619      	mov	r1, r3
 8003318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800331a:	2200      	movs	r2, #0
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28
 800331e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003320:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003324:	f7fc ffb4 	bl	8000290 <__aeabi_uldivmod>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4613      	mov	r3, r2
 800332e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003330:	e058      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003332:	4b38      	ldr	r3, [pc, #224]	; (8003414 <HAL_RCC_GetSysClockFreq+0x200>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	099b      	lsrs	r3, r3, #6
 8003338:	2200      	movs	r2, #0
 800333a:	4618      	mov	r0, r3
 800333c:	4611      	mov	r1, r2
 800333e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003342:	623b      	str	r3, [r7, #32]
 8003344:	2300      	movs	r3, #0
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
 8003348:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800334c:	4642      	mov	r2, r8
 800334e:	464b      	mov	r3, r9
 8003350:	f04f 0000 	mov.w	r0, #0
 8003354:	f04f 0100 	mov.w	r1, #0
 8003358:	0159      	lsls	r1, r3, #5
 800335a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800335e:	0150      	lsls	r0, r2, #5
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4641      	mov	r1, r8
 8003366:	ebb2 0a01 	subs.w	sl, r2, r1
 800336a:	4649      	mov	r1, r9
 800336c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800337c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003380:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003384:	ebb2 040a 	subs.w	r4, r2, sl
 8003388:	eb63 050b 	sbc.w	r5, r3, fp
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	00eb      	lsls	r3, r5, #3
 8003396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800339a:	00e2      	lsls	r2, r4, #3
 800339c:	4614      	mov	r4, r2
 800339e:	461d      	mov	r5, r3
 80033a0:	4643      	mov	r3, r8
 80033a2:	18e3      	adds	r3, r4, r3
 80033a4:	603b      	str	r3, [r7, #0]
 80033a6:	464b      	mov	r3, r9
 80033a8:	eb45 0303 	adc.w	r3, r5, r3
 80033ac:	607b      	str	r3, [r7, #4]
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ba:	4629      	mov	r1, r5
 80033bc:	028b      	lsls	r3, r1, #10
 80033be:	4621      	mov	r1, r4
 80033c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033c4:	4621      	mov	r1, r4
 80033c6:	028a      	lsls	r2, r1, #10
 80033c8:	4610      	mov	r0, r2
 80033ca:	4619      	mov	r1, r3
 80033cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ce:	2200      	movs	r2, #0
 80033d0:	61bb      	str	r3, [r7, #24]
 80033d2:	61fa      	str	r2, [r7, #28]
 80033d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033d8:	f7fc ff5a 	bl	8000290 <__aeabi_uldivmod>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4613      	mov	r3, r2
 80033e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_RCC_GetSysClockFreq+0x200>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	0c1b      	lsrs	r3, r3, #16
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	3301      	adds	r3, #1
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80033f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033fe:	e002      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003400:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_RCC_GetSysClockFreq+0x204>)
 8003402:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003408:	4618      	mov	r0, r3
 800340a:	3750      	adds	r7, #80	; 0x50
 800340c:	46bd      	mov	sp, r7
 800340e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	00f42400 	.word	0x00f42400
 800341c:	007a1200 	.word	0x007a1200

08003420 <rand>:
 8003420:	4b16      	ldr	r3, [pc, #88]	; (800347c <rand+0x5c>)
 8003422:	b510      	push	{r4, lr}
 8003424:	681c      	ldr	r4, [r3, #0]
 8003426:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003428:	b9b3      	cbnz	r3, 8003458 <rand+0x38>
 800342a:	2018      	movs	r0, #24
 800342c:	f000 fa42 	bl	80038b4 <malloc>
 8003430:	4602      	mov	r2, r0
 8003432:	6320      	str	r0, [r4, #48]	; 0x30
 8003434:	b920      	cbnz	r0, 8003440 <rand+0x20>
 8003436:	4b12      	ldr	r3, [pc, #72]	; (8003480 <rand+0x60>)
 8003438:	4812      	ldr	r0, [pc, #72]	; (8003484 <rand+0x64>)
 800343a:	2152      	movs	r1, #82	; 0x52
 800343c:	f000 f9d0 	bl	80037e0 <__assert_func>
 8003440:	4911      	ldr	r1, [pc, #68]	; (8003488 <rand+0x68>)
 8003442:	4b12      	ldr	r3, [pc, #72]	; (800348c <rand+0x6c>)
 8003444:	e9c0 1300 	strd	r1, r3, [r0]
 8003448:	4b11      	ldr	r3, [pc, #68]	; (8003490 <rand+0x70>)
 800344a:	6083      	str	r3, [r0, #8]
 800344c:	230b      	movs	r3, #11
 800344e:	8183      	strh	r3, [r0, #12]
 8003450:	2100      	movs	r1, #0
 8003452:	2001      	movs	r0, #1
 8003454:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003458:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800345a:	480e      	ldr	r0, [pc, #56]	; (8003494 <rand+0x74>)
 800345c:	690b      	ldr	r3, [r1, #16]
 800345e:	694c      	ldr	r4, [r1, #20]
 8003460:	4a0d      	ldr	r2, [pc, #52]	; (8003498 <rand+0x78>)
 8003462:	4358      	muls	r0, r3
 8003464:	fb02 0004 	mla	r0, r2, r4, r0
 8003468:	fba3 3202 	umull	r3, r2, r3, r2
 800346c:	3301      	adds	r3, #1
 800346e:	eb40 0002 	adc.w	r0, r0, r2
 8003472:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003476:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800347a:	bd10      	pop	{r4, pc}
 800347c:	200000e8 	.word	0x200000e8
 8003480:	0800485c 	.word	0x0800485c
 8003484:	08004873 	.word	0x08004873
 8003488:	abcd330e 	.word	0xabcd330e
 800348c:	e66d1234 	.word	0xe66d1234
 8003490:	0005deec 	.word	0x0005deec
 8003494:	5851f42d 	.word	0x5851f42d
 8003498:	4c957f2d 	.word	0x4c957f2d

0800349c <std>:
 800349c:	2300      	movs	r3, #0
 800349e:	b510      	push	{r4, lr}
 80034a0:	4604      	mov	r4, r0
 80034a2:	e9c0 3300 	strd	r3, r3, [r0]
 80034a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034aa:	6083      	str	r3, [r0, #8]
 80034ac:	8181      	strh	r1, [r0, #12]
 80034ae:	6643      	str	r3, [r0, #100]	; 0x64
 80034b0:	81c2      	strh	r2, [r0, #14]
 80034b2:	6183      	str	r3, [r0, #24]
 80034b4:	4619      	mov	r1, r3
 80034b6:	2208      	movs	r2, #8
 80034b8:	305c      	adds	r0, #92	; 0x5c
 80034ba:	f000 f914 	bl	80036e6 <memset>
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <std+0x58>)
 80034c0:	6263      	str	r3, [r4, #36]	; 0x24
 80034c2:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <std+0x5c>)
 80034c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80034c6:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <std+0x60>)
 80034c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034ca:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <std+0x64>)
 80034cc:	6323      	str	r3, [r4, #48]	; 0x30
 80034ce:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <std+0x68>)
 80034d0:	6224      	str	r4, [r4, #32]
 80034d2:	429c      	cmp	r4, r3
 80034d4:	d006      	beq.n	80034e4 <std+0x48>
 80034d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80034da:	4294      	cmp	r4, r2
 80034dc:	d002      	beq.n	80034e4 <std+0x48>
 80034de:	33d0      	adds	r3, #208	; 0xd0
 80034e0:	429c      	cmp	r4, r3
 80034e2:	d105      	bne.n	80034f0 <std+0x54>
 80034e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80034e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ec:	f000 b974 	b.w	80037d8 <__retarget_lock_init_recursive>
 80034f0:	bd10      	pop	{r4, pc}
 80034f2:	bf00      	nop
 80034f4:	08003661 	.word	0x08003661
 80034f8:	08003683 	.word	0x08003683
 80034fc:	080036bb 	.word	0x080036bb
 8003500:	080036df 	.word	0x080036df
 8003504:	20000200 	.word	0x20000200

08003508 <stdio_exit_handler>:
 8003508:	4a02      	ldr	r2, [pc, #8]	; (8003514 <stdio_exit_handler+0xc>)
 800350a:	4903      	ldr	r1, [pc, #12]	; (8003518 <stdio_exit_handler+0x10>)
 800350c:	4803      	ldr	r0, [pc, #12]	; (800351c <stdio_exit_handler+0x14>)
 800350e:	f000 b869 	b.w	80035e4 <_fwalk_sglue>
 8003512:	bf00      	nop
 8003514:	20000090 	.word	0x20000090
 8003518:	080040f9 	.word	0x080040f9
 800351c:	2000009c 	.word	0x2000009c

08003520 <cleanup_stdio>:
 8003520:	6841      	ldr	r1, [r0, #4]
 8003522:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <cleanup_stdio+0x34>)
 8003524:	4299      	cmp	r1, r3
 8003526:	b510      	push	{r4, lr}
 8003528:	4604      	mov	r4, r0
 800352a:	d001      	beq.n	8003530 <cleanup_stdio+0x10>
 800352c:	f000 fde4 	bl	80040f8 <_fflush_r>
 8003530:	68a1      	ldr	r1, [r4, #8]
 8003532:	4b09      	ldr	r3, [pc, #36]	; (8003558 <cleanup_stdio+0x38>)
 8003534:	4299      	cmp	r1, r3
 8003536:	d002      	beq.n	800353e <cleanup_stdio+0x1e>
 8003538:	4620      	mov	r0, r4
 800353a:	f000 fddd 	bl	80040f8 <_fflush_r>
 800353e:	68e1      	ldr	r1, [r4, #12]
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <cleanup_stdio+0x3c>)
 8003542:	4299      	cmp	r1, r3
 8003544:	d004      	beq.n	8003550 <cleanup_stdio+0x30>
 8003546:	4620      	mov	r0, r4
 8003548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800354c:	f000 bdd4 	b.w	80040f8 <_fflush_r>
 8003550:	bd10      	pop	{r4, pc}
 8003552:	bf00      	nop
 8003554:	20000200 	.word	0x20000200
 8003558:	20000268 	.word	0x20000268
 800355c:	200002d0 	.word	0x200002d0

08003560 <global_stdio_init.part.0>:
 8003560:	b510      	push	{r4, lr}
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <global_stdio_init.part.0+0x30>)
 8003564:	4c0b      	ldr	r4, [pc, #44]	; (8003594 <global_stdio_init.part.0+0x34>)
 8003566:	4a0c      	ldr	r2, [pc, #48]	; (8003598 <global_stdio_init.part.0+0x38>)
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	4620      	mov	r0, r4
 800356c:	2200      	movs	r2, #0
 800356e:	2104      	movs	r1, #4
 8003570:	f7ff ff94 	bl	800349c <std>
 8003574:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003578:	2201      	movs	r2, #1
 800357a:	2109      	movs	r1, #9
 800357c:	f7ff ff8e 	bl	800349c <std>
 8003580:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003584:	2202      	movs	r2, #2
 8003586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800358a:	2112      	movs	r1, #18
 800358c:	f7ff bf86 	b.w	800349c <std>
 8003590:	20000338 	.word	0x20000338
 8003594:	20000200 	.word	0x20000200
 8003598:	08003509 	.word	0x08003509

0800359c <__sfp_lock_acquire>:
 800359c:	4801      	ldr	r0, [pc, #4]	; (80035a4 <__sfp_lock_acquire+0x8>)
 800359e:	f000 b91c 	b.w	80037da <__retarget_lock_acquire_recursive>
 80035a2:	bf00      	nop
 80035a4:	20000341 	.word	0x20000341

080035a8 <__sfp_lock_release>:
 80035a8:	4801      	ldr	r0, [pc, #4]	; (80035b0 <__sfp_lock_release+0x8>)
 80035aa:	f000 b917 	b.w	80037dc <__retarget_lock_release_recursive>
 80035ae:	bf00      	nop
 80035b0:	20000341 	.word	0x20000341

080035b4 <__sinit>:
 80035b4:	b510      	push	{r4, lr}
 80035b6:	4604      	mov	r4, r0
 80035b8:	f7ff fff0 	bl	800359c <__sfp_lock_acquire>
 80035bc:	6a23      	ldr	r3, [r4, #32]
 80035be:	b11b      	cbz	r3, 80035c8 <__sinit+0x14>
 80035c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035c4:	f7ff bff0 	b.w	80035a8 <__sfp_lock_release>
 80035c8:	4b04      	ldr	r3, [pc, #16]	; (80035dc <__sinit+0x28>)
 80035ca:	6223      	str	r3, [r4, #32]
 80035cc:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <__sinit+0x2c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f5      	bne.n	80035c0 <__sinit+0xc>
 80035d4:	f7ff ffc4 	bl	8003560 <global_stdio_init.part.0>
 80035d8:	e7f2      	b.n	80035c0 <__sinit+0xc>
 80035da:	bf00      	nop
 80035dc:	08003521 	.word	0x08003521
 80035e0:	20000338 	.word	0x20000338

080035e4 <_fwalk_sglue>:
 80035e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035e8:	4607      	mov	r7, r0
 80035ea:	4688      	mov	r8, r1
 80035ec:	4614      	mov	r4, r2
 80035ee:	2600      	movs	r6, #0
 80035f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035f4:	f1b9 0901 	subs.w	r9, r9, #1
 80035f8:	d505      	bpl.n	8003606 <_fwalk_sglue+0x22>
 80035fa:	6824      	ldr	r4, [r4, #0]
 80035fc:	2c00      	cmp	r4, #0
 80035fe:	d1f7      	bne.n	80035f0 <_fwalk_sglue+0xc>
 8003600:	4630      	mov	r0, r6
 8003602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003606:	89ab      	ldrh	r3, [r5, #12]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d907      	bls.n	800361c <_fwalk_sglue+0x38>
 800360c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003610:	3301      	adds	r3, #1
 8003612:	d003      	beq.n	800361c <_fwalk_sglue+0x38>
 8003614:	4629      	mov	r1, r5
 8003616:	4638      	mov	r0, r7
 8003618:	47c0      	blx	r8
 800361a:	4306      	orrs	r6, r0
 800361c:	3568      	adds	r5, #104	; 0x68
 800361e:	e7e9      	b.n	80035f4 <_fwalk_sglue+0x10>

08003620 <siprintf>:
 8003620:	b40e      	push	{r1, r2, r3}
 8003622:	b500      	push	{lr}
 8003624:	b09c      	sub	sp, #112	; 0x70
 8003626:	ab1d      	add	r3, sp, #116	; 0x74
 8003628:	9002      	str	r0, [sp, #8]
 800362a:	9006      	str	r0, [sp, #24]
 800362c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003630:	4809      	ldr	r0, [pc, #36]	; (8003658 <siprintf+0x38>)
 8003632:	9107      	str	r1, [sp, #28]
 8003634:	9104      	str	r1, [sp, #16]
 8003636:	4909      	ldr	r1, [pc, #36]	; (800365c <siprintf+0x3c>)
 8003638:	f853 2b04 	ldr.w	r2, [r3], #4
 800363c:	9105      	str	r1, [sp, #20]
 800363e:	6800      	ldr	r0, [r0, #0]
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	a902      	add	r1, sp, #8
 8003644:	f000 fa44 	bl	8003ad0 <_svfiprintf_r>
 8003648:	9b02      	ldr	r3, [sp, #8]
 800364a:	2200      	movs	r2, #0
 800364c:	701a      	strb	r2, [r3, #0]
 800364e:	b01c      	add	sp, #112	; 0x70
 8003650:	f85d eb04 	ldr.w	lr, [sp], #4
 8003654:	b003      	add	sp, #12
 8003656:	4770      	bx	lr
 8003658:	200000e8 	.word	0x200000e8
 800365c:	ffff0208 	.word	0xffff0208

08003660 <__sread>:
 8003660:	b510      	push	{r4, lr}
 8003662:	460c      	mov	r4, r1
 8003664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003668:	f000 f868 	bl	800373c <_read_r>
 800366c:	2800      	cmp	r0, #0
 800366e:	bfab      	itete	ge
 8003670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003672:	89a3      	ldrhlt	r3, [r4, #12]
 8003674:	181b      	addge	r3, r3, r0
 8003676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800367a:	bfac      	ite	ge
 800367c:	6563      	strge	r3, [r4, #84]	; 0x54
 800367e:	81a3      	strhlt	r3, [r4, #12]
 8003680:	bd10      	pop	{r4, pc}

08003682 <__swrite>:
 8003682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003686:	461f      	mov	r7, r3
 8003688:	898b      	ldrh	r3, [r1, #12]
 800368a:	05db      	lsls	r3, r3, #23
 800368c:	4605      	mov	r5, r0
 800368e:	460c      	mov	r4, r1
 8003690:	4616      	mov	r6, r2
 8003692:	d505      	bpl.n	80036a0 <__swrite+0x1e>
 8003694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003698:	2302      	movs	r3, #2
 800369a:	2200      	movs	r2, #0
 800369c:	f000 f83c 	bl	8003718 <_lseek_r>
 80036a0:	89a3      	ldrh	r3, [r4, #12]
 80036a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036aa:	81a3      	strh	r3, [r4, #12]
 80036ac:	4632      	mov	r2, r6
 80036ae:	463b      	mov	r3, r7
 80036b0:	4628      	mov	r0, r5
 80036b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036b6:	f000 b853 	b.w	8003760 <_write_r>

080036ba <__sseek>:
 80036ba:	b510      	push	{r4, lr}
 80036bc:	460c      	mov	r4, r1
 80036be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036c2:	f000 f829 	bl	8003718 <_lseek_r>
 80036c6:	1c43      	adds	r3, r0, #1
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	bf15      	itete	ne
 80036cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80036ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036d6:	81a3      	strheq	r3, [r4, #12]
 80036d8:	bf18      	it	ne
 80036da:	81a3      	strhne	r3, [r4, #12]
 80036dc:	bd10      	pop	{r4, pc}

080036de <__sclose>:
 80036de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036e2:	f000 b809 	b.w	80036f8 <_close_r>

080036e6 <memset>:
 80036e6:	4402      	add	r2, r0
 80036e8:	4603      	mov	r3, r0
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d100      	bne.n	80036f0 <memset+0xa>
 80036ee:	4770      	bx	lr
 80036f0:	f803 1b01 	strb.w	r1, [r3], #1
 80036f4:	e7f9      	b.n	80036ea <memset+0x4>
	...

080036f8 <_close_r>:
 80036f8:	b538      	push	{r3, r4, r5, lr}
 80036fa:	4d06      	ldr	r5, [pc, #24]	; (8003714 <_close_r+0x1c>)
 80036fc:	2300      	movs	r3, #0
 80036fe:	4604      	mov	r4, r0
 8003700:	4608      	mov	r0, r1
 8003702:	602b      	str	r3, [r5, #0]
 8003704:	f7fd fecb 	bl	800149e <_close>
 8003708:	1c43      	adds	r3, r0, #1
 800370a:	d102      	bne.n	8003712 <_close_r+0x1a>
 800370c:	682b      	ldr	r3, [r5, #0]
 800370e:	b103      	cbz	r3, 8003712 <_close_r+0x1a>
 8003710:	6023      	str	r3, [r4, #0]
 8003712:	bd38      	pop	{r3, r4, r5, pc}
 8003714:	2000033c 	.word	0x2000033c

08003718 <_lseek_r>:
 8003718:	b538      	push	{r3, r4, r5, lr}
 800371a:	4d07      	ldr	r5, [pc, #28]	; (8003738 <_lseek_r+0x20>)
 800371c:	4604      	mov	r4, r0
 800371e:	4608      	mov	r0, r1
 8003720:	4611      	mov	r1, r2
 8003722:	2200      	movs	r2, #0
 8003724:	602a      	str	r2, [r5, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	f7fd fee0 	bl	80014ec <_lseek>
 800372c:	1c43      	adds	r3, r0, #1
 800372e:	d102      	bne.n	8003736 <_lseek_r+0x1e>
 8003730:	682b      	ldr	r3, [r5, #0]
 8003732:	b103      	cbz	r3, 8003736 <_lseek_r+0x1e>
 8003734:	6023      	str	r3, [r4, #0]
 8003736:	bd38      	pop	{r3, r4, r5, pc}
 8003738:	2000033c 	.word	0x2000033c

0800373c <_read_r>:
 800373c:	b538      	push	{r3, r4, r5, lr}
 800373e:	4d07      	ldr	r5, [pc, #28]	; (800375c <_read_r+0x20>)
 8003740:	4604      	mov	r4, r0
 8003742:	4608      	mov	r0, r1
 8003744:	4611      	mov	r1, r2
 8003746:	2200      	movs	r2, #0
 8003748:	602a      	str	r2, [r5, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	f7fd fe6e 	bl	800142c <_read>
 8003750:	1c43      	adds	r3, r0, #1
 8003752:	d102      	bne.n	800375a <_read_r+0x1e>
 8003754:	682b      	ldr	r3, [r5, #0]
 8003756:	b103      	cbz	r3, 800375a <_read_r+0x1e>
 8003758:	6023      	str	r3, [r4, #0]
 800375a:	bd38      	pop	{r3, r4, r5, pc}
 800375c:	2000033c 	.word	0x2000033c

08003760 <_write_r>:
 8003760:	b538      	push	{r3, r4, r5, lr}
 8003762:	4d07      	ldr	r5, [pc, #28]	; (8003780 <_write_r+0x20>)
 8003764:	4604      	mov	r4, r0
 8003766:	4608      	mov	r0, r1
 8003768:	4611      	mov	r1, r2
 800376a:	2200      	movs	r2, #0
 800376c:	602a      	str	r2, [r5, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	f7fd fe79 	bl	8001466 <_write>
 8003774:	1c43      	adds	r3, r0, #1
 8003776:	d102      	bne.n	800377e <_write_r+0x1e>
 8003778:	682b      	ldr	r3, [r5, #0]
 800377a:	b103      	cbz	r3, 800377e <_write_r+0x1e>
 800377c:	6023      	str	r3, [r4, #0]
 800377e:	bd38      	pop	{r3, r4, r5, pc}
 8003780:	2000033c 	.word	0x2000033c

08003784 <__errno>:
 8003784:	4b01      	ldr	r3, [pc, #4]	; (800378c <__errno+0x8>)
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	200000e8 	.word	0x200000e8

08003790 <__libc_init_array>:
 8003790:	b570      	push	{r4, r5, r6, lr}
 8003792:	4d0d      	ldr	r5, [pc, #52]	; (80037c8 <__libc_init_array+0x38>)
 8003794:	4c0d      	ldr	r4, [pc, #52]	; (80037cc <__libc_init_array+0x3c>)
 8003796:	1b64      	subs	r4, r4, r5
 8003798:	10a4      	asrs	r4, r4, #2
 800379a:	2600      	movs	r6, #0
 800379c:	42a6      	cmp	r6, r4
 800379e:	d109      	bne.n	80037b4 <__libc_init_array+0x24>
 80037a0:	4d0b      	ldr	r5, [pc, #44]	; (80037d0 <__libc_init_array+0x40>)
 80037a2:	4c0c      	ldr	r4, [pc, #48]	; (80037d4 <__libc_init_array+0x44>)
 80037a4:	f000 fffa 	bl	800479c <_init>
 80037a8:	1b64      	subs	r4, r4, r5
 80037aa:	10a4      	asrs	r4, r4, #2
 80037ac:	2600      	movs	r6, #0
 80037ae:	42a6      	cmp	r6, r4
 80037b0:	d105      	bne.n	80037be <__libc_init_array+0x2e>
 80037b2:	bd70      	pop	{r4, r5, r6, pc}
 80037b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b8:	4798      	blx	r3
 80037ba:	3601      	adds	r6, #1
 80037bc:	e7ee      	b.n	800379c <__libc_init_array+0xc>
 80037be:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c2:	4798      	blx	r3
 80037c4:	3601      	adds	r6, #1
 80037c6:	e7f2      	b.n	80037ae <__libc_init_array+0x1e>
 80037c8:	08004944 	.word	0x08004944
 80037cc:	08004944 	.word	0x08004944
 80037d0:	08004944 	.word	0x08004944
 80037d4:	08004948 	.word	0x08004948

080037d8 <__retarget_lock_init_recursive>:
 80037d8:	4770      	bx	lr

080037da <__retarget_lock_acquire_recursive>:
 80037da:	4770      	bx	lr

080037dc <__retarget_lock_release_recursive>:
 80037dc:	4770      	bx	lr
	...

080037e0 <__assert_func>:
 80037e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80037e2:	4614      	mov	r4, r2
 80037e4:	461a      	mov	r2, r3
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <__assert_func+0x2c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4605      	mov	r5, r0
 80037ec:	68d8      	ldr	r0, [r3, #12]
 80037ee:	b14c      	cbz	r4, 8003804 <__assert_func+0x24>
 80037f0:	4b07      	ldr	r3, [pc, #28]	; (8003810 <__assert_func+0x30>)
 80037f2:	9100      	str	r1, [sp, #0]
 80037f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80037f8:	4906      	ldr	r1, [pc, #24]	; (8003814 <__assert_func+0x34>)
 80037fa:	462b      	mov	r3, r5
 80037fc:	f000 fca4 	bl	8004148 <fiprintf>
 8003800:	f000 fcec 	bl	80041dc <abort>
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <__assert_func+0x38>)
 8003806:	461c      	mov	r4, r3
 8003808:	e7f3      	b.n	80037f2 <__assert_func+0x12>
 800380a:	bf00      	nop
 800380c:	200000e8 	.word	0x200000e8
 8003810:	080048cb 	.word	0x080048cb
 8003814:	080048d8 	.word	0x080048d8
 8003818:	08004906 	.word	0x08004906

0800381c <_free_r>:
 800381c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800381e:	2900      	cmp	r1, #0
 8003820:	d044      	beq.n	80038ac <_free_r+0x90>
 8003822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003826:	9001      	str	r0, [sp, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	f1a1 0404 	sub.w	r4, r1, #4
 800382e:	bfb8      	it	lt
 8003830:	18e4      	addlt	r4, r4, r3
 8003832:	f000 f8e7 	bl	8003a04 <__malloc_lock>
 8003836:	4a1e      	ldr	r2, [pc, #120]	; (80038b0 <_free_r+0x94>)
 8003838:	9801      	ldr	r0, [sp, #4]
 800383a:	6813      	ldr	r3, [r2, #0]
 800383c:	b933      	cbnz	r3, 800384c <_free_r+0x30>
 800383e:	6063      	str	r3, [r4, #4]
 8003840:	6014      	str	r4, [r2, #0]
 8003842:	b003      	add	sp, #12
 8003844:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003848:	f000 b8e2 	b.w	8003a10 <__malloc_unlock>
 800384c:	42a3      	cmp	r3, r4
 800384e:	d908      	bls.n	8003862 <_free_r+0x46>
 8003850:	6825      	ldr	r5, [r4, #0]
 8003852:	1961      	adds	r1, r4, r5
 8003854:	428b      	cmp	r3, r1
 8003856:	bf01      	itttt	eq
 8003858:	6819      	ldreq	r1, [r3, #0]
 800385a:	685b      	ldreq	r3, [r3, #4]
 800385c:	1949      	addeq	r1, r1, r5
 800385e:	6021      	streq	r1, [r4, #0]
 8003860:	e7ed      	b.n	800383e <_free_r+0x22>
 8003862:	461a      	mov	r2, r3
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	b10b      	cbz	r3, 800386c <_free_r+0x50>
 8003868:	42a3      	cmp	r3, r4
 800386a:	d9fa      	bls.n	8003862 <_free_r+0x46>
 800386c:	6811      	ldr	r1, [r2, #0]
 800386e:	1855      	adds	r5, r2, r1
 8003870:	42a5      	cmp	r5, r4
 8003872:	d10b      	bne.n	800388c <_free_r+0x70>
 8003874:	6824      	ldr	r4, [r4, #0]
 8003876:	4421      	add	r1, r4
 8003878:	1854      	adds	r4, r2, r1
 800387a:	42a3      	cmp	r3, r4
 800387c:	6011      	str	r1, [r2, #0]
 800387e:	d1e0      	bne.n	8003842 <_free_r+0x26>
 8003880:	681c      	ldr	r4, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	6053      	str	r3, [r2, #4]
 8003886:	440c      	add	r4, r1
 8003888:	6014      	str	r4, [r2, #0]
 800388a:	e7da      	b.n	8003842 <_free_r+0x26>
 800388c:	d902      	bls.n	8003894 <_free_r+0x78>
 800388e:	230c      	movs	r3, #12
 8003890:	6003      	str	r3, [r0, #0]
 8003892:	e7d6      	b.n	8003842 <_free_r+0x26>
 8003894:	6825      	ldr	r5, [r4, #0]
 8003896:	1961      	adds	r1, r4, r5
 8003898:	428b      	cmp	r3, r1
 800389a:	bf04      	itt	eq
 800389c:	6819      	ldreq	r1, [r3, #0]
 800389e:	685b      	ldreq	r3, [r3, #4]
 80038a0:	6063      	str	r3, [r4, #4]
 80038a2:	bf04      	itt	eq
 80038a4:	1949      	addeq	r1, r1, r5
 80038a6:	6021      	streq	r1, [r4, #0]
 80038a8:	6054      	str	r4, [r2, #4]
 80038aa:	e7ca      	b.n	8003842 <_free_r+0x26>
 80038ac:	b003      	add	sp, #12
 80038ae:	bd30      	pop	{r4, r5, pc}
 80038b0:	20000344 	.word	0x20000344

080038b4 <malloc>:
 80038b4:	4b02      	ldr	r3, [pc, #8]	; (80038c0 <malloc+0xc>)
 80038b6:	4601      	mov	r1, r0
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	f000 b823 	b.w	8003904 <_malloc_r>
 80038be:	bf00      	nop
 80038c0:	200000e8 	.word	0x200000e8

080038c4 <sbrk_aligned>:
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	4e0e      	ldr	r6, [pc, #56]	; (8003900 <sbrk_aligned+0x3c>)
 80038c8:	460c      	mov	r4, r1
 80038ca:	6831      	ldr	r1, [r6, #0]
 80038cc:	4605      	mov	r5, r0
 80038ce:	b911      	cbnz	r1, 80038d6 <sbrk_aligned+0x12>
 80038d0:	f000 fc66 	bl	80041a0 <_sbrk_r>
 80038d4:	6030      	str	r0, [r6, #0]
 80038d6:	4621      	mov	r1, r4
 80038d8:	4628      	mov	r0, r5
 80038da:	f000 fc61 	bl	80041a0 <_sbrk_r>
 80038de:	1c43      	adds	r3, r0, #1
 80038e0:	d00a      	beq.n	80038f8 <sbrk_aligned+0x34>
 80038e2:	1cc4      	adds	r4, r0, #3
 80038e4:	f024 0403 	bic.w	r4, r4, #3
 80038e8:	42a0      	cmp	r0, r4
 80038ea:	d007      	beq.n	80038fc <sbrk_aligned+0x38>
 80038ec:	1a21      	subs	r1, r4, r0
 80038ee:	4628      	mov	r0, r5
 80038f0:	f000 fc56 	bl	80041a0 <_sbrk_r>
 80038f4:	3001      	adds	r0, #1
 80038f6:	d101      	bne.n	80038fc <sbrk_aligned+0x38>
 80038f8:	f04f 34ff 	mov.w	r4, #4294967295
 80038fc:	4620      	mov	r0, r4
 80038fe:	bd70      	pop	{r4, r5, r6, pc}
 8003900:	20000348 	.word	0x20000348

08003904 <_malloc_r>:
 8003904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003908:	1ccd      	adds	r5, r1, #3
 800390a:	f025 0503 	bic.w	r5, r5, #3
 800390e:	3508      	adds	r5, #8
 8003910:	2d0c      	cmp	r5, #12
 8003912:	bf38      	it	cc
 8003914:	250c      	movcc	r5, #12
 8003916:	2d00      	cmp	r5, #0
 8003918:	4607      	mov	r7, r0
 800391a:	db01      	blt.n	8003920 <_malloc_r+0x1c>
 800391c:	42a9      	cmp	r1, r5
 800391e:	d905      	bls.n	800392c <_malloc_r+0x28>
 8003920:	230c      	movs	r3, #12
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	2600      	movs	r6, #0
 8003926:	4630      	mov	r0, r6
 8003928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800392c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a00 <_malloc_r+0xfc>
 8003930:	f000 f868 	bl	8003a04 <__malloc_lock>
 8003934:	f8d8 3000 	ldr.w	r3, [r8]
 8003938:	461c      	mov	r4, r3
 800393a:	bb5c      	cbnz	r4, 8003994 <_malloc_r+0x90>
 800393c:	4629      	mov	r1, r5
 800393e:	4638      	mov	r0, r7
 8003940:	f7ff ffc0 	bl	80038c4 <sbrk_aligned>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	4604      	mov	r4, r0
 8003948:	d155      	bne.n	80039f6 <_malloc_r+0xf2>
 800394a:	f8d8 4000 	ldr.w	r4, [r8]
 800394e:	4626      	mov	r6, r4
 8003950:	2e00      	cmp	r6, #0
 8003952:	d145      	bne.n	80039e0 <_malloc_r+0xdc>
 8003954:	2c00      	cmp	r4, #0
 8003956:	d048      	beq.n	80039ea <_malloc_r+0xe6>
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	4631      	mov	r1, r6
 800395c:	4638      	mov	r0, r7
 800395e:	eb04 0903 	add.w	r9, r4, r3
 8003962:	f000 fc1d 	bl	80041a0 <_sbrk_r>
 8003966:	4581      	cmp	r9, r0
 8003968:	d13f      	bne.n	80039ea <_malloc_r+0xe6>
 800396a:	6821      	ldr	r1, [r4, #0]
 800396c:	1a6d      	subs	r5, r5, r1
 800396e:	4629      	mov	r1, r5
 8003970:	4638      	mov	r0, r7
 8003972:	f7ff ffa7 	bl	80038c4 <sbrk_aligned>
 8003976:	3001      	adds	r0, #1
 8003978:	d037      	beq.n	80039ea <_malloc_r+0xe6>
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	442b      	add	r3, r5
 800397e:	6023      	str	r3, [r4, #0]
 8003980:	f8d8 3000 	ldr.w	r3, [r8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d038      	beq.n	80039fa <_malloc_r+0xf6>
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	42a2      	cmp	r2, r4
 800398c:	d12b      	bne.n	80039e6 <_malloc_r+0xe2>
 800398e:	2200      	movs	r2, #0
 8003990:	605a      	str	r2, [r3, #4]
 8003992:	e00f      	b.n	80039b4 <_malloc_r+0xb0>
 8003994:	6822      	ldr	r2, [r4, #0]
 8003996:	1b52      	subs	r2, r2, r5
 8003998:	d41f      	bmi.n	80039da <_malloc_r+0xd6>
 800399a:	2a0b      	cmp	r2, #11
 800399c:	d917      	bls.n	80039ce <_malloc_r+0xca>
 800399e:	1961      	adds	r1, r4, r5
 80039a0:	42a3      	cmp	r3, r4
 80039a2:	6025      	str	r5, [r4, #0]
 80039a4:	bf18      	it	ne
 80039a6:	6059      	strne	r1, [r3, #4]
 80039a8:	6863      	ldr	r3, [r4, #4]
 80039aa:	bf08      	it	eq
 80039ac:	f8c8 1000 	streq.w	r1, [r8]
 80039b0:	5162      	str	r2, [r4, r5]
 80039b2:	604b      	str	r3, [r1, #4]
 80039b4:	4638      	mov	r0, r7
 80039b6:	f104 060b 	add.w	r6, r4, #11
 80039ba:	f000 f829 	bl	8003a10 <__malloc_unlock>
 80039be:	f026 0607 	bic.w	r6, r6, #7
 80039c2:	1d23      	adds	r3, r4, #4
 80039c4:	1af2      	subs	r2, r6, r3
 80039c6:	d0ae      	beq.n	8003926 <_malloc_r+0x22>
 80039c8:	1b9b      	subs	r3, r3, r6
 80039ca:	50a3      	str	r3, [r4, r2]
 80039cc:	e7ab      	b.n	8003926 <_malloc_r+0x22>
 80039ce:	42a3      	cmp	r3, r4
 80039d0:	6862      	ldr	r2, [r4, #4]
 80039d2:	d1dd      	bne.n	8003990 <_malloc_r+0x8c>
 80039d4:	f8c8 2000 	str.w	r2, [r8]
 80039d8:	e7ec      	b.n	80039b4 <_malloc_r+0xb0>
 80039da:	4623      	mov	r3, r4
 80039dc:	6864      	ldr	r4, [r4, #4]
 80039de:	e7ac      	b.n	800393a <_malloc_r+0x36>
 80039e0:	4634      	mov	r4, r6
 80039e2:	6876      	ldr	r6, [r6, #4]
 80039e4:	e7b4      	b.n	8003950 <_malloc_r+0x4c>
 80039e6:	4613      	mov	r3, r2
 80039e8:	e7cc      	b.n	8003984 <_malloc_r+0x80>
 80039ea:	230c      	movs	r3, #12
 80039ec:	603b      	str	r3, [r7, #0]
 80039ee:	4638      	mov	r0, r7
 80039f0:	f000 f80e 	bl	8003a10 <__malloc_unlock>
 80039f4:	e797      	b.n	8003926 <_malloc_r+0x22>
 80039f6:	6025      	str	r5, [r4, #0]
 80039f8:	e7dc      	b.n	80039b4 <_malloc_r+0xb0>
 80039fa:	605b      	str	r3, [r3, #4]
 80039fc:	deff      	udf	#255	; 0xff
 80039fe:	bf00      	nop
 8003a00:	20000344 	.word	0x20000344

08003a04 <__malloc_lock>:
 8003a04:	4801      	ldr	r0, [pc, #4]	; (8003a0c <__malloc_lock+0x8>)
 8003a06:	f7ff bee8 	b.w	80037da <__retarget_lock_acquire_recursive>
 8003a0a:	bf00      	nop
 8003a0c:	20000340 	.word	0x20000340

08003a10 <__malloc_unlock>:
 8003a10:	4801      	ldr	r0, [pc, #4]	; (8003a18 <__malloc_unlock+0x8>)
 8003a12:	f7ff bee3 	b.w	80037dc <__retarget_lock_release_recursive>
 8003a16:	bf00      	nop
 8003a18:	20000340 	.word	0x20000340

08003a1c <__ssputs_r>:
 8003a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a20:	688e      	ldr	r6, [r1, #8]
 8003a22:	461f      	mov	r7, r3
 8003a24:	42be      	cmp	r6, r7
 8003a26:	680b      	ldr	r3, [r1, #0]
 8003a28:	4682      	mov	sl, r0
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	4690      	mov	r8, r2
 8003a2e:	d82c      	bhi.n	8003a8a <__ssputs_r+0x6e>
 8003a30:	898a      	ldrh	r2, [r1, #12]
 8003a32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a36:	d026      	beq.n	8003a86 <__ssputs_r+0x6a>
 8003a38:	6965      	ldr	r5, [r4, #20]
 8003a3a:	6909      	ldr	r1, [r1, #16]
 8003a3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a40:	eba3 0901 	sub.w	r9, r3, r1
 8003a44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a48:	1c7b      	adds	r3, r7, #1
 8003a4a:	444b      	add	r3, r9
 8003a4c:	106d      	asrs	r5, r5, #1
 8003a4e:	429d      	cmp	r5, r3
 8003a50:	bf38      	it	cc
 8003a52:	461d      	movcc	r5, r3
 8003a54:	0553      	lsls	r3, r2, #21
 8003a56:	d527      	bpl.n	8003aa8 <__ssputs_r+0x8c>
 8003a58:	4629      	mov	r1, r5
 8003a5a:	f7ff ff53 	bl	8003904 <_malloc_r>
 8003a5e:	4606      	mov	r6, r0
 8003a60:	b360      	cbz	r0, 8003abc <__ssputs_r+0xa0>
 8003a62:	6921      	ldr	r1, [r4, #16]
 8003a64:	464a      	mov	r2, r9
 8003a66:	f000 fbab 	bl	80041c0 <memcpy>
 8003a6a:	89a3      	ldrh	r3, [r4, #12]
 8003a6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a74:	81a3      	strh	r3, [r4, #12]
 8003a76:	6126      	str	r6, [r4, #16]
 8003a78:	6165      	str	r5, [r4, #20]
 8003a7a:	444e      	add	r6, r9
 8003a7c:	eba5 0509 	sub.w	r5, r5, r9
 8003a80:	6026      	str	r6, [r4, #0]
 8003a82:	60a5      	str	r5, [r4, #8]
 8003a84:	463e      	mov	r6, r7
 8003a86:	42be      	cmp	r6, r7
 8003a88:	d900      	bls.n	8003a8c <__ssputs_r+0x70>
 8003a8a:	463e      	mov	r6, r7
 8003a8c:	6820      	ldr	r0, [r4, #0]
 8003a8e:	4632      	mov	r2, r6
 8003a90:	4641      	mov	r1, r8
 8003a92:	f000 fb6b 	bl	800416c <memmove>
 8003a96:	68a3      	ldr	r3, [r4, #8]
 8003a98:	1b9b      	subs	r3, r3, r6
 8003a9a:	60a3      	str	r3, [r4, #8]
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	4433      	add	r3, r6
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa8:	462a      	mov	r2, r5
 8003aaa:	f000 fb9e 	bl	80041ea <_realloc_r>
 8003aae:	4606      	mov	r6, r0
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	d1e0      	bne.n	8003a76 <__ssputs_r+0x5a>
 8003ab4:	6921      	ldr	r1, [r4, #16]
 8003ab6:	4650      	mov	r0, sl
 8003ab8:	f7ff feb0 	bl	800381c <_free_r>
 8003abc:	230c      	movs	r3, #12
 8003abe:	f8ca 3000 	str.w	r3, [sl]
 8003ac2:	89a3      	ldrh	r3, [r4, #12]
 8003ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ac8:	81a3      	strh	r3, [r4, #12]
 8003aca:	f04f 30ff 	mov.w	r0, #4294967295
 8003ace:	e7e9      	b.n	8003aa4 <__ssputs_r+0x88>

08003ad0 <_svfiprintf_r>:
 8003ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad4:	4698      	mov	r8, r3
 8003ad6:	898b      	ldrh	r3, [r1, #12]
 8003ad8:	061b      	lsls	r3, r3, #24
 8003ada:	b09d      	sub	sp, #116	; 0x74
 8003adc:	4607      	mov	r7, r0
 8003ade:	460d      	mov	r5, r1
 8003ae0:	4614      	mov	r4, r2
 8003ae2:	d50e      	bpl.n	8003b02 <_svfiprintf_r+0x32>
 8003ae4:	690b      	ldr	r3, [r1, #16]
 8003ae6:	b963      	cbnz	r3, 8003b02 <_svfiprintf_r+0x32>
 8003ae8:	2140      	movs	r1, #64	; 0x40
 8003aea:	f7ff ff0b 	bl	8003904 <_malloc_r>
 8003aee:	6028      	str	r0, [r5, #0]
 8003af0:	6128      	str	r0, [r5, #16]
 8003af2:	b920      	cbnz	r0, 8003afe <_svfiprintf_r+0x2e>
 8003af4:	230c      	movs	r3, #12
 8003af6:	603b      	str	r3, [r7, #0]
 8003af8:	f04f 30ff 	mov.w	r0, #4294967295
 8003afc:	e0d0      	b.n	8003ca0 <_svfiprintf_r+0x1d0>
 8003afe:	2340      	movs	r3, #64	; 0x40
 8003b00:	616b      	str	r3, [r5, #20]
 8003b02:	2300      	movs	r3, #0
 8003b04:	9309      	str	r3, [sp, #36]	; 0x24
 8003b06:	2320      	movs	r3, #32
 8003b08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b10:	2330      	movs	r3, #48	; 0x30
 8003b12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003cb8 <_svfiprintf_r+0x1e8>
 8003b16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b1a:	f04f 0901 	mov.w	r9, #1
 8003b1e:	4623      	mov	r3, r4
 8003b20:	469a      	mov	sl, r3
 8003b22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b26:	b10a      	cbz	r2, 8003b2c <_svfiprintf_r+0x5c>
 8003b28:	2a25      	cmp	r2, #37	; 0x25
 8003b2a:	d1f9      	bne.n	8003b20 <_svfiprintf_r+0x50>
 8003b2c:	ebba 0b04 	subs.w	fp, sl, r4
 8003b30:	d00b      	beq.n	8003b4a <_svfiprintf_r+0x7a>
 8003b32:	465b      	mov	r3, fp
 8003b34:	4622      	mov	r2, r4
 8003b36:	4629      	mov	r1, r5
 8003b38:	4638      	mov	r0, r7
 8003b3a:	f7ff ff6f 	bl	8003a1c <__ssputs_r>
 8003b3e:	3001      	adds	r0, #1
 8003b40:	f000 80a9 	beq.w	8003c96 <_svfiprintf_r+0x1c6>
 8003b44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b46:	445a      	add	r2, fp
 8003b48:	9209      	str	r2, [sp, #36]	; 0x24
 8003b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 80a1 	beq.w	8003c96 <_svfiprintf_r+0x1c6>
 8003b54:	2300      	movs	r3, #0
 8003b56:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b5e:	f10a 0a01 	add.w	sl, sl, #1
 8003b62:	9304      	str	r3, [sp, #16]
 8003b64:	9307      	str	r3, [sp, #28]
 8003b66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b6a:	931a      	str	r3, [sp, #104]	; 0x68
 8003b6c:	4654      	mov	r4, sl
 8003b6e:	2205      	movs	r2, #5
 8003b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b74:	4850      	ldr	r0, [pc, #320]	; (8003cb8 <_svfiprintf_r+0x1e8>)
 8003b76:	f7fc fb3b 	bl	80001f0 <memchr>
 8003b7a:	9a04      	ldr	r2, [sp, #16]
 8003b7c:	b9d8      	cbnz	r0, 8003bb6 <_svfiprintf_r+0xe6>
 8003b7e:	06d0      	lsls	r0, r2, #27
 8003b80:	bf44      	itt	mi
 8003b82:	2320      	movmi	r3, #32
 8003b84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b88:	0711      	lsls	r1, r2, #28
 8003b8a:	bf44      	itt	mi
 8003b8c:	232b      	movmi	r3, #43	; 0x2b
 8003b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b92:	f89a 3000 	ldrb.w	r3, [sl]
 8003b96:	2b2a      	cmp	r3, #42	; 0x2a
 8003b98:	d015      	beq.n	8003bc6 <_svfiprintf_r+0xf6>
 8003b9a:	9a07      	ldr	r2, [sp, #28]
 8003b9c:	4654      	mov	r4, sl
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	f04f 0c0a 	mov.w	ip, #10
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003baa:	3b30      	subs	r3, #48	; 0x30
 8003bac:	2b09      	cmp	r3, #9
 8003bae:	d94d      	bls.n	8003c4c <_svfiprintf_r+0x17c>
 8003bb0:	b1b0      	cbz	r0, 8003be0 <_svfiprintf_r+0x110>
 8003bb2:	9207      	str	r2, [sp, #28]
 8003bb4:	e014      	b.n	8003be0 <_svfiprintf_r+0x110>
 8003bb6:	eba0 0308 	sub.w	r3, r0, r8
 8003bba:	fa09 f303 	lsl.w	r3, r9, r3
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	9304      	str	r3, [sp, #16]
 8003bc2:	46a2      	mov	sl, r4
 8003bc4:	e7d2      	b.n	8003b6c <_svfiprintf_r+0x9c>
 8003bc6:	9b03      	ldr	r3, [sp, #12]
 8003bc8:	1d19      	adds	r1, r3, #4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	9103      	str	r1, [sp, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	bfbb      	ittet	lt
 8003bd2:	425b      	neglt	r3, r3
 8003bd4:	f042 0202 	orrlt.w	r2, r2, #2
 8003bd8:	9307      	strge	r3, [sp, #28]
 8003bda:	9307      	strlt	r3, [sp, #28]
 8003bdc:	bfb8      	it	lt
 8003bde:	9204      	strlt	r2, [sp, #16]
 8003be0:	7823      	ldrb	r3, [r4, #0]
 8003be2:	2b2e      	cmp	r3, #46	; 0x2e
 8003be4:	d10c      	bne.n	8003c00 <_svfiprintf_r+0x130>
 8003be6:	7863      	ldrb	r3, [r4, #1]
 8003be8:	2b2a      	cmp	r3, #42	; 0x2a
 8003bea:	d134      	bne.n	8003c56 <_svfiprintf_r+0x186>
 8003bec:	9b03      	ldr	r3, [sp, #12]
 8003bee:	1d1a      	adds	r2, r3, #4
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	9203      	str	r2, [sp, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	bfb8      	it	lt
 8003bf8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bfc:	3402      	adds	r4, #2
 8003bfe:	9305      	str	r3, [sp, #20]
 8003c00:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003cc8 <_svfiprintf_r+0x1f8>
 8003c04:	7821      	ldrb	r1, [r4, #0]
 8003c06:	2203      	movs	r2, #3
 8003c08:	4650      	mov	r0, sl
 8003c0a:	f7fc faf1 	bl	80001f0 <memchr>
 8003c0e:	b138      	cbz	r0, 8003c20 <_svfiprintf_r+0x150>
 8003c10:	9b04      	ldr	r3, [sp, #16]
 8003c12:	eba0 000a 	sub.w	r0, r0, sl
 8003c16:	2240      	movs	r2, #64	; 0x40
 8003c18:	4082      	lsls	r2, r0
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	3401      	adds	r4, #1
 8003c1e:	9304      	str	r3, [sp, #16]
 8003c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c24:	4825      	ldr	r0, [pc, #148]	; (8003cbc <_svfiprintf_r+0x1ec>)
 8003c26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c2a:	2206      	movs	r2, #6
 8003c2c:	f7fc fae0 	bl	80001f0 <memchr>
 8003c30:	2800      	cmp	r0, #0
 8003c32:	d038      	beq.n	8003ca6 <_svfiprintf_r+0x1d6>
 8003c34:	4b22      	ldr	r3, [pc, #136]	; (8003cc0 <_svfiprintf_r+0x1f0>)
 8003c36:	bb1b      	cbnz	r3, 8003c80 <_svfiprintf_r+0x1b0>
 8003c38:	9b03      	ldr	r3, [sp, #12]
 8003c3a:	3307      	adds	r3, #7
 8003c3c:	f023 0307 	bic.w	r3, r3, #7
 8003c40:	3308      	adds	r3, #8
 8003c42:	9303      	str	r3, [sp, #12]
 8003c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c46:	4433      	add	r3, r6
 8003c48:	9309      	str	r3, [sp, #36]	; 0x24
 8003c4a:	e768      	b.n	8003b1e <_svfiprintf_r+0x4e>
 8003c4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c50:	460c      	mov	r4, r1
 8003c52:	2001      	movs	r0, #1
 8003c54:	e7a6      	b.n	8003ba4 <_svfiprintf_r+0xd4>
 8003c56:	2300      	movs	r3, #0
 8003c58:	3401      	adds	r4, #1
 8003c5a:	9305      	str	r3, [sp, #20]
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f04f 0c0a 	mov.w	ip, #10
 8003c62:	4620      	mov	r0, r4
 8003c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c68:	3a30      	subs	r2, #48	; 0x30
 8003c6a:	2a09      	cmp	r2, #9
 8003c6c:	d903      	bls.n	8003c76 <_svfiprintf_r+0x1a6>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0c6      	beq.n	8003c00 <_svfiprintf_r+0x130>
 8003c72:	9105      	str	r1, [sp, #20]
 8003c74:	e7c4      	b.n	8003c00 <_svfiprintf_r+0x130>
 8003c76:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e7f0      	b.n	8003c62 <_svfiprintf_r+0x192>
 8003c80:	ab03      	add	r3, sp, #12
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	462a      	mov	r2, r5
 8003c86:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <_svfiprintf_r+0x1f4>)
 8003c88:	a904      	add	r1, sp, #16
 8003c8a:	4638      	mov	r0, r7
 8003c8c:	f3af 8000 	nop.w
 8003c90:	1c42      	adds	r2, r0, #1
 8003c92:	4606      	mov	r6, r0
 8003c94:	d1d6      	bne.n	8003c44 <_svfiprintf_r+0x174>
 8003c96:	89ab      	ldrh	r3, [r5, #12]
 8003c98:	065b      	lsls	r3, r3, #25
 8003c9a:	f53f af2d 	bmi.w	8003af8 <_svfiprintf_r+0x28>
 8003c9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ca0:	b01d      	add	sp, #116	; 0x74
 8003ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ca6:	ab03      	add	r3, sp, #12
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	462a      	mov	r2, r5
 8003cac:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <_svfiprintf_r+0x1f4>)
 8003cae:	a904      	add	r1, sp, #16
 8003cb0:	4638      	mov	r0, r7
 8003cb2:	f000 f879 	bl	8003da8 <_printf_i>
 8003cb6:	e7eb      	b.n	8003c90 <_svfiprintf_r+0x1c0>
 8003cb8:	08004907 	.word	0x08004907
 8003cbc:	08004911 	.word	0x08004911
 8003cc0:	00000000 	.word	0x00000000
 8003cc4:	08003a1d 	.word	0x08003a1d
 8003cc8:	0800490d 	.word	0x0800490d

08003ccc <_printf_common>:
 8003ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd0:	4616      	mov	r6, r2
 8003cd2:	4699      	mov	r9, r3
 8003cd4:	688a      	ldr	r2, [r1, #8]
 8003cd6:	690b      	ldr	r3, [r1, #16]
 8003cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	bfb8      	it	lt
 8003ce0:	4613      	movlt	r3, r2
 8003ce2:	6033      	str	r3, [r6, #0]
 8003ce4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ce8:	4607      	mov	r7, r0
 8003cea:	460c      	mov	r4, r1
 8003cec:	b10a      	cbz	r2, 8003cf2 <_printf_common+0x26>
 8003cee:	3301      	adds	r3, #1
 8003cf0:	6033      	str	r3, [r6, #0]
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	0699      	lsls	r1, r3, #26
 8003cf6:	bf42      	ittt	mi
 8003cf8:	6833      	ldrmi	r3, [r6, #0]
 8003cfa:	3302      	addmi	r3, #2
 8003cfc:	6033      	strmi	r3, [r6, #0]
 8003cfe:	6825      	ldr	r5, [r4, #0]
 8003d00:	f015 0506 	ands.w	r5, r5, #6
 8003d04:	d106      	bne.n	8003d14 <_printf_common+0x48>
 8003d06:	f104 0a19 	add.w	sl, r4, #25
 8003d0a:	68e3      	ldr	r3, [r4, #12]
 8003d0c:	6832      	ldr	r2, [r6, #0]
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	42ab      	cmp	r3, r5
 8003d12:	dc26      	bgt.n	8003d62 <_printf_common+0x96>
 8003d14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d18:	1e13      	subs	r3, r2, #0
 8003d1a:	6822      	ldr	r2, [r4, #0]
 8003d1c:	bf18      	it	ne
 8003d1e:	2301      	movne	r3, #1
 8003d20:	0692      	lsls	r2, r2, #26
 8003d22:	d42b      	bmi.n	8003d7c <_printf_common+0xb0>
 8003d24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d28:	4649      	mov	r1, r9
 8003d2a:	4638      	mov	r0, r7
 8003d2c:	47c0      	blx	r8
 8003d2e:	3001      	adds	r0, #1
 8003d30:	d01e      	beq.n	8003d70 <_printf_common+0xa4>
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	6922      	ldr	r2, [r4, #16]
 8003d36:	f003 0306 	and.w	r3, r3, #6
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	bf02      	ittt	eq
 8003d3e:	68e5      	ldreq	r5, [r4, #12]
 8003d40:	6833      	ldreq	r3, [r6, #0]
 8003d42:	1aed      	subeq	r5, r5, r3
 8003d44:	68a3      	ldr	r3, [r4, #8]
 8003d46:	bf0c      	ite	eq
 8003d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d4c:	2500      	movne	r5, #0
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	bfc4      	itt	gt
 8003d52:	1a9b      	subgt	r3, r3, r2
 8003d54:	18ed      	addgt	r5, r5, r3
 8003d56:	2600      	movs	r6, #0
 8003d58:	341a      	adds	r4, #26
 8003d5a:	42b5      	cmp	r5, r6
 8003d5c:	d11a      	bne.n	8003d94 <_printf_common+0xc8>
 8003d5e:	2000      	movs	r0, #0
 8003d60:	e008      	b.n	8003d74 <_printf_common+0xa8>
 8003d62:	2301      	movs	r3, #1
 8003d64:	4652      	mov	r2, sl
 8003d66:	4649      	mov	r1, r9
 8003d68:	4638      	mov	r0, r7
 8003d6a:	47c0      	blx	r8
 8003d6c:	3001      	adds	r0, #1
 8003d6e:	d103      	bne.n	8003d78 <_printf_common+0xac>
 8003d70:	f04f 30ff 	mov.w	r0, #4294967295
 8003d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d78:	3501      	adds	r5, #1
 8003d7a:	e7c6      	b.n	8003d0a <_printf_common+0x3e>
 8003d7c:	18e1      	adds	r1, r4, r3
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	2030      	movs	r0, #48	; 0x30
 8003d82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d86:	4422      	add	r2, r4
 8003d88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d90:	3302      	adds	r3, #2
 8003d92:	e7c7      	b.n	8003d24 <_printf_common+0x58>
 8003d94:	2301      	movs	r3, #1
 8003d96:	4622      	mov	r2, r4
 8003d98:	4649      	mov	r1, r9
 8003d9a:	4638      	mov	r0, r7
 8003d9c:	47c0      	blx	r8
 8003d9e:	3001      	adds	r0, #1
 8003da0:	d0e6      	beq.n	8003d70 <_printf_common+0xa4>
 8003da2:	3601      	adds	r6, #1
 8003da4:	e7d9      	b.n	8003d5a <_printf_common+0x8e>
	...

08003da8 <_printf_i>:
 8003da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dac:	7e0f      	ldrb	r7, [r1, #24]
 8003dae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003db0:	2f78      	cmp	r7, #120	; 0x78
 8003db2:	4691      	mov	r9, r2
 8003db4:	4680      	mov	r8, r0
 8003db6:	460c      	mov	r4, r1
 8003db8:	469a      	mov	sl, r3
 8003dba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003dbe:	d807      	bhi.n	8003dd0 <_printf_i+0x28>
 8003dc0:	2f62      	cmp	r7, #98	; 0x62
 8003dc2:	d80a      	bhi.n	8003dda <_printf_i+0x32>
 8003dc4:	2f00      	cmp	r7, #0
 8003dc6:	f000 80d4 	beq.w	8003f72 <_printf_i+0x1ca>
 8003dca:	2f58      	cmp	r7, #88	; 0x58
 8003dcc:	f000 80c0 	beq.w	8003f50 <_printf_i+0x1a8>
 8003dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003dd8:	e03a      	b.n	8003e50 <_printf_i+0xa8>
 8003dda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dde:	2b15      	cmp	r3, #21
 8003de0:	d8f6      	bhi.n	8003dd0 <_printf_i+0x28>
 8003de2:	a101      	add	r1, pc, #4	; (adr r1, 8003de8 <_printf_i+0x40>)
 8003de4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003de8:	08003e41 	.word	0x08003e41
 8003dec:	08003e55 	.word	0x08003e55
 8003df0:	08003dd1 	.word	0x08003dd1
 8003df4:	08003dd1 	.word	0x08003dd1
 8003df8:	08003dd1 	.word	0x08003dd1
 8003dfc:	08003dd1 	.word	0x08003dd1
 8003e00:	08003e55 	.word	0x08003e55
 8003e04:	08003dd1 	.word	0x08003dd1
 8003e08:	08003dd1 	.word	0x08003dd1
 8003e0c:	08003dd1 	.word	0x08003dd1
 8003e10:	08003dd1 	.word	0x08003dd1
 8003e14:	08003f59 	.word	0x08003f59
 8003e18:	08003e81 	.word	0x08003e81
 8003e1c:	08003f13 	.word	0x08003f13
 8003e20:	08003dd1 	.word	0x08003dd1
 8003e24:	08003dd1 	.word	0x08003dd1
 8003e28:	08003f7b 	.word	0x08003f7b
 8003e2c:	08003dd1 	.word	0x08003dd1
 8003e30:	08003e81 	.word	0x08003e81
 8003e34:	08003dd1 	.word	0x08003dd1
 8003e38:	08003dd1 	.word	0x08003dd1
 8003e3c:	08003f1b 	.word	0x08003f1b
 8003e40:	682b      	ldr	r3, [r5, #0]
 8003e42:	1d1a      	adds	r2, r3, #4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	602a      	str	r2, [r5, #0]
 8003e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e50:	2301      	movs	r3, #1
 8003e52:	e09f      	b.n	8003f94 <_printf_i+0x1ec>
 8003e54:	6820      	ldr	r0, [r4, #0]
 8003e56:	682b      	ldr	r3, [r5, #0]
 8003e58:	0607      	lsls	r7, r0, #24
 8003e5a:	f103 0104 	add.w	r1, r3, #4
 8003e5e:	6029      	str	r1, [r5, #0]
 8003e60:	d501      	bpl.n	8003e66 <_printf_i+0xbe>
 8003e62:	681e      	ldr	r6, [r3, #0]
 8003e64:	e003      	b.n	8003e6e <_printf_i+0xc6>
 8003e66:	0646      	lsls	r6, r0, #25
 8003e68:	d5fb      	bpl.n	8003e62 <_printf_i+0xba>
 8003e6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e6e:	2e00      	cmp	r6, #0
 8003e70:	da03      	bge.n	8003e7a <_printf_i+0xd2>
 8003e72:	232d      	movs	r3, #45	; 0x2d
 8003e74:	4276      	negs	r6, r6
 8003e76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e7a:	485a      	ldr	r0, [pc, #360]	; (8003fe4 <_printf_i+0x23c>)
 8003e7c:	230a      	movs	r3, #10
 8003e7e:	e012      	b.n	8003ea6 <_printf_i+0xfe>
 8003e80:	682b      	ldr	r3, [r5, #0]
 8003e82:	6820      	ldr	r0, [r4, #0]
 8003e84:	1d19      	adds	r1, r3, #4
 8003e86:	6029      	str	r1, [r5, #0]
 8003e88:	0605      	lsls	r5, r0, #24
 8003e8a:	d501      	bpl.n	8003e90 <_printf_i+0xe8>
 8003e8c:	681e      	ldr	r6, [r3, #0]
 8003e8e:	e002      	b.n	8003e96 <_printf_i+0xee>
 8003e90:	0641      	lsls	r1, r0, #25
 8003e92:	d5fb      	bpl.n	8003e8c <_printf_i+0xe4>
 8003e94:	881e      	ldrh	r6, [r3, #0]
 8003e96:	4853      	ldr	r0, [pc, #332]	; (8003fe4 <_printf_i+0x23c>)
 8003e98:	2f6f      	cmp	r7, #111	; 0x6f
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2308      	moveq	r3, #8
 8003e9e:	230a      	movne	r3, #10
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ea6:	6865      	ldr	r5, [r4, #4]
 8003ea8:	60a5      	str	r5, [r4, #8]
 8003eaa:	2d00      	cmp	r5, #0
 8003eac:	bfa2      	ittt	ge
 8003eae:	6821      	ldrge	r1, [r4, #0]
 8003eb0:	f021 0104 	bicge.w	r1, r1, #4
 8003eb4:	6021      	strge	r1, [r4, #0]
 8003eb6:	b90e      	cbnz	r6, 8003ebc <_printf_i+0x114>
 8003eb8:	2d00      	cmp	r5, #0
 8003eba:	d04b      	beq.n	8003f54 <_printf_i+0x1ac>
 8003ebc:	4615      	mov	r5, r2
 8003ebe:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ec2:	fb03 6711 	mls	r7, r3, r1, r6
 8003ec6:	5dc7      	ldrb	r7, [r0, r7]
 8003ec8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ecc:	4637      	mov	r7, r6
 8003ece:	42bb      	cmp	r3, r7
 8003ed0:	460e      	mov	r6, r1
 8003ed2:	d9f4      	bls.n	8003ebe <_printf_i+0x116>
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d10b      	bne.n	8003ef0 <_printf_i+0x148>
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	07de      	lsls	r6, r3, #31
 8003edc:	d508      	bpl.n	8003ef0 <_printf_i+0x148>
 8003ede:	6923      	ldr	r3, [r4, #16]
 8003ee0:	6861      	ldr	r1, [r4, #4]
 8003ee2:	4299      	cmp	r1, r3
 8003ee4:	bfde      	ittt	le
 8003ee6:	2330      	movle	r3, #48	; 0x30
 8003ee8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003eec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ef0:	1b52      	subs	r2, r2, r5
 8003ef2:	6122      	str	r2, [r4, #16]
 8003ef4:	f8cd a000 	str.w	sl, [sp]
 8003ef8:	464b      	mov	r3, r9
 8003efa:	aa03      	add	r2, sp, #12
 8003efc:	4621      	mov	r1, r4
 8003efe:	4640      	mov	r0, r8
 8003f00:	f7ff fee4 	bl	8003ccc <_printf_common>
 8003f04:	3001      	adds	r0, #1
 8003f06:	d14a      	bne.n	8003f9e <_printf_i+0x1f6>
 8003f08:	f04f 30ff 	mov.w	r0, #4294967295
 8003f0c:	b004      	add	sp, #16
 8003f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	f043 0320 	orr.w	r3, r3, #32
 8003f18:	6023      	str	r3, [r4, #0]
 8003f1a:	4833      	ldr	r0, [pc, #204]	; (8003fe8 <_printf_i+0x240>)
 8003f1c:	2778      	movs	r7, #120	; 0x78
 8003f1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	6829      	ldr	r1, [r5, #0]
 8003f26:	061f      	lsls	r7, r3, #24
 8003f28:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f2c:	d402      	bmi.n	8003f34 <_printf_i+0x18c>
 8003f2e:	065f      	lsls	r7, r3, #25
 8003f30:	bf48      	it	mi
 8003f32:	b2b6      	uxthmi	r6, r6
 8003f34:	07df      	lsls	r7, r3, #31
 8003f36:	bf48      	it	mi
 8003f38:	f043 0320 	orrmi.w	r3, r3, #32
 8003f3c:	6029      	str	r1, [r5, #0]
 8003f3e:	bf48      	it	mi
 8003f40:	6023      	strmi	r3, [r4, #0]
 8003f42:	b91e      	cbnz	r6, 8003f4c <_printf_i+0x1a4>
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	f023 0320 	bic.w	r3, r3, #32
 8003f4a:	6023      	str	r3, [r4, #0]
 8003f4c:	2310      	movs	r3, #16
 8003f4e:	e7a7      	b.n	8003ea0 <_printf_i+0xf8>
 8003f50:	4824      	ldr	r0, [pc, #144]	; (8003fe4 <_printf_i+0x23c>)
 8003f52:	e7e4      	b.n	8003f1e <_printf_i+0x176>
 8003f54:	4615      	mov	r5, r2
 8003f56:	e7bd      	b.n	8003ed4 <_printf_i+0x12c>
 8003f58:	682b      	ldr	r3, [r5, #0]
 8003f5a:	6826      	ldr	r6, [r4, #0]
 8003f5c:	6961      	ldr	r1, [r4, #20]
 8003f5e:	1d18      	adds	r0, r3, #4
 8003f60:	6028      	str	r0, [r5, #0]
 8003f62:	0635      	lsls	r5, r6, #24
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	d501      	bpl.n	8003f6c <_printf_i+0x1c4>
 8003f68:	6019      	str	r1, [r3, #0]
 8003f6a:	e002      	b.n	8003f72 <_printf_i+0x1ca>
 8003f6c:	0670      	lsls	r0, r6, #25
 8003f6e:	d5fb      	bpl.n	8003f68 <_printf_i+0x1c0>
 8003f70:	8019      	strh	r1, [r3, #0]
 8003f72:	2300      	movs	r3, #0
 8003f74:	6123      	str	r3, [r4, #16]
 8003f76:	4615      	mov	r5, r2
 8003f78:	e7bc      	b.n	8003ef4 <_printf_i+0x14c>
 8003f7a:	682b      	ldr	r3, [r5, #0]
 8003f7c:	1d1a      	adds	r2, r3, #4
 8003f7e:	602a      	str	r2, [r5, #0]
 8003f80:	681d      	ldr	r5, [r3, #0]
 8003f82:	6862      	ldr	r2, [r4, #4]
 8003f84:	2100      	movs	r1, #0
 8003f86:	4628      	mov	r0, r5
 8003f88:	f7fc f932 	bl	80001f0 <memchr>
 8003f8c:	b108      	cbz	r0, 8003f92 <_printf_i+0x1ea>
 8003f8e:	1b40      	subs	r0, r0, r5
 8003f90:	6060      	str	r0, [r4, #4]
 8003f92:	6863      	ldr	r3, [r4, #4]
 8003f94:	6123      	str	r3, [r4, #16]
 8003f96:	2300      	movs	r3, #0
 8003f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f9c:	e7aa      	b.n	8003ef4 <_printf_i+0x14c>
 8003f9e:	6923      	ldr	r3, [r4, #16]
 8003fa0:	462a      	mov	r2, r5
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	4640      	mov	r0, r8
 8003fa6:	47d0      	blx	sl
 8003fa8:	3001      	adds	r0, #1
 8003faa:	d0ad      	beq.n	8003f08 <_printf_i+0x160>
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	079b      	lsls	r3, r3, #30
 8003fb0:	d413      	bmi.n	8003fda <_printf_i+0x232>
 8003fb2:	68e0      	ldr	r0, [r4, #12]
 8003fb4:	9b03      	ldr	r3, [sp, #12]
 8003fb6:	4298      	cmp	r0, r3
 8003fb8:	bfb8      	it	lt
 8003fba:	4618      	movlt	r0, r3
 8003fbc:	e7a6      	b.n	8003f0c <_printf_i+0x164>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	4632      	mov	r2, r6
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	4640      	mov	r0, r8
 8003fc6:	47d0      	blx	sl
 8003fc8:	3001      	adds	r0, #1
 8003fca:	d09d      	beq.n	8003f08 <_printf_i+0x160>
 8003fcc:	3501      	adds	r5, #1
 8003fce:	68e3      	ldr	r3, [r4, #12]
 8003fd0:	9903      	ldr	r1, [sp, #12]
 8003fd2:	1a5b      	subs	r3, r3, r1
 8003fd4:	42ab      	cmp	r3, r5
 8003fd6:	dcf2      	bgt.n	8003fbe <_printf_i+0x216>
 8003fd8:	e7eb      	b.n	8003fb2 <_printf_i+0x20a>
 8003fda:	2500      	movs	r5, #0
 8003fdc:	f104 0619 	add.w	r6, r4, #25
 8003fe0:	e7f5      	b.n	8003fce <_printf_i+0x226>
 8003fe2:	bf00      	nop
 8003fe4:	08004918 	.word	0x08004918
 8003fe8:	08004929 	.word	0x08004929

08003fec <__sflush_r>:
 8003fec:	898a      	ldrh	r2, [r1, #12]
 8003fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff2:	4605      	mov	r5, r0
 8003ff4:	0710      	lsls	r0, r2, #28
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	d458      	bmi.n	80040ac <__sflush_r+0xc0>
 8003ffa:	684b      	ldr	r3, [r1, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	dc05      	bgt.n	800400c <__sflush_r+0x20>
 8004000:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	dc02      	bgt.n	800400c <__sflush_r+0x20>
 8004006:	2000      	movs	r0, #0
 8004008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800400c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800400e:	2e00      	cmp	r6, #0
 8004010:	d0f9      	beq.n	8004006 <__sflush_r+0x1a>
 8004012:	2300      	movs	r3, #0
 8004014:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004018:	682f      	ldr	r7, [r5, #0]
 800401a:	6a21      	ldr	r1, [r4, #32]
 800401c:	602b      	str	r3, [r5, #0]
 800401e:	d032      	beq.n	8004086 <__sflush_r+0x9a>
 8004020:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004022:	89a3      	ldrh	r3, [r4, #12]
 8004024:	075a      	lsls	r2, r3, #29
 8004026:	d505      	bpl.n	8004034 <__sflush_r+0x48>
 8004028:	6863      	ldr	r3, [r4, #4]
 800402a:	1ac0      	subs	r0, r0, r3
 800402c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800402e:	b10b      	cbz	r3, 8004034 <__sflush_r+0x48>
 8004030:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004032:	1ac0      	subs	r0, r0, r3
 8004034:	2300      	movs	r3, #0
 8004036:	4602      	mov	r2, r0
 8004038:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800403a:	6a21      	ldr	r1, [r4, #32]
 800403c:	4628      	mov	r0, r5
 800403e:	47b0      	blx	r6
 8004040:	1c43      	adds	r3, r0, #1
 8004042:	89a3      	ldrh	r3, [r4, #12]
 8004044:	d106      	bne.n	8004054 <__sflush_r+0x68>
 8004046:	6829      	ldr	r1, [r5, #0]
 8004048:	291d      	cmp	r1, #29
 800404a:	d82b      	bhi.n	80040a4 <__sflush_r+0xb8>
 800404c:	4a29      	ldr	r2, [pc, #164]	; (80040f4 <__sflush_r+0x108>)
 800404e:	410a      	asrs	r2, r1
 8004050:	07d6      	lsls	r6, r2, #31
 8004052:	d427      	bmi.n	80040a4 <__sflush_r+0xb8>
 8004054:	2200      	movs	r2, #0
 8004056:	6062      	str	r2, [r4, #4]
 8004058:	04d9      	lsls	r1, r3, #19
 800405a:	6922      	ldr	r2, [r4, #16]
 800405c:	6022      	str	r2, [r4, #0]
 800405e:	d504      	bpl.n	800406a <__sflush_r+0x7e>
 8004060:	1c42      	adds	r2, r0, #1
 8004062:	d101      	bne.n	8004068 <__sflush_r+0x7c>
 8004064:	682b      	ldr	r3, [r5, #0]
 8004066:	b903      	cbnz	r3, 800406a <__sflush_r+0x7e>
 8004068:	6560      	str	r0, [r4, #84]	; 0x54
 800406a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800406c:	602f      	str	r7, [r5, #0]
 800406e:	2900      	cmp	r1, #0
 8004070:	d0c9      	beq.n	8004006 <__sflush_r+0x1a>
 8004072:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004076:	4299      	cmp	r1, r3
 8004078:	d002      	beq.n	8004080 <__sflush_r+0x94>
 800407a:	4628      	mov	r0, r5
 800407c:	f7ff fbce 	bl	800381c <_free_r>
 8004080:	2000      	movs	r0, #0
 8004082:	6360      	str	r0, [r4, #52]	; 0x34
 8004084:	e7c0      	b.n	8004008 <__sflush_r+0x1c>
 8004086:	2301      	movs	r3, #1
 8004088:	4628      	mov	r0, r5
 800408a:	47b0      	blx	r6
 800408c:	1c41      	adds	r1, r0, #1
 800408e:	d1c8      	bne.n	8004022 <__sflush_r+0x36>
 8004090:	682b      	ldr	r3, [r5, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0c5      	beq.n	8004022 <__sflush_r+0x36>
 8004096:	2b1d      	cmp	r3, #29
 8004098:	d001      	beq.n	800409e <__sflush_r+0xb2>
 800409a:	2b16      	cmp	r3, #22
 800409c:	d101      	bne.n	80040a2 <__sflush_r+0xb6>
 800409e:	602f      	str	r7, [r5, #0]
 80040a0:	e7b1      	b.n	8004006 <__sflush_r+0x1a>
 80040a2:	89a3      	ldrh	r3, [r4, #12]
 80040a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040a8:	81a3      	strh	r3, [r4, #12]
 80040aa:	e7ad      	b.n	8004008 <__sflush_r+0x1c>
 80040ac:	690f      	ldr	r7, [r1, #16]
 80040ae:	2f00      	cmp	r7, #0
 80040b0:	d0a9      	beq.n	8004006 <__sflush_r+0x1a>
 80040b2:	0793      	lsls	r3, r2, #30
 80040b4:	680e      	ldr	r6, [r1, #0]
 80040b6:	bf08      	it	eq
 80040b8:	694b      	ldreq	r3, [r1, #20]
 80040ba:	600f      	str	r7, [r1, #0]
 80040bc:	bf18      	it	ne
 80040be:	2300      	movne	r3, #0
 80040c0:	eba6 0807 	sub.w	r8, r6, r7
 80040c4:	608b      	str	r3, [r1, #8]
 80040c6:	f1b8 0f00 	cmp.w	r8, #0
 80040ca:	dd9c      	ble.n	8004006 <__sflush_r+0x1a>
 80040cc:	6a21      	ldr	r1, [r4, #32]
 80040ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040d0:	4643      	mov	r3, r8
 80040d2:	463a      	mov	r2, r7
 80040d4:	4628      	mov	r0, r5
 80040d6:	47b0      	blx	r6
 80040d8:	2800      	cmp	r0, #0
 80040da:	dc06      	bgt.n	80040ea <__sflush_r+0xfe>
 80040dc:	89a3      	ldrh	r3, [r4, #12]
 80040de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040e2:	81a3      	strh	r3, [r4, #12]
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
 80040e8:	e78e      	b.n	8004008 <__sflush_r+0x1c>
 80040ea:	4407      	add	r7, r0
 80040ec:	eba8 0800 	sub.w	r8, r8, r0
 80040f0:	e7e9      	b.n	80040c6 <__sflush_r+0xda>
 80040f2:	bf00      	nop
 80040f4:	dfbffffe 	.word	0xdfbffffe

080040f8 <_fflush_r>:
 80040f8:	b538      	push	{r3, r4, r5, lr}
 80040fa:	690b      	ldr	r3, [r1, #16]
 80040fc:	4605      	mov	r5, r0
 80040fe:	460c      	mov	r4, r1
 8004100:	b913      	cbnz	r3, 8004108 <_fflush_r+0x10>
 8004102:	2500      	movs	r5, #0
 8004104:	4628      	mov	r0, r5
 8004106:	bd38      	pop	{r3, r4, r5, pc}
 8004108:	b118      	cbz	r0, 8004112 <_fflush_r+0x1a>
 800410a:	6a03      	ldr	r3, [r0, #32]
 800410c:	b90b      	cbnz	r3, 8004112 <_fflush_r+0x1a>
 800410e:	f7ff fa51 	bl	80035b4 <__sinit>
 8004112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f3      	beq.n	8004102 <_fflush_r+0xa>
 800411a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800411c:	07d0      	lsls	r0, r2, #31
 800411e:	d404      	bmi.n	800412a <_fflush_r+0x32>
 8004120:	0599      	lsls	r1, r3, #22
 8004122:	d402      	bmi.n	800412a <_fflush_r+0x32>
 8004124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004126:	f7ff fb58 	bl	80037da <__retarget_lock_acquire_recursive>
 800412a:	4628      	mov	r0, r5
 800412c:	4621      	mov	r1, r4
 800412e:	f7ff ff5d 	bl	8003fec <__sflush_r>
 8004132:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004134:	07da      	lsls	r2, r3, #31
 8004136:	4605      	mov	r5, r0
 8004138:	d4e4      	bmi.n	8004104 <_fflush_r+0xc>
 800413a:	89a3      	ldrh	r3, [r4, #12]
 800413c:	059b      	lsls	r3, r3, #22
 800413e:	d4e1      	bmi.n	8004104 <_fflush_r+0xc>
 8004140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004142:	f7ff fb4b 	bl	80037dc <__retarget_lock_release_recursive>
 8004146:	e7dd      	b.n	8004104 <_fflush_r+0xc>

08004148 <fiprintf>:
 8004148:	b40e      	push	{r1, r2, r3}
 800414a:	b503      	push	{r0, r1, lr}
 800414c:	4601      	mov	r1, r0
 800414e:	ab03      	add	r3, sp, #12
 8004150:	4805      	ldr	r0, [pc, #20]	; (8004168 <fiprintf+0x20>)
 8004152:	f853 2b04 	ldr.w	r2, [r3], #4
 8004156:	6800      	ldr	r0, [r0, #0]
 8004158:	9301      	str	r3, [sp, #4]
 800415a:	f000 f89f 	bl	800429c <_vfiprintf_r>
 800415e:	b002      	add	sp, #8
 8004160:	f85d eb04 	ldr.w	lr, [sp], #4
 8004164:	b003      	add	sp, #12
 8004166:	4770      	bx	lr
 8004168:	200000e8 	.word	0x200000e8

0800416c <memmove>:
 800416c:	4288      	cmp	r0, r1
 800416e:	b510      	push	{r4, lr}
 8004170:	eb01 0402 	add.w	r4, r1, r2
 8004174:	d902      	bls.n	800417c <memmove+0x10>
 8004176:	4284      	cmp	r4, r0
 8004178:	4623      	mov	r3, r4
 800417a:	d807      	bhi.n	800418c <memmove+0x20>
 800417c:	1e43      	subs	r3, r0, #1
 800417e:	42a1      	cmp	r1, r4
 8004180:	d008      	beq.n	8004194 <memmove+0x28>
 8004182:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004186:	f803 2f01 	strb.w	r2, [r3, #1]!
 800418a:	e7f8      	b.n	800417e <memmove+0x12>
 800418c:	4402      	add	r2, r0
 800418e:	4601      	mov	r1, r0
 8004190:	428a      	cmp	r2, r1
 8004192:	d100      	bne.n	8004196 <memmove+0x2a>
 8004194:	bd10      	pop	{r4, pc}
 8004196:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800419a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800419e:	e7f7      	b.n	8004190 <memmove+0x24>

080041a0 <_sbrk_r>:
 80041a0:	b538      	push	{r3, r4, r5, lr}
 80041a2:	4d06      	ldr	r5, [pc, #24]	; (80041bc <_sbrk_r+0x1c>)
 80041a4:	2300      	movs	r3, #0
 80041a6:	4604      	mov	r4, r0
 80041a8:	4608      	mov	r0, r1
 80041aa:	602b      	str	r3, [r5, #0]
 80041ac:	f7fd f9ac 	bl	8001508 <_sbrk>
 80041b0:	1c43      	adds	r3, r0, #1
 80041b2:	d102      	bne.n	80041ba <_sbrk_r+0x1a>
 80041b4:	682b      	ldr	r3, [r5, #0]
 80041b6:	b103      	cbz	r3, 80041ba <_sbrk_r+0x1a>
 80041b8:	6023      	str	r3, [r4, #0]
 80041ba:	bd38      	pop	{r3, r4, r5, pc}
 80041bc:	2000033c 	.word	0x2000033c

080041c0 <memcpy>:
 80041c0:	440a      	add	r2, r1
 80041c2:	4291      	cmp	r1, r2
 80041c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80041c8:	d100      	bne.n	80041cc <memcpy+0xc>
 80041ca:	4770      	bx	lr
 80041cc:	b510      	push	{r4, lr}
 80041ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041d6:	4291      	cmp	r1, r2
 80041d8:	d1f9      	bne.n	80041ce <memcpy+0xe>
 80041da:	bd10      	pop	{r4, pc}

080041dc <abort>:
 80041dc:	b508      	push	{r3, lr}
 80041de:	2006      	movs	r0, #6
 80041e0:	f000 fa34 	bl	800464c <raise>
 80041e4:	2001      	movs	r0, #1
 80041e6:	f7fd f917 	bl	8001418 <_exit>

080041ea <_realloc_r>:
 80041ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ee:	4680      	mov	r8, r0
 80041f0:	4614      	mov	r4, r2
 80041f2:	460e      	mov	r6, r1
 80041f4:	b921      	cbnz	r1, 8004200 <_realloc_r+0x16>
 80041f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041fa:	4611      	mov	r1, r2
 80041fc:	f7ff bb82 	b.w	8003904 <_malloc_r>
 8004200:	b92a      	cbnz	r2, 800420e <_realloc_r+0x24>
 8004202:	f7ff fb0b 	bl	800381c <_free_r>
 8004206:	4625      	mov	r5, r4
 8004208:	4628      	mov	r0, r5
 800420a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800420e:	f000 fa39 	bl	8004684 <_malloc_usable_size_r>
 8004212:	4284      	cmp	r4, r0
 8004214:	4607      	mov	r7, r0
 8004216:	d802      	bhi.n	800421e <_realloc_r+0x34>
 8004218:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800421c:	d812      	bhi.n	8004244 <_realloc_r+0x5a>
 800421e:	4621      	mov	r1, r4
 8004220:	4640      	mov	r0, r8
 8004222:	f7ff fb6f 	bl	8003904 <_malloc_r>
 8004226:	4605      	mov	r5, r0
 8004228:	2800      	cmp	r0, #0
 800422a:	d0ed      	beq.n	8004208 <_realloc_r+0x1e>
 800422c:	42bc      	cmp	r4, r7
 800422e:	4622      	mov	r2, r4
 8004230:	4631      	mov	r1, r6
 8004232:	bf28      	it	cs
 8004234:	463a      	movcs	r2, r7
 8004236:	f7ff ffc3 	bl	80041c0 <memcpy>
 800423a:	4631      	mov	r1, r6
 800423c:	4640      	mov	r0, r8
 800423e:	f7ff faed 	bl	800381c <_free_r>
 8004242:	e7e1      	b.n	8004208 <_realloc_r+0x1e>
 8004244:	4635      	mov	r5, r6
 8004246:	e7df      	b.n	8004208 <_realloc_r+0x1e>

08004248 <__sfputc_r>:
 8004248:	6893      	ldr	r3, [r2, #8]
 800424a:	3b01      	subs	r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	b410      	push	{r4}
 8004250:	6093      	str	r3, [r2, #8]
 8004252:	da08      	bge.n	8004266 <__sfputc_r+0x1e>
 8004254:	6994      	ldr	r4, [r2, #24]
 8004256:	42a3      	cmp	r3, r4
 8004258:	db01      	blt.n	800425e <__sfputc_r+0x16>
 800425a:	290a      	cmp	r1, #10
 800425c:	d103      	bne.n	8004266 <__sfputc_r+0x1e>
 800425e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004262:	f000 b935 	b.w	80044d0 <__swbuf_r>
 8004266:	6813      	ldr	r3, [r2, #0]
 8004268:	1c58      	adds	r0, r3, #1
 800426a:	6010      	str	r0, [r2, #0]
 800426c:	7019      	strb	r1, [r3, #0]
 800426e:	4608      	mov	r0, r1
 8004270:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004274:	4770      	bx	lr

08004276 <__sfputs_r>:
 8004276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004278:	4606      	mov	r6, r0
 800427a:	460f      	mov	r7, r1
 800427c:	4614      	mov	r4, r2
 800427e:	18d5      	adds	r5, r2, r3
 8004280:	42ac      	cmp	r4, r5
 8004282:	d101      	bne.n	8004288 <__sfputs_r+0x12>
 8004284:	2000      	movs	r0, #0
 8004286:	e007      	b.n	8004298 <__sfputs_r+0x22>
 8004288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800428c:	463a      	mov	r2, r7
 800428e:	4630      	mov	r0, r6
 8004290:	f7ff ffda 	bl	8004248 <__sfputc_r>
 8004294:	1c43      	adds	r3, r0, #1
 8004296:	d1f3      	bne.n	8004280 <__sfputs_r+0xa>
 8004298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800429c <_vfiprintf_r>:
 800429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a0:	460d      	mov	r5, r1
 80042a2:	b09d      	sub	sp, #116	; 0x74
 80042a4:	4614      	mov	r4, r2
 80042a6:	4698      	mov	r8, r3
 80042a8:	4606      	mov	r6, r0
 80042aa:	b118      	cbz	r0, 80042b4 <_vfiprintf_r+0x18>
 80042ac:	6a03      	ldr	r3, [r0, #32]
 80042ae:	b90b      	cbnz	r3, 80042b4 <_vfiprintf_r+0x18>
 80042b0:	f7ff f980 	bl	80035b4 <__sinit>
 80042b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042b6:	07d9      	lsls	r1, r3, #31
 80042b8:	d405      	bmi.n	80042c6 <_vfiprintf_r+0x2a>
 80042ba:	89ab      	ldrh	r3, [r5, #12]
 80042bc:	059a      	lsls	r2, r3, #22
 80042be:	d402      	bmi.n	80042c6 <_vfiprintf_r+0x2a>
 80042c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042c2:	f7ff fa8a 	bl	80037da <__retarget_lock_acquire_recursive>
 80042c6:	89ab      	ldrh	r3, [r5, #12]
 80042c8:	071b      	lsls	r3, r3, #28
 80042ca:	d501      	bpl.n	80042d0 <_vfiprintf_r+0x34>
 80042cc:	692b      	ldr	r3, [r5, #16]
 80042ce:	b99b      	cbnz	r3, 80042f8 <_vfiprintf_r+0x5c>
 80042d0:	4629      	mov	r1, r5
 80042d2:	4630      	mov	r0, r6
 80042d4:	f000 f93a 	bl	800454c <__swsetup_r>
 80042d8:	b170      	cbz	r0, 80042f8 <_vfiprintf_r+0x5c>
 80042da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042dc:	07dc      	lsls	r4, r3, #31
 80042de:	d504      	bpl.n	80042ea <_vfiprintf_r+0x4e>
 80042e0:	f04f 30ff 	mov.w	r0, #4294967295
 80042e4:	b01d      	add	sp, #116	; 0x74
 80042e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ea:	89ab      	ldrh	r3, [r5, #12]
 80042ec:	0598      	lsls	r0, r3, #22
 80042ee:	d4f7      	bmi.n	80042e0 <_vfiprintf_r+0x44>
 80042f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042f2:	f7ff fa73 	bl	80037dc <__retarget_lock_release_recursive>
 80042f6:	e7f3      	b.n	80042e0 <_vfiprintf_r+0x44>
 80042f8:	2300      	movs	r3, #0
 80042fa:	9309      	str	r3, [sp, #36]	; 0x24
 80042fc:	2320      	movs	r3, #32
 80042fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004302:	f8cd 800c 	str.w	r8, [sp, #12]
 8004306:	2330      	movs	r3, #48	; 0x30
 8004308:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80044bc <_vfiprintf_r+0x220>
 800430c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004310:	f04f 0901 	mov.w	r9, #1
 8004314:	4623      	mov	r3, r4
 8004316:	469a      	mov	sl, r3
 8004318:	f813 2b01 	ldrb.w	r2, [r3], #1
 800431c:	b10a      	cbz	r2, 8004322 <_vfiprintf_r+0x86>
 800431e:	2a25      	cmp	r2, #37	; 0x25
 8004320:	d1f9      	bne.n	8004316 <_vfiprintf_r+0x7a>
 8004322:	ebba 0b04 	subs.w	fp, sl, r4
 8004326:	d00b      	beq.n	8004340 <_vfiprintf_r+0xa4>
 8004328:	465b      	mov	r3, fp
 800432a:	4622      	mov	r2, r4
 800432c:	4629      	mov	r1, r5
 800432e:	4630      	mov	r0, r6
 8004330:	f7ff ffa1 	bl	8004276 <__sfputs_r>
 8004334:	3001      	adds	r0, #1
 8004336:	f000 80a9 	beq.w	800448c <_vfiprintf_r+0x1f0>
 800433a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800433c:	445a      	add	r2, fp
 800433e:	9209      	str	r2, [sp, #36]	; 0x24
 8004340:	f89a 3000 	ldrb.w	r3, [sl]
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80a1 	beq.w	800448c <_vfiprintf_r+0x1f0>
 800434a:	2300      	movs	r3, #0
 800434c:	f04f 32ff 	mov.w	r2, #4294967295
 8004350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004354:	f10a 0a01 	add.w	sl, sl, #1
 8004358:	9304      	str	r3, [sp, #16]
 800435a:	9307      	str	r3, [sp, #28]
 800435c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004360:	931a      	str	r3, [sp, #104]	; 0x68
 8004362:	4654      	mov	r4, sl
 8004364:	2205      	movs	r2, #5
 8004366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800436a:	4854      	ldr	r0, [pc, #336]	; (80044bc <_vfiprintf_r+0x220>)
 800436c:	f7fb ff40 	bl	80001f0 <memchr>
 8004370:	9a04      	ldr	r2, [sp, #16]
 8004372:	b9d8      	cbnz	r0, 80043ac <_vfiprintf_r+0x110>
 8004374:	06d1      	lsls	r1, r2, #27
 8004376:	bf44      	itt	mi
 8004378:	2320      	movmi	r3, #32
 800437a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800437e:	0713      	lsls	r3, r2, #28
 8004380:	bf44      	itt	mi
 8004382:	232b      	movmi	r3, #43	; 0x2b
 8004384:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004388:	f89a 3000 	ldrb.w	r3, [sl]
 800438c:	2b2a      	cmp	r3, #42	; 0x2a
 800438e:	d015      	beq.n	80043bc <_vfiprintf_r+0x120>
 8004390:	9a07      	ldr	r2, [sp, #28]
 8004392:	4654      	mov	r4, sl
 8004394:	2000      	movs	r0, #0
 8004396:	f04f 0c0a 	mov.w	ip, #10
 800439a:	4621      	mov	r1, r4
 800439c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043a0:	3b30      	subs	r3, #48	; 0x30
 80043a2:	2b09      	cmp	r3, #9
 80043a4:	d94d      	bls.n	8004442 <_vfiprintf_r+0x1a6>
 80043a6:	b1b0      	cbz	r0, 80043d6 <_vfiprintf_r+0x13a>
 80043a8:	9207      	str	r2, [sp, #28]
 80043aa:	e014      	b.n	80043d6 <_vfiprintf_r+0x13a>
 80043ac:	eba0 0308 	sub.w	r3, r0, r8
 80043b0:	fa09 f303 	lsl.w	r3, r9, r3
 80043b4:	4313      	orrs	r3, r2
 80043b6:	9304      	str	r3, [sp, #16]
 80043b8:	46a2      	mov	sl, r4
 80043ba:	e7d2      	b.n	8004362 <_vfiprintf_r+0xc6>
 80043bc:	9b03      	ldr	r3, [sp, #12]
 80043be:	1d19      	adds	r1, r3, #4
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	9103      	str	r1, [sp, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	bfbb      	ittet	lt
 80043c8:	425b      	neglt	r3, r3
 80043ca:	f042 0202 	orrlt.w	r2, r2, #2
 80043ce:	9307      	strge	r3, [sp, #28]
 80043d0:	9307      	strlt	r3, [sp, #28]
 80043d2:	bfb8      	it	lt
 80043d4:	9204      	strlt	r2, [sp, #16]
 80043d6:	7823      	ldrb	r3, [r4, #0]
 80043d8:	2b2e      	cmp	r3, #46	; 0x2e
 80043da:	d10c      	bne.n	80043f6 <_vfiprintf_r+0x15a>
 80043dc:	7863      	ldrb	r3, [r4, #1]
 80043de:	2b2a      	cmp	r3, #42	; 0x2a
 80043e0:	d134      	bne.n	800444c <_vfiprintf_r+0x1b0>
 80043e2:	9b03      	ldr	r3, [sp, #12]
 80043e4:	1d1a      	adds	r2, r3, #4
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	9203      	str	r2, [sp, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	bfb8      	it	lt
 80043ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80043f2:	3402      	adds	r4, #2
 80043f4:	9305      	str	r3, [sp, #20]
 80043f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80044cc <_vfiprintf_r+0x230>
 80043fa:	7821      	ldrb	r1, [r4, #0]
 80043fc:	2203      	movs	r2, #3
 80043fe:	4650      	mov	r0, sl
 8004400:	f7fb fef6 	bl	80001f0 <memchr>
 8004404:	b138      	cbz	r0, 8004416 <_vfiprintf_r+0x17a>
 8004406:	9b04      	ldr	r3, [sp, #16]
 8004408:	eba0 000a 	sub.w	r0, r0, sl
 800440c:	2240      	movs	r2, #64	; 0x40
 800440e:	4082      	lsls	r2, r0
 8004410:	4313      	orrs	r3, r2
 8004412:	3401      	adds	r4, #1
 8004414:	9304      	str	r3, [sp, #16]
 8004416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800441a:	4829      	ldr	r0, [pc, #164]	; (80044c0 <_vfiprintf_r+0x224>)
 800441c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004420:	2206      	movs	r2, #6
 8004422:	f7fb fee5 	bl	80001f0 <memchr>
 8004426:	2800      	cmp	r0, #0
 8004428:	d03f      	beq.n	80044aa <_vfiprintf_r+0x20e>
 800442a:	4b26      	ldr	r3, [pc, #152]	; (80044c4 <_vfiprintf_r+0x228>)
 800442c:	bb1b      	cbnz	r3, 8004476 <_vfiprintf_r+0x1da>
 800442e:	9b03      	ldr	r3, [sp, #12]
 8004430:	3307      	adds	r3, #7
 8004432:	f023 0307 	bic.w	r3, r3, #7
 8004436:	3308      	adds	r3, #8
 8004438:	9303      	str	r3, [sp, #12]
 800443a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800443c:	443b      	add	r3, r7
 800443e:	9309      	str	r3, [sp, #36]	; 0x24
 8004440:	e768      	b.n	8004314 <_vfiprintf_r+0x78>
 8004442:	fb0c 3202 	mla	r2, ip, r2, r3
 8004446:	460c      	mov	r4, r1
 8004448:	2001      	movs	r0, #1
 800444a:	e7a6      	b.n	800439a <_vfiprintf_r+0xfe>
 800444c:	2300      	movs	r3, #0
 800444e:	3401      	adds	r4, #1
 8004450:	9305      	str	r3, [sp, #20]
 8004452:	4619      	mov	r1, r3
 8004454:	f04f 0c0a 	mov.w	ip, #10
 8004458:	4620      	mov	r0, r4
 800445a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800445e:	3a30      	subs	r2, #48	; 0x30
 8004460:	2a09      	cmp	r2, #9
 8004462:	d903      	bls.n	800446c <_vfiprintf_r+0x1d0>
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0c6      	beq.n	80043f6 <_vfiprintf_r+0x15a>
 8004468:	9105      	str	r1, [sp, #20]
 800446a:	e7c4      	b.n	80043f6 <_vfiprintf_r+0x15a>
 800446c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004470:	4604      	mov	r4, r0
 8004472:	2301      	movs	r3, #1
 8004474:	e7f0      	b.n	8004458 <_vfiprintf_r+0x1bc>
 8004476:	ab03      	add	r3, sp, #12
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	462a      	mov	r2, r5
 800447c:	4b12      	ldr	r3, [pc, #72]	; (80044c8 <_vfiprintf_r+0x22c>)
 800447e:	a904      	add	r1, sp, #16
 8004480:	4630      	mov	r0, r6
 8004482:	f3af 8000 	nop.w
 8004486:	4607      	mov	r7, r0
 8004488:	1c78      	adds	r0, r7, #1
 800448a:	d1d6      	bne.n	800443a <_vfiprintf_r+0x19e>
 800448c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800448e:	07d9      	lsls	r1, r3, #31
 8004490:	d405      	bmi.n	800449e <_vfiprintf_r+0x202>
 8004492:	89ab      	ldrh	r3, [r5, #12]
 8004494:	059a      	lsls	r2, r3, #22
 8004496:	d402      	bmi.n	800449e <_vfiprintf_r+0x202>
 8004498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800449a:	f7ff f99f 	bl	80037dc <__retarget_lock_release_recursive>
 800449e:	89ab      	ldrh	r3, [r5, #12]
 80044a0:	065b      	lsls	r3, r3, #25
 80044a2:	f53f af1d 	bmi.w	80042e0 <_vfiprintf_r+0x44>
 80044a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044a8:	e71c      	b.n	80042e4 <_vfiprintf_r+0x48>
 80044aa:	ab03      	add	r3, sp, #12
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	462a      	mov	r2, r5
 80044b0:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <_vfiprintf_r+0x22c>)
 80044b2:	a904      	add	r1, sp, #16
 80044b4:	4630      	mov	r0, r6
 80044b6:	f7ff fc77 	bl	8003da8 <_printf_i>
 80044ba:	e7e4      	b.n	8004486 <_vfiprintf_r+0x1ea>
 80044bc:	08004907 	.word	0x08004907
 80044c0:	08004911 	.word	0x08004911
 80044c4:	00000000 	.word	0x00000000
 80044c8:	08004277 	.word	0x08004277
 80044cc:	0800490d 	.word	0x0800490d

080044d0 <__swbuf_r>:
 80044d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d2:	460e      	mov	r6, r1
 80044d4:	4614      	mov	r4, r2
 80044d6:	4605      	mov	r5, r0
 80044d8:	b118      	cbz	r0, 80044e2 <__swbuf_r+0x12>
 80044da:	6a03      	ldr	r3, [r0, #32]
 80044dc:	b90b      	cbnz	r3, 80044e2 <__swbuf_r+0x12>
 80044de:	f7ff f869 	bl	80035b4 <__sinit>
 80044e2:	69a3      	ldr	r3, [r4, #24]
 80044e4:	60a3      	str	r3, [r4, #8]
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	071a      	lsls	r2, r3, #28
 80044ea:	d525      	bpl.n	8004538 <__swbuf_r+0x68>
 80044ec:	6923      	ldr	r3, [r4, #16]
 80044ee:	b31b      	cbz	r3, 8004538 <__swbuf_r+0x68>
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	6922      	ldr	r2, [r4, #16]
 80044f4:	1a98      	subs	r0, r3, r2
 80044f6:	6963      	ldr	r3, [r4, #20]
 80044f8:	b2f6      	uxtb	r6, r6
 80044fa:	4283      	cmp	r3, r0
 80044fc:	4637      	mov	r7, r6
 80044fe:	dc04      	bgt.n	800450a <__swbuf_r+0x3a>
 8004500:	4621      	mov	r1, r4
 8004502:	4628      	mov	r0, r5
 8004504:	f7ff fdf8 	bl	80040f8 <_fflush_r>
 8004508:	b9e0      	cbnz	r0, 8004544 <__swbuf_r+0x74>
 800450a:	68a3      	ldr	r3, [r4, #8]
 800450c:	3b01      	subs	r3, #1
 800450e:	60a3      	str	r3, [r4, #8]
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	6022      	str	r2, [r4, #0]
 8004516:	701e      	strb	r6, [r3, #0]
 8004518:	6962      	ldr	r2, [r4, #20]
 800451a:	1c43      	adds	r3, r0, #1
 800451c:	429a      	cmp	r2, r3
 800451e:	d004      	beq.n	800452a <__swbuf_r+0x5a>
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	07db      	lsls	r3, r3, #31
 8004524:	d506      	bpl.n	8004534 <__swbuf_r+0x64>
 8004526:	2e0a      	cmp	r6, #10
 8004528:	d104      	bne.n	8004534 <__swbuf_r+0x64>
 800452a:	4621      	mov	r1, r4
 800452c:	4628      	mov	r0, r5
 800452e:	f7ff fde3 	bl	80040f8 <_fflush_r>
 8004532:	b938      	cbnz	r0, 8004544 <__swbuf_r+0x74>
 8004534:	4638      	mov	r0, r7
 8004536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004538:	4621      	mov	r1, r4
 800453a:	4628      	mov	r0, r5
 800453c:	f000 f806 	bl	800454c <__swsetup_r>
 8004540:	2800      	cmp	r0, #0
 8004542:	d0d5      	beq.n	80044f0 <__swbuf_r+0x20>
 8004544:	f04f 37ff 	mov.w	r7, #4294967295
 8004548:	e7f4      	b.n	8004534 <__swbuf_r+0x64>
	...

0800454c <__swsetup_r>:
 800454c:	b538      	push	{r3, r4, r5, lr}
 800454e:	4b2a      	ldr	r3, [pc, #168]	; (80045f8 <__swsetup_r+0xac>)
 8004550:	4605      	mov	r5, r0
 8004552:	6818      	ldr	r0, [r3, #0]
 8004554:	460c      	mov	r4, r1
 8004556:	b118      	cbz	r0, 8004560 <__swsetup_r+0x14>
 8004558:	6a03      	ldr	r3, [r0, #32]
 800455a:	b90b      	cbnz	r3, 8004560 <__swsetup_r+0x14>
 800455c:	f7ff f82a 	bl	80035b4 <__sinit>
 8004560:	89a3      	ldrh	r3, [r4, #12]
 8004562:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004566:	0718      	lsls	r0, r3, #28
 8004568:	d422      	bmi.n	80045b0 <__swsetup_r+0x64>
 800456a:	06d9      	lsls	r1, r3, #27
 800456c:	d407      	bmi.n	800457e <__swsetup_r+0x32>
 800456e:	2309      	movs	r3, #9
 8004570:	602b      	str	r3, [r5, #0]
 8004572:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004576:	81a3      	strh	r3, [r4, #12]
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
 800457c:	e034      	b.n	80045e8 <__swsetup_r+0x9c>
 800457e:	0758      	lsls	r0, r3, #29
 8004580:	d512      	bpl.n	80045a8 <__swsetup_r+0x5c>
 8004582:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004584:	b141      	cbz	r1, 8004598 <__swsetup_r+0x4c>
 8004586:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800458a:	4299      	cmp	r1, r3
 800458c:	d002      	beq.n	8004594 <__swsetup_r+0x48>
 800458e:	4628      	mov	r0, r5
 8004590:	f7ff f944 	bl	800381c <_free_r>
 8004594:	2300      	movs	r3, #0
 8004596:	6363      	str	r3, [r4, #52]	; 0x34
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800459e:	81a3      	strh	r3, [r4, #12]
 80045a0:	2300      	movs	r3, #0
 80045a2:	6063      	str	r3, [r4, #4]
 80045a4:	6923      	ldr	r3, [r4, #16]
 80045a6:	6023      	str	r3, [r4, #0]
 80045a8:	89a3      	ldrh	r3, [r4, #12]
 80045aa:	f043 0308 	orr.w	r3, r3, #8
 80045ae:	81a3      	strh	r3, [r4, #12]
 80045b0:	6923      	ldr	r3, [r4, #16]
 80045b2:	b94b      	cbnz	r3, 80045c8 <__swsetup_r+0x7c>
 80045b4:	89a3      	ldrh	r3, [r4, #12]
 80045b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045be:	d003      	beq.n	80045c8 <__swsetup_r+0x7c>
 80045c0:	4621      	mov	r1, r4
 80045c2:	4628      	mov	r0, r5
 80045c4:	f000 f88c 	bl	80046e0 <__smakebuf_r>
 80045c8:	89a0      	ldrh	r0, [r4, #12]
 80045ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045ce:	f010 0301 	ands.w	r3, r0, #1
 80045d2:	d00a      	beq.n	80045ea <__swsetup_r+0x9e>
 80045d4:	2300      	movs	r3, #0
 80045d6:	60a3      	str	r3, [r4, #8]
 80045d8:	6963      	ldr	r3, [r4, #20]
 80045da:	425b      	negs	r3, r3
 80045dc:	61a3      	str	r3, [r4, #24]
 80045de:	6923      	ldr	r3, [r4, #16]
 80045e0:	b943      	cbnz	r3, 80045f4 <__swsetup_r+0xa8>
 80045e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045e6:	d1c4      	bne.n	8004572 <__swsetup_r+0x26>
 80045e8:	bd38      	pop	{r3, r4, r5, pc}
 80045ea:	0781      	lsls	r1, r0, #30
 80045ec:	bf58      	it	pl
 80045ee:	6963      	ldrpl	r3, [r4, #20]
 80045f0:	60a3      	str	r3, [r4, #8]
 80045f2:	e7f4      	b.n	80045de <__swsetup_r+0x92>
 80045f4:	2000      	movs	r0, #0
 80045f6:	e7f7      	b.n	80045e8 <__swsetup_r+0x9c>
 80045f8:	200000e8 	.word	0x200000e8

080045fc <_raise_r>:
 80045fc:	291f      	cmp	r1, #31
 80045fe:	b538      	push	{r3, r4, r5, lr}
 8004600:	4604      	mov	r4, r0
 8004602:	460d      	mov	r5, r1
 8004604:	d904      	bls.n	8004610 <_raise_r+0x14>
 8004606:	2316      	movs	r3, #22
 8004608:	6003      	str	r3, [r0, #0]
 800460a:	f04f 30ff 	mov.w	r0, #4294967295
 800460e:	bd38      	pop	{r3, r4, r5, pc}
 8004610:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004612:	b112      	cbz	r2, 800461a <_raise_r+0x1e>
 8004614:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004618:	b94b      	cbnz	r3, 800462e <_raise_r+0x32>
 800461a:	4620      	mov	r0, r4
 800461c:	f000 f830 	bl	8004680 <_getpid_r>
 8004620:	462a      	mov	r2, r5
 8004622:	4601      	mov	r1, r0
 8004624:	4620      	mov	r0, r4
 8004626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800462a:	f000 b817 	b.w	800465c <_kill_r>
 800462e:	2b01      	cmp	r3, #1
 8004630:	d00a      	beq.n	8004648 <_raise_r+0x4c>
 8004632:	1c59      	adds	r1, r3, #1
 8004634:	d103      	bne.n	800463e <_raise_r+0x42>
 8004636:	2316      	movs	r3, #22
 8004638:	6003      	str	r3, [r0, #0]
 800463a:	2001      	movs	r0, #1
 800463c:	e7e7      	b.n	800460e <_raise_r+0x12>
 800463e:	2400      	movs	r4, #0
 8004640:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004644:	4628      	mov	r0, r5
 8004646:	4798      	blx	r3
 8004648:	2000      	movs	r0, #0
 800464a:	e7e0      	b.n	800460e <_raise_r+0x12>

0800464c <raise>:
 800464c:	4b02      	ldr	r3, [pc, #8]	; (8004658 <raise+0xc>)
 800464e:	4601      	mov	r1, r0
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	f7ff bfd3 	b.w	80045fc <_raise_r>
 8004656:	bf00      	nop
 8004658:	200000e8 	.word	0x200000e8

0800465c <_kill_r>:
 800465c:	b538      	push	{r3, r4, r5, lr}
 800465e:	4d07      	ldr	r5, [pc, #28]	; (800467c <_kill_r+0x20>)
 8004660:	2300      	movs	r3, #0
 8004662:	4604      	mov	r4, r0
 8004664:	4608      	mov	r0, r1
 8004666:	4611      	mov	r1, r2
 8004668:	602b      	str	r3, [r5, #0]
 800466a:	f7fc fec5 	bl	80013f8 <_kill>
 800466e:	1c43      	adds	r3, r0, #1
 8004670:	d102      	bne.n	8004678 <_kill_r+0x1c>
 8004672:	682b      	ldr	r3, [r5, #0]
 8004674:	b103      	cbz	r3, 8004678 <_kill_r+0x1c>
 8004676:	6023      	str	r3, [r4, #0]
 8004678:	bd38      	pop	{r3, r4, r5, pc}
 800467a:	bf00      	nop
 800467c:	2000033c 	.word	0x2000033c

08004680 <_getpid_r>:
 8004680:	f7fc beb2 	b.w	80013e8 <_getpid>

08004684 <_malloc_usable_size_r>:
 8004684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004688:	1f18      	subs	r0, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	bfbc      	itt	lt
 800468e:	580b      	ldrlt	r3, [r1, r0]
 8004690:	18c0      	addlt	r0, r0, r3
 8004692:	4770      	bx	lr

08004694 <__swhatbuf_r>:
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	460c      	mov	r4, r1
 8004698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800469c:	2900      	cmp	r1, #0
 800469e:	b096      	sub	sp, #88	; 0x58
 80046a0:	4615      	mov	r5, r2
 80046a2:	461e      	mov	r6, r3
 80046a4:	da0d      	bge.n	80046c2 <__swhatbuf_r+0x2e>
 80046a6:	89a3      	ldrh	r3, [r4, #12]
 80046a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80046ac:	f04f 0100 	mov.w	r1, #0
 80046b0:	bf0c      	ite	eq
 80046b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80046b6:	2340      	movne	r3, #64	; 0x40
 80046b8:	2000      	movs	r0, #0
 80046ba:	6031      	str	r1, [r6, #0]
 80046bc:	602b      	str	r3, [r5, #0]
 80046be:	b016      	add	sp, #88	; 0x58
 80046c0:	bd70      	pop	{r4, r5, r6, pc}
 80046c2:	466a      	mov	r2, sp
 80046c4:	f000 f848 	bl	8004758 <_fstat_r>
 80046c8:	2800      	cmp	r0, #0
 80046ca:	dbec      	blt.n	80046a6 <__swhatbuf_r+0x12>
 80046cc:	9901      	ldr	r1, [sp, #4]
 80046ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80046d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80046d6:	4259      	negs	r1, r3
 80046d8:	4159      	adcs	r1, r3
 80046da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046de:	e7eb      	b.n	80046b8 <__swhatbuf_r+0x24>

080046e0 <__smakebuf_r>:
 80046e0:	898b      	ldrh	r3, [r1, #12]
 80046e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046e4:	079d      	lsls	r5, r3, #30
 80046e6:	4606      	mov	r6, r0
 80046e8:	460c      	mov	r4, r1
 80046ea:	d507      	bpl.n	80046fc <__smakebuf_r+0x1c>
 80046ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	6123      	str	r3, [r4, #16]
 80046f4:	2301      	movs	r3, #1
 80046f6:	6163      	str	r3, [r4, #20]
 80046f8:	b002      	add	sp, #8
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
 80046fc:	ab01      	add	r3, sp, #4
 80046fe:	466a      	mov	r2, sp
 8004700:	f7ff ffc8 	bl	8004694 <__swhatbuf_r>
 8004704:	9900      	ldr	r1, [sp, #0]
 8004706:	4605      	mov	r5, r0
 8004708:	4630      	mov	r0, r6
 800470a:	f7ff f8fb 	bl	8003904 <_malloc_r>
 800470e:	b948      	cbnz	r0, 8004724 <__smakebuf_r+0x44>
 8004710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004714:	059a      	lsls	r2, r3, #22
 8004716:	d4ef      	bmi.n	80046f8 <__smakebuf_r+0x18>
 8004718:	f023 0303 	bic.w	r3, r3, #3
 800471c:	f043 0302 	orr.w	r3, r3, #2
 8004720:	81a3      	strh	r3, [r4, #12]
 8004722:	e7e3      	b.n	80046ec <__smakebuf_r+0xc>
 8004724:	89a3      	ldrh	r3, [r4, #12]
 8004726:	6020      	str	r0, [r4, #0]
 8004728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472c:	81a3      	strh	r3, [r4, #12]
 800472e:	9b00      	ldr	r3, [sp, #0]
 8004730:	6163      	str	r3, [r4, #20]
 8004732:	9b01      	ldr	r3, [sp, #4]
 8004734:	6120      	str	r0, [r4, #16]
 8004736:	b15b      	cbz	r3, 8004750 <__smakebuf_r+0x70>
 8004738:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800473c:	4630      	mov	r0, r6
 800473e:	f000 f81d 	bl	800477c <_isatty_r>
 8004742:	b128      	cbz	r0, 8004750 <__smakebuf_r+0x70>
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	f023 0303 	bic.w	r3, r3, #3
 800474a:	f043 0301 	orr.w	r3, r3, #1
 800474e:	81a3      	strh	r3, [r4, #12]
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	431d      	orrs	r5, r3
 8004754:	81a5      	strh	r5, [r4, #12]
 8004756:	e7cf      	b.n	80046f8 <__smakebuf_r+0x18>

08004758 <_fstat_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4d07      	ldr	r5, [pc, #28]	; (8004778 <_fstat_r+0x20>)
 800475c:	2300      	movs	r3, #0
 800475e:	4604      	mov	r4, r0
 8004760:	4608      	mov	r0, r1
 8004762:	4611      	mov	r1, r2
 8004764:	602b      	str	r3, [r5, #0]
 8004766:	f7fc fea6 	bl	80014b6 <_fstat>
 800476a:	1c43      	adds	r3, r0, #1
 800476c:	d102      	bne.n	8004774 <_fstat_r+0x1c>
 800476e:	682b      	ldr	r3, [r5, #0]
 8004770:	b103      	cbz	r3, 8004774 <_fstat_r+0x1c>
 8004772:	6023      	str	r3, [r4, #0]
 8004774:	bd38      	pop	{r3, r4, r5, pc}
 8004776:	bf00      	nop
 8004778:	2000033c 	.word	0x2000033c

0800477c <_isatty_r>:
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	4d06      	ldr	r5, [pc, #24]	; (8004798 <_isatty_r+0x1c>)
 8004780:	2300      	movs	r3, #0
 8004782:	4604      	mov	r4, r0
 8004784:	4608      	mov	r0, r1
 8004786:	602b      	str	r3, [r5, #0]
 8004788:	f7fc fea5 	bl	80014d6 <_isatty>
 800478c:	1c43      	adds	r3, r0, #1
 800478e:	d102      	bne.n	8004796 <_isatty_r+0x1a>
 8004790:	682b      	ldr	r3, [r5, #0]
 8004792:	b103      	cbz	r3, 8004796 <_isatty_r+0x1a>
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	bd38      	pop	{r3, r4, r5, pc}
 8004798:	2000033c 	.word	0x2000033c

0800479c <_init>:
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	bf00      	nop
 80047a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a2:	bc08      	pop	{r3}
 80047a4:	469e      	mov	lr, r3
 80047a6:	4770      	bx	lr

080047a8 <_fini>:
 80047a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047aa:	bf00      	nop
 80047ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ae:	bc08      	pop	{r3}
 80047b0:	469e      	mov	lr, r3
 80047b2:	4770      	bx	lr
